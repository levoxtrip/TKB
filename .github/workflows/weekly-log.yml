name: Commit-based Log

on:
  push:
    branches:
      - main  # Ändere diesen Branch-Namen entsprechend deinem Haupt-Branch (z.B. "main" oder "master")

jobs:
  create-log:
    runs-on: ubuntu-latest

    steps:
      # 1. Checke das Repository aus
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Sammle alle neuen Dateien im Ordner `/docs/topics/`
      - name: Get new files in /docs/topics/ since the last week
        id: new-files
        run: |
          echo "Collecting new files in /docs/topics/..."
          
          # Setze ein Environment-Variable für das Verzeichnis
          FILE_DIR="docs/topics/"
          
          # Sammle alle Dateien, die in den letzten 7 Tagen hinzugefügt wurden (diff-filter=A zeigt nur neue Dateien)
          NEW_FILES=$(git log --diff-filter=A --since="7 days ago" --name-only --pretty="" -- $FILE_DIR)

          # Zeige die gesammelten neuen Dateien zur Überprüfung an
          echo "New files added in the last week in $FILE_DIR:"
          echo "$NEW_FILES"

          # Speichere die gesammelten Dateien in einer temporären Datei für den nächsten Schritt
          echo "$NEW_FILES" > new_files.txt

      # 3. Generiere die Log-Datei `log.md` basierend auf den neuen Dateien
      - name: Create log.md
        run: |
          # Lies die Liste der neuen Dateien aus der temporären Datei
          NEW_FILES=$(cat new_files.txt)

          # Überschreibe die bestehende log.md-Datei und füge die neuen Inhalte hinzu
          echo "# Commit-based Log" > log.md
          echo "## New files added in /docs/topics/ in the last week:" >> log.md

          # Wenn keine neuen Dateien vorhanden sind, schreibe eine entsprechende Nachricht
          if [ -z "$NEW_FILES" ]; then
            echo "No new files added in /docs/topics/ in the last week." >> log.md
          else
            # Verwende IFS, um Zeilenumbrüche als Trenner festzulegen, damit alle Dateien erfasst werden
            IFS=$'\n'
            for FILE in $NEW_FILES; do
              echo "- $FILE" >> log.md
            done
          fi

          # Debugging: Zeige den Inhalt der `log.md`-Datei an
          echo "Generated log.md content:"
          cat log.md

      # 4. Füge die Log-Datei `log.md` zum Repository hinzu und committe sie
      - name: Commit and push log.md
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  # Verwendet den Personal Access Token (PAT) für Push-Berechtigungen
        run: |
          git config --local user.name "levoxtrip"
          git config --local user.email "levoxtrip@gmail.com"
          
          # Füge die `log.md`-Datei zum Git hinzu und erzwinge das Hinzufügen
          git add -f log.md

          # Commit ausführen, auch wenn die Datei bereits existiert
          git commit -m "Overwrite log.md with updates for new files in /docs/topics/ in the last week" || echo "Nothing to commit"
          
          # Push die Änderungen, selbst wenn keine neuen Dateien hinzugefügt wurden
          git push https://levoxtrip:${{ secrets.PAT_TOKEN }}@github.com/levoxtrip/TKB.git || echo "Push failed, no changes to push."
