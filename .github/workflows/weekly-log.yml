name: Commit-based Log with Dates

on:
  push:
    branches:
      - main  # Ändere diesen Branch-Namen entsprechend deinem Haupt-Branch (z.B. "main" oder "master")

jobs:
  create-log:
    runs-on: ubuntu-latest

    steps:
      # 1. Checke das Repository aus
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Sammle alle neuen Dateien im Ordner `/docs/topics/` und deren Erstellungsdatum
      - name: Get new files with dates in /docs/topics/ since the last week
        id: new-files
        run: |
          echo "Collecting new files and their dates in /docs/topics/..."

          # Setze ein Environment-Variable für das Verzeichnis
          FILE_DIR="docs/topics/"

          # Sammle die neuen Dateien mit dem Format "Dateiname (added on YYYY-MM-DD)"
          # Verwende `git log` mit angepasstem `awk`-Skript, um nur Dateiname und Datum anzuzeigen und den Commit-Hash zu entfernen.
          git log --diff-filter=A --since="7 days ago" --pretty=format:"%ad" --name-only --date=short -- $FILE_DIR | \
          awk 'BEGIN {date=""} /^[0-9]{4}-[0-9]{2}-[0-9]{2}/ {date=$0; next} {print "- " $0 " (added on " date ")"}' > new_files_with_dates.txt

          # Entferne doppelte Zeilen, um sicherzustellen, dass jede Datei nur einmal angezeigt wird
          sort -u new_files_with_dates.txt -o new_files_with_dates.txt

          # Zeige die gesammelten neuen Dateien mit Datum zur Überprüfung an
          echo "New files with dates added in the last week in $FILE_DIR:"
          cat new_files_with_dates.txt

      # 3. Generiere die Log-Datei `log.md` basierend auf den neuen Dateien und deren Erstellungsdatum
      - name: Create log.md with dates
        run: |
          # Überschreibe die bestehende log.md-Datei und füge die neuen Inhalte hinzu
          echo "# Commit-based Log" > log.md
          echo "## New files added in /docs/topics/ in the last week with dates:" >> log.md

          # Füge die Inhalte von new_files_with_dates.txt zur log.md hinzu
          cat new_files_with_dates.txt >> log.md

          # Debugging: Zeige den Inhalt der `log.md`-Datei an
          echo "Generated log.md content:"
          cat log.md

      # 4. Füge die Log-Datei `log.md` zum Repository hinzu und committe sie
      - name: Commit and push log.md
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  # Verwendet den Personal Access Token (PAT) für Push-Berechtigungen
        run: |
          git config --local user.name "levoxtrip"
          git config --local user.email "levoxtrip@gmail.com"
          
          # Füge die `log.md`-Datei zum Git hinzu und erzwinge das Hinzufügen
          git add -f log.md

          # Commit ausführen, auch wenn die Datei bereits existiert
          git commit -m "Update log.md with new files and their dates from /docs/topics/ in the last week" || echo "Nothing to commit"
          
          # Push die Änderungen, selbst wenn keine neuen Dateien hinzugefügt wurden
          git push https://levoxtrip:${{ secrets.PAT_TOKEN }}@github.com/levoxtrip/TKB.git || echo "Push failed, no changes to push."
