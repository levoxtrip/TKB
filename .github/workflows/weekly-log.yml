name: Commit-based Log with Accurate Dates

on:
  push:
    branches:
      - main  # Ändere diesen Branch-Namen entsprechend deinem Haupt-Branch (z.B. "main" oder "master")

jobs:
  create-log:
    runs-on: ubuntu-latest

    steps:
      # 1. Checke das Repository aus
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Sammle alle neuen Dateien im Ordner `/docs/topics/`
      - name: Get new files in /docs/topics/ since the last week
        id: new-files
        run: |
          echo "Collecting new files in /docs/topics/..."

          # Setze das Zielverzeichnis als Variable
          FILE_DIR="docs/topics/"

          # Sammle alle Dateien, die in den letzten 7 Tagen hinzugefügt wurden (diff-filter=A zeigt nur neue Dateien)
          NEW_FILES=$(git log --diff-filter=A --since="7 days ago" --name-only --pretty="" -- $FILE_DIR)

          # Zeige die gesammelten neuen Dateien zur Überprüfung an
          echo "New files added in the last week in $FILE_DIR:"
          echo "$NEW_FILES"

          # Speichere die Ausgabe als temporäre Datei, um in den nächsten Schritten zu verwenden
          echo "$NEW_FILES" > new_files_list.txt

      # 3. Hole das Erstellungsdatum für jede Datei
      - name: Get creation date for each new file
        run: |
          # Erstelle eine leere Datei, um die Dateien mit ihren Erstellungsdaten zu speichern
          > new_files_with_dates.txt

          # Für jede Datei in der Liste, hole das Erstellungsdatum mit `git log`
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              # Hole das Datum des ersten Commits für diese Datei (Erstellungsdatum)
              DATE=$(git log --follow --format="%ad" --date=short -1 -- "$file")
              # Wenn das Datum erfolgreich gefunden wurde, füge es zur Datei hinzu
              if [ -n "$DATE" ]; then
                echo "- $file (added on $DATE)" >> new_files_with_dates.txt
              else
                echo "Error: Could not retrieve creation date for $file" >> error_log.txt
              fi
            fi
          done < new_files_list.txt

          # Zeige die Datei mit den Namen und Erstellungsdaten an
          echo "Files with their creation dates:"
          cat new_files_with_dates.txt

      # 4. Generiere die Log-Datei `log.md` basierend auf den neuen Dateien und deren Erstellungsdatum
      - name: Create log.md with accurate dates
        run: |
          # Überschreibe die bestehende log.md-Datei und füge die neuen Inhalte hinzu
          echo "# Commit-based Log" > log.md
          echo "## New files added in /docs/topics/ in the last week with accurate dates:" >> log.md

          # Füge die Inhalte von new_files_with_dates.txt zur log.md hinzu
          cat new_files_with_dates.txt >> log.md

          # Debugging: Zeige den Inhalt der `log.md`-Datei an
          echo "Generated log.md content:"
          cat log.md

      # 5. Füge die Log-Datei `log.md` zum Repository hinzu und committe sie
      - name: Commit and push log.md
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  # Verwendet den Personal Access Token (PAT) für Push-Berechtigungen
        run: |
          git config --local user.name "levoxtrip"
          git config --local user.email "levoxtrip@gmail.com"
          
          # Füge die `log.md`-Datei zum Git hinzu und erzwinge das Hinzufügen
          git add -f log.md

          # Commit ausführen, auch wenn die Datei bereits existiert
          git commit -m "Update log.md with new files and their accurate dates from /docs/topics/ in the last week" || echo "Nothing to commit"
          
          # Push die Änderungen, selbst wenn keine neuen Dateien hinzugefügt wurden
          git push https://levoxtrip:${{ secrets.PAT_TOKEN }}@github.com/levoxtrip/TKB.git || echo "Push failed, no changes to push."
