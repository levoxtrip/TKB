{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TKB","text":"<p>Welcome to TKB \u2013 a growing collection of tools, tips, and tutorials designed to empower your creative journey. Here, I\u2019m sharing what I\u2019ve learned about creative coding, TouchDesigner, Unity, and other tech gems, so you can dive into interactive projects, visual experiments, and digital experiences. Whether you\u2019re new to these platforms or looking to push your boundaries, you\u2019ll find inspiration, insights, and practical knowledge to fuel your next creation. Explore, experiment, and let\u2019s learn together!</p> <p>For full documentation visit TouchDesigner.</p> <p>For full documentation visit VVVV.</p> <p>For full documentation visit Three.js.</p> <p>For full documentation visit Python.</p> <p>For full documentation visit VCVRack.</p> <p>For full documentation visit VSCode.</p> <p>For full documentation visit Unity.</p> <p>For full documentation visit Terminal.</p> <p>For full documentation visit Shader.</p> <p>For full documentation visit Sensors.</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:2d","title":"2D","text":"<ul> <li>            OpenCV          </li> <li>            Runtime          </li> <li>            Skia          </li> </ul>"},{"location":"tags/#tag:3d","title":"3D","text":"<ul> <li>            Stride          </li> </ul>"},{"location":"tags/#tag:ai","title":"AI","text":"<ul> <li>            Create AI environment maps          </li> </ul>"},{"location":"tags/#tag:art","title":"ART","text":"<ul> <li>            AfroBasaldella          </li> <li>            FranzKline          </li> <li>            MikhailLarionov          </li> <li>            NataliaGoncharova          </li> <li>            RobertoMatt          </li> </ul>"},{"location":"tags/#tag:artabstract","title":"ART/Abstract","text":"<ul> <li>            AfroBasaldella          </li> <li>            FranzKline          </li> <li>            NataliaGoncharova          </li> </ul>"},{"location":"tags/#tag:artfauvism","title":"ART/Fauvism","text":"<ul> <li>            MikhailLarionov          </li> </ul>"},{"location":"tags/#tag:artpainting","title":"ART/Painting","text":"<ul> <li>            AfroBasaldella          </li> <li>            FranzKline          </li> <li>            MikhailLarionov          </li> <li>            NataliaGoncharova          </li> <li>            RobertoMatt          </li> </ul>"},{"location":"tags/#tag:artsurrealism","title":"ART/Surrealism","text":"<ul> <li>            RobertoMatt          </li> </ul>"},{"location":"tags/#tag:android","title":"Android","text":"<ul> <li>            Dublicate Adressable Group in Android APK          </li> </ul>"},{"location":"tags/#tag:audio","title":"Audio","text":"<ul> <li>            Audio          </li> <li>            BasicKickDrum          </li> <li>            Basics          </li> <li>            Chorus          </li> <li>            EugeneRareBreeds          </li> <li>            Eurorack          </li> <li>            NoisePlethoraBefaco          </li> <li>            RecurringBeatPattern          </li> <li>            Rhythm          </li> <li>            TriggerSingleSound          </li> <li>            VCF          </li> </ul>"},{"location":"tags/#tag:audiobasics","title":"Audio/Basics","text":"<ul> <li>            BasicKickDrum          </li> <li>            Basics          </li> <li>            Chorus          </li> <li>            Eurorack          </li> </ul>"},{"location":"tags/#tag:audiorhythm","title":"Audio/Rhythm","text":"<ul> <li>            RecurringBeatPattern          </li> <li>            Rhythm          </li> </ul>"},{"location":"tags/#tag:blender","title":"Blender","text":"<ul> <li>            Add Thickness To Plane          </li> <li>            Basics          </li> <li>            Blender Learning Sources          </li> <li>            Create AI environment maps          </li> <li>            Create Environment map in Blender          </li> <li>            Create Studio Lighting Setup          </li> <li>            Link Objects to Each Other          </li> <li>            Smooth Geometry          </li> </ul>"},{"location":"tags/#tag:c","title":"C#","text":"<ul> <li>            C# Scripts          </li> </ul>"},{"location":"tags/#tag:css","title":"CSS","text":"<ul> <li>            CSS          </li> </ul>"},{"location":"tags/#tag:coding","title":"Coding","text":"<ul> <li>            Basics Coding          </li> </ul>"},{"location":"tags/#tag:conversion","title":"Conversion","text":"<ul> <li>            MapCHOPValuesToNewIntervall          </li> <li>            StretchCHOPToNumSamples          </li> </ul>"},{"location":"tags/#tag:dmx","title":"DMX","text":"<ul> <li>            Art-Net          </li> <li>            DMX          </li> </ul>"},{"location":"tags/#tag:eurorack","title":"Eurorack","text":"<ul> <li>            Eurorack          </li> </ul>"},{"location":"tags/#tag:expo","title":"Expo","text":"<ul> <li>            Setup EAS          </li> <li>            Setup Expo          </li> </ul>"},{"location":"tags/#tag:glsl","title":"GLSL","text":"<ul> <li>            Algorithmic Drawing          </li> <li>            Basic Intro          </li> <li>            Datamosh          </li> <li>            GLSL Language          </li> <li>            Pattern          </li> <li>            Random          </li> <li>            Transformations          </li> <li>            Vertex Shader          </li> </ul>"},{"location":"tags/#tag:git","title":"Git","text":"<ul> <li>            Useful Commands          </li> </ul>"},{"location":"tags/#tag:github","title":"Github","text":"<ul> <li>            Host Vite React Project on Github Pages          </li> </ul>"},{"location":"tags/#tag:hydrasynth","title":"HydraSynth","text":"<ul> <li>            Loading Hydra Extention          </li> <li>            Writing own functions          </li> </ul>"},{"location":"tags/#tag:js","title":"JS","text":"<ul> <li>            Data From Device          </li> <li>            JS Error          </li> </ul>"},{"location":"tags/#tag:javascript","title":"JavaScript","text":"<ul> <li>            Basics          </li> <li>            Basics          </li> <li>            DotEnv          </li> <li>            Express          </li> <li>            Loading Hydra Extention          </li> <li>            NPM          </li> <li>            React FirebseDatabase          </li> <li>            Run Script On Server          </li> <li>            Writing own functions          </li> </ul>"},{"location":"tags/#tag:javascriptreact","title":"JavaScript/React","text":"<ul> <li>            Basics          </li> <li>            React FirebseDatabase          </li> </ul>"},{"location":"tags/#tag:javascript","title":"Javascript","text":"<ul> <li>            Basics          </li> <li>            Basics          </li> <li>            Basics          </li> <li>            Creating a project with Expo          </li> <li>            Execute useEffect for specific state          </li> <li>            Host Vite React Project on Github Pages          </li> <li>            Mapbox React Native          </li> <li>            Native Wind          </li> <li>            Setup EAS          </li> <li>            Setup Expo          </li> <li>            Setup Three.JS in React          </li> <li>            Three.js Shader          </li> </ul>"},{"location":"tags/#tag:json","title":"Json","text":"<ul> <li>            Interface from JSON          </li> </ul>"},{"location":"tags/#tag:list","title":"List","text":"<ul> <li>            Limit length of list          </li> </ul>"},{"location":"tags/#tag:livecoding","title":"LiveCoding","text":"<ul> <li>            Loading Hydra Extention          </li> <li>            Writing own functions          </li> </ul>"},{"location":"tags/#tag:math","title":"Math","text":"<ul> <li>            Algorithmic Drawing          </li> <li>            Pattern          </li> <li>            Random          </li> <li>            Solving Equations          </li> <li>            Transformations          </li> </ul>"},{"location":"tags/#tag:measuring","title":"Measuring","text":"<ul> <li>            MeasureChangeOfValue          </li> </ul>"},{"location":"tags/#tag:networking","title":"Networking","text":"<ul> <li>            Setting up a local HTTP Server          </li> </ul>"},{"location":"tags/#tag:oop","title":"OOP","text":"<ul> <li>            Object oriented programming          </li> </ul>"},{"location":"tags/#tag:opencv","title":"OpenCV","text":"<ul> <li>            OpenCV          </li> </ul>"},{"location":"tags/#tag:p5","title":"P5","text":"<ul> <li>            Data From Device          </li> </ul>"},{"location":"tags/#tag:particle-system","title":"Particle System","text":"<ul> <li>            POP Particle System          </li> </ul>"},{"location":"tags/#tag:particlesystem","title":"ParticleSystem","text":"<ul> <li>            Particle System          </li> </ul>"},{"location":"tags/#tag:projectionmapping","title":"ProjectionMapping","text":"<ul> <li>            Projection Mapping          </li> </ul>"},{"location":"tags/#tag:python","title":"Python","text":"<ul> <li>            Assign an Expression via Script          </li> <li>            GetAllValuesChopAsList          </li> <li>            Limit length of list          </li> <li>            Python in Touch          </li> <li>            SetLocalVariablesOperator          </li> <li>            Specifc Scripting for Touch          </li> </ul>"},{"location":"tags/#tag:react","title":"React","text":"<ul> <li>            Basics          </li> <li>            Basics          </li> <li>            Converting Json to typescript          </li> <li>            Execute useEffect for specific state          </li> <li>            Host Vite React Project on Github Pages          </li> <li>            Interface from JSON          </li> <li>            React FirebseDatabase          </li> <li>            Routing in React          </li> <li>            Setup Three.JS in React          </li> <li>            Tailwind CSS - Basics          </li> </ul>"},{"location":"tags/#tag:reactnative","title":"ReactNative","text":"<ul> <li>            Basics          </li> <li>            Converting Json to typescript          </li> <li>            Creating a project with Expo          </li> <li>            Interface from JSON          </li> <li>            Mapbox React Native          </li> <li>            Native Wind          </li> <li>            Routing in React          </li> <li>            Tailwind CSS - Basics          </li> </ul>"},{"location":"tags/#tag:reactnativelibrary","title":"ReactNative/Library","text":"<ul> <li>            Mapbox React Native          </li> </ul>"},{"location":"tags/#tag:scripting","title":"Scripting","text":"<ul> <li>            Assign an Expression via Script          </li> <li>            GetAllValuesChopAsList          </li> <li>            Often used scripting for DATS          </li> <li>            PopulateTableDATViaScript          </li> <li>            SetLocalVariablesOperator          </li> </ul>"},{"location":"tags/#tag:sensors","title":"Sensors","text":"<ul> <li>            Overview Sensors          </li> </ul>"},{"location":"tags/#tag:server","title":"Server","text":"<ul> <li>            DotEnv          </li> <li>            Express          </li> </ul>"},{"location":"tags/#tag:shader","title":"Shader","text":"<ul> <li>            Signed Distance Fields          </li> <li>            Three.js Shader          </li> </ul>"},{"location":"tags/#tag:shaderfragment","title":"Shader/Fragment","text":"<ul> <li>            Algorithmic Drawing          </li> <li>            Basic Intro          </li> <li>            Datamosh          </li> <li>            GLSL Language          </li> <li>            Pattern          </li> <li>            Random          </li> <li>            Transformations          </li> </ul>"},{"location":"tags/#tag:shadervertex","title":"Shader/Vertex","text":"<ul> <li>            Vertex Shader          </li> </ul>"},{"location":"tags/#tag:skia","title":"Skia","text":"<ul> <li>            Runtime          </li> <li>            Skia          </li> </ul>"},{"location":"tags/#tag:stride","title":"Stride","text":"<ul> <li>            Stride          </li> <li>            StrideFX          </li> </ul>"},{"location":"tags/#tag:swiftui","title":"SwiftUI","text":"<ul> <li>            Problems          </li> <li>            Set the color of date picker to white          </li> </ul>"},{"location":"tags/#tag:td","title":"TD","text":"<ul> <li>            CreatePointForParticleSystem          </li> <li>            DistributePointsAtRandomPosition          </li> <li>            POP Particle System          </li> <li>            POPS          </li> <li>            Particle System          </li> </ul>"},{"location":"tags/#tag:td3d","title":"TD/3D","text":"<ul> <li>            AccessCameraDepthTop          </li> </ul>"},{"location":"tags/#tag:tdapi","title":"TD/API","text":"<ul> <li>            Calling an API from touchdesigner          </li> </ul>"},{"location":"tags/#tag:tdanimation","title":"TD/Animation","text":"<ul> <li>            Animate over timeline length          </li> </ul>"},{"location":"tags/#tag:tdbase","title":"TD/BASE","text":"<ul> <li>            Mapping          </li> <li>            SetCustomFrameRateProcess          </li> </ul>"},{"location":"tags/#tag:tdbeat","title":"TD/BEAT","text":"<ul> <li>            CreatingSteppedNoise          </li> </ul>"},{"location":"tags/#tag:tdcamera","title":"TD/CAMERA","text":"<ul> <li>            RotateCameraOnCirlceSOP          </li> </ul>"},{"location":"tags/#tag:tdchop","title":"TD/CHOP","text":"<ul> <li>            Animate over timeline length          </li> <li>            Assign an Expression via Script          </li> <li>            ChangeSeedWithClock          </li> <li>            ConvertingDATIntoGraph          </li> <li>            DisplaceSOPByCHOPValues          </li> <li>            FullImageTopToCHOP          </li> <li>            GetAllValuesChopAsList          </li> <li>            GetSpecificSampleFromCHOP          </li> <li>            GrabCurrentInputValueConstantCHOP          </li> <li>            MapCHOPValuesToNewIntervall          </li> <li>            MapCHOPtoSOPLength          </li> <li>            MoveInstancedShapesOnSpiralPath          </li> <li>            StretchCHOPToNumSamples          </li> </ul>"},{"location":"tags/#tag:tdchops","title":"TD/CHOPS","text":"<ul> <li>               UseTimelineForLoopingChopValues          </li> <li>            AddChannelsIntoSequenz          </li> <li>            AnimatePatternCHOP          </li> <li>            AnimateThroughDataPoints          </li> <li>            AttackDecaySustainRelease          </li> <li>            AudioInputIntoScalingValue          </li> <li>            CombingChannelsPatternCHOP          </li> <li>            CombiningChannelsMathCHOP          </li> <li>            ConvertSingleChannelTopIntoMultiChannel          </li> <li>            CreatingSteppedNoise          </li> <li>            DefineLoopingBehaviourCHOP          </li> <li>            DeleteSamplesBeginningEndCHOP          </li> <li>            FlipChannelPath          </li> <li>            HoldLastChangedValue          </li> <li>            InfiniteLoopingNoiseChannel          </li> <li>            IterateThroughConstantChannelsViaScript          </li> <li>            KeepChannelCountStableReplaceCHOP          </li> <li>            ManipulateCHOPValueExpressionCHOP          </li> <li>            MeasureChangeOfValue          </li> <li>            OffsetSingleChannelCHOP          </li> <li>            OnlyEffectCertainChannelsMath          </li> <li>            ReduceNumChannelsButKeepShape          </li> <li>            ReplicateSampleAtEndBegginng          </li> <li>            ResampleAudioToSOPLength          </li> <li>            TestEffectsLowPerformanceCHOP          </li> <li>            Tips and tricks          </li> <li>            ToggleValueViaKeyboard          </li> <li>            TriggerSingleSound          </li> </ul>"},{"location":"tags/#tag:tdcomp","title":"TD/COMP","text":"<ul> <li>            Container Vs Base          </li> <li>            Cornerpinning Output via Interface with StonerCOMP          </li> <li>            FloatingWindow          </li> <li>            NodeFlags          </li> <li>            OpenFilePickerBtn          </li> <li>            PerformanceMonitor          </li> <li>            Replicator          </li> <li>            SelectCOMPSelectUIElements          </li> <li>            SetBackgroundContainer          </li> <li>            SetLockFlagViaScript          </li> <li>            SetValueOfSliderViaScript          </li> <li>            SetWidgetAsChildrenContainer          </li> <li>            Show Operator in UI          </li> <li>            ShowSpecificOperatorContainer          </li> </ul>"},{"location":"tags/#tag:tdcopysop","title":"TD/COPYSOP","text":"<ul> <li>            SpreadCopiesEvenlyAround360CopySOP          </li> </ul>"},{"location":"tags/#tag:tdcamera","title":"TD/Camera","text":"<ul> <li>            AccessCameraDepthTop          </li> </ul>"},{"location":"tags/#tag:tdconversion","title":"TD/Conversion","text":"<ul> <li>            Assign an Expression via Script          </li> <li>            FullImageTopToCHOP          </li> <li>            GetAllValuesChopAsList          </li> <li>            GrabCurrentInputValueConstantCHOP          </li> <li>            MapCHOPtoSOPLength          </li> </ul>"},{"location":"tags/#tag:tdcopy","title":"TD/Copy","text":"<ul> <li>            ChangeOrderPointsSortSOP          </li> <li>            DeleteCopyWithGroup          </li> </ul>"},{"location":"tags/#tag:tddat","title":"TD/DAT","text":"<ul> <li>            Assign an Expression via Script          </li> <li>            ConvertTextToTable          </li> <li>            ConvertingDATIntoGraph          </li> <li>            ExecuteNewSelectionTable          </li> <li>            ExpressionValuesDAT          </li> <li>            GetAllValuesChopAsList          </li> <li>            ManipulateSOPwithData          </li> <li>            Often used scripting for DATS          </li> <li>            PopulateTableDATViaScript          </li> <li>            ReplaceSpecificDataTableMerge          </li> <li>            SelectTableDataByValue          </li> <li>            SetLocalVariablesOperator          </li> <li>            SetTextTOPFromTableDAT          </li> <li>            StoringDataViaScript          </li> <li>            SwappingColsRowsTable          </li> </ul>"},{"location":"tags/#tag:tddisplace","title":"TD/DISPLACE","text":"<ul> <li>            DisplaceGridMagnetSOP          </li> </ul>"},{"location":"tags/#tag:tddisplace","title":"TD/Displace","text":"<ul> <li>            DisplaceFixedSOPSurfaceSpringSOP          </li> <li>            DisplaceSOPByCHOPValues          </li> <li>            DisplaceSOPOnlyXY          </li> <li>            ManipulateSOPwithData          </li> <li>            SkinnedShapeFromLines          </li> </ul>"},{"location":"tags/#tag:tdeffects","title":"TD/Effects","text":"<ul> <li>            AccessPixelValueTOP          </li> <li>            ApplyEffectForOnlySpecificChannels          </li> </ul>"},{"location":"tags/#tag:tderror","title":"TD/Error","text":"<ul> <li>            DefiningLoadingErrorImage          </li> </ul>"},{"location":"tags/#tag:tdevaluate","title":"TD/Evaluate","text":"<ul> <li>            ExpressionValuesDAT          </li> </ul>"},{"location":"tags/#tag:tdexecute","title":"TD/Execute","text":"<ul> <li>            ChangeValuesLockedTOP          </li> <li>            ExecuteNewSelectionTable          </li> </ul>"},{"location":"tags/#tag:tdfeedback","title":"TD/Feedback","text":"<ul> <li>            HigherQualityFeedback          </li> </ul>"},{"location":"tags/#tag:tdframerate","title":"TD/Framerate","text":"<ul> <li>            Mapping          </li> <li>            SetCustomFrameRateProcess          </li> </ul>"},{"location":"tags/#tag:tdgrid","title":"TD/GRID","text":"<ul> <li>            DisplaceGridMagnetSOP          </li> </ul>"},{"location":"tags/#tag:tdgridsop","title":"TD/GRIDSOP","text":"<ul> <li>            DisplaceGridWithPatternCHOP          </li> </ul>"},{"location":"tags/#tag:tdgrid","title":"TD/Grid","text":"<ul> <li>            ImageInstancingOnGrid          </li> </ul>"},{"location":"tags/#tag:tdgroupsop","title":"TD/GroupSOP","text":"<ul> <li>            DisplaceSOPOnlyXY          </li> </ul>"},{"location":"tags/#tag:tdimport","title":"TD/Import","text":"<ul> <li>            ImportSpecificGeoFromFBX          </li> </ul>"},{"location":"tags/#tag:tdinstancing","title":"TD/Instancing","text":"<ul> <li>            ImageInstancingOnGrid          </li> <li>            MoveInstancedShapesOnSpiralPath          </li> <li>            SetTextTOPFromTableDAT          </li> </ul>"},{"location":"tags/#tag:tdinteraction","title":"TD/Interaction","text":"<ul> <li>            ToggleValueViaKeyboard          </li> </ul>"},{"location":"tags/#tag:tdlights","title":"TD/Lights","text":"<ul> <li>            Art-Net          </li> <li>            DMX          </li> </ul>"},{"location":"tags/#tag:tdmat","title":"TD/MAT","text":"<ul> <li>            Create3DShapePhongMAT          </li> </ul>"},{"location":"tags/#tag:tdmapping","title":"TD/Mapping","text":"<ul> <li>            Cornerpinning Output via Interface with StonerCOMP          </li> </ul>"},{"location":"tags/#tag:tdnoise","title":"TD/NOISE","text":"<ul> <li>            ChangeSeedWithClock          </li> </ul>"},{"location":"tags/#tag:tdnoises","title":"TD/NOISES","text":"<ul> <li>            CreatingSteppedNoise          </li> </ul>"},{"location":"tags/#tag:tdnavigation","title":"TD/Navigation","text":"<ul> <li>            FindingReferenceParameterExport          </li> <li>            Navigation Shortcuts          </li> <li>            See how TD Elements are build          </li> </ul>"},{"location":"tags/#tag:tdnoise","title":"TD/Noise","text":"<ul> <li>            DisplaceFixedSOPSurfaceSpringSOP          </li> <li>            OutputNoiseTOPTransparency          </li> <li>            Play Video with Slow Speed          </li> <li>            SkinnedShapeFromLines          </li> </ul>"},{"location":"tags/#tag:tdoptimisation","title":"TD/Optimisation","text":"<ul> <li>            HigherQualityFeedback          </li> </ul>"},{"location":"tags/#tag:tdpattern","title":"TD/PATTERN","text":"<ul> <li>            CombingChannelsPatternCHOP          </li> </ul>"},{"location":"tags/#tag:tdpops","title":"TD/POPS","text":"<ul> <li>            POP Particle System          </li> <li>            POPS          </li> </ul>"},{"location":"tags/#tag:tdparameter","title":"TD/Parameter","text":"<ul> <li>            FindingReferenceParameterExport          </li> </ul>"},{"location":"tags/#tag:tdparameters","title":"TD/Parameters","text":"<ul> <li>            ParameterExpressionVSExport          </li> </ul>"},{"location":"tags/#tag:tdparticlesystem","title":"TD/ParticleSystem","text":"<ul> <li>            Particle System          </li> </ul>"},{"location":"tags/#tag:tdperformance","title":"TD/Performance","text":"<ul> <li>            KeepChannelCountStableReplaceCHOP          </li> <li>            PerformanceMonitor          </li> <li>            TestEffectsLowPerformanceCHOP          </li> </ul>"},{"location":"tags/#tag:tdpython","title":"TD/Python","text":"<ul> <li>            Working with Python Libraries in TouchDesigner          </li> </ul>"},{"location":"tags/#tag:tdquicktips","title":"TD/QuickTips","text":"<ul> <li>            DefineCustomStartupFile          </li> <li>            DockingOperatorsTogether          </li> <li>            FindingReferenceParameterExport          </li> <li>            Navigation Shortcuts          </li> <li>            OpenFilePickerBtn          </li> <li>            ParameterExpressionVSExport          </li> <li>            PerformanceMonitor          </li> <li>            See how TD Elements are build          </li> <li>            SetLockFlagViaScript          </li> <li>            ShowingQuicktipsParameter          </li> </ul>"},{"location":"tags/#tag:tdrendering","title":"TD/Rendering","text":"<ul> <li>            MovieCodecs          </li> <li>            Rendering Multiple screens          </li> </ul>"},{"location":"tags/#tag:tdsop","title":"TD/SOP","text":"<ul> <li>            ChangeOrderPointsSortSOP          </li> <li>            Convert2DImage3Dshape          </li> <li>            Create3DShapePhongMAT          </li> <li>            CreatePointForParticleSystem          </li> <li>            CreatingCutoutShapes          </li> <li>            CreatingMergingMetaballs          </li> <li>            CutPartsShapewithClipSOP          </li> <li>            CutPolygonSOPWithClip          </li> <li>            DeleteCopyWithGroup          </li> <li>            DisplaceFixedSOPSurfaceSpringSOP          </li> <li>            DisplaceGridMagnetSOP          </li> <li>            DisplaceGridWithPatternCHOP          </li> <li>            DisplaceSOPByCHOPValues          </li> <li>            DisplaceSOPOnlyXY          </li> <li>            DistributePointsAtRandomPosition          </li> <li>            DistributeShapesAlongPathSweepSOP          </li> <li>            ImportSpecificGeoFromFBX          </li> <li>            Improve Performance Instancing          </li> <li>            InfiniteLoopingNoiseChannel          </li> <li>            Loading Point Cloud file          </li> <li>            ManipulateSOPwithData          </li> <li>            MapCHOPtoSOPLength          </li> <li>            MergeLinesIntoSurface          </li> <li>            MoveInstancedShapesOnSpiralPath          </li> <li>            ParticlesMoveBackToSource          </li> <li>            PolygonLookSOP          </li> <li>            RotateCameraOnCirlceSOP          </li> <li>            SkinnedShapeFromLines          </li> <li>            SpreadCopiesEvenlyAround360CopySOP          </li> <li>            Various SOP Scripting References          </li> </ul>"},{"location":"tags/#tag:tdsamples","title":"TD/Samples","text":"<ul> <li>            MapCHOPValuesToNewIntervall          </li> <li>            StretchCHOPToNumSamples          </li> </ul>"},{"location":"tags/#tag:tdscripting","title":"TD/Scripting","text":"<ul> <li>            FloatingWindow          </li> <li>            IterateThroughConstantChannelsViaScript          </li> <li>            ManipulateCHOPValueExpressionCHOP          </li> <li>            Pulse a pulse Parameter via script          </li> <li>            Python in Touch          </li> <li>            Scripting Operators          </li> <li>            Set random Parameter Value          </li> <li>            SetValueOfSliderViaScript          </li> <li>            Specifc Scripting for Touch          </li> <li>            Various SOP Scripting References          </li> <li>            Various SOP Scripting References          </li> </ul>"},{"location":"tags/#tag:tdsignal","title":"TD/Signal","text":"<ul> <li>            AttackDecaySustainRelease          </li> <li>            CombiningChannelsMathCHOP          </li> </ul>"},{"location":"tags/#tag:tdslider","title":"TD/Slider","text":"<ul> <li>            SetValueOfSliderViaScript          </li> </ul>"},{"location":"tags/#tag:tdstorage","title":"TD/Storage","text":"<ul> <li>            SetLocalVariablesOperator          </li> </ul>"},{"location":"tags/#tag:tdstoring","title":"TD/Storing","text":"<ul> <li>            StoringDataViaScript          </li> </ul>"},{"location":"tags/#tag:tdtabledat","title":"TD/TABLEDAT","text":"<ul> <li>            SetTextTOPFromTableDAT          </li> </ul>"},{"location":"tags/#tag:tdtechniques","title":"TD/TECHNIQUES","text":"<ul> <li>            Particle System          </li> </ul>"},{"location":"tags/#tag:tdtext","title":"TD/TEXT","text":"<ul> <li>            SetTextTOPFromTableDAT          </li> </ul>"},{"location":"tags/#tag:tdtop","title":"TD/TOP","text":"<ul> <li>            ChangeSeedWithClock          </li> <li>            Convert2DImage3Dshape          </li> <li>            Create3DShapePhongMAT          </li> <li>            FullImageTopToCHOP          </li> <li>            GrabCurrentInputValueConstantCHOP          </li> <li>            GrainEffect          </li> <li>            Grid          </li> <li>            Various SOP Scripting References          </li> </ul>"},{"location":"tags/#tag:tdtops","title":"TD/TOPS","text":"<ul> <li>            AccessCameraDepthTop          </li> <li>            AccessPixelValueTOP          </li> <li>            ApplyEffectForOnlySpecificChannels          </li> <li>            ChangeValuesLockedTOP          </li> <li>            ConvertRampIntoLines          </li> <li>            ConvertSingleChannelTopIntoMultiChannel          </li> <li>            DefiningLoadingErrorImage          </li> <li>            HigherQualityFeedback          </li> <li>            ImageInstancingOnGrid          </li> <li>            MovieCodecs          </li> <li>            MovieFileIn          </li> <li>            OutputNoiseTOPTransparency          </li> <li>            Play Video with Slow Speed          </li> <li>            Rendering Multiple screens          </li> <li>            RepeatImageRemapTOP          </li> <li>            SetTextTOPFromTableDAT          </li> <li>            SimpleMovementTracker          </li> </ul>"},{"location":"tags/#tag:tdtabledat","title":"TD/TableDAT","text":"<ul> <li>            ConvertTextToTable          </li> <li>            ConvertingDATIntoGraph          </li> <li>            ExecuteNewSelectionTable          </li> <li>            ExpressionValuesDAT          </li> <li>            ReplaceSpecificDataTableMerge          </li> <li>            SelectTableDataByValue          </li> <li>            SwappingColsRowsTable          </li> </ul>"},{"location":"tags/#tag:tdtips","title":"TD/Tips","text":"<ul> <li>            Tips and tricks          </li> </ul>"},{"location":"tags/#tag:tdui","title":"TD/UI","text":"<ul> <li>            Container Vs Base          </li> <li>            NodeFlags          </li> <li>            OpenFilePickerBtn          </li> <li>            Replicator          </li> <li>            SelectCOMPSelectUIElements          </li> <li>            SetBackgroundContainer          </li> <li>            SetLockFlagViaScript          </li> <li>            SetWidgetAsChildrenContainer          </li> <li>            Show Operator in UI          </li> <li>            ShowSpecificOperatorContainer          </li> </ul>"},{"location":"tags/#tag:tdwindow","title":"TD/Window","text":"<ul> <li>            FloatingWindow          </li> </ul>"},{"location":"tags/#tag:til","title":"TIL","text":"<ul> <li>            25-06-22 - Today I Learned...          </li> <li>            25-06-25 - Today I Learned...          </li> <li>            25-06-25 - Today I Learned...          </li> <li>            25-07-08 - Today I Learned...          </li> <li>            Loading Point Cloud file          </li> </ul>"},{"location":"tags/#tag:terminal","title":"Terminal","text":"<ul> <li>            Convert all mp3 into wav with ffmpeg          </li> <li>            OpenFolderWithVSCodeMacOS          </li> <li>            Terminal commands          </li> <li>            Useful Commands          </li> </ul>"},{"location":"tags/#tag:texture","title":"Texture","text":"<ul> <li>            StrideFX          </li> </ul>"},{"location":"tags/#tag:threejs","title":"Three.js","text":"<ul> <li>            Basics          </li> <li>            Three.js Shader          </li> </ul>"},{"location":"tags/#tag:touchdesigner","title":"TouchDesigner","text":"<ul> <li>               UseTimelineForLoopingChopValues          </li> <li>            AddChannelsIntoSequenz          </li> <li>            Animate over timeline length          </li> <li>            AnimatePatternCHOP          </li> <li>            AnimateThroughDataPoints          </li> <li>            Art-Net          </li> <li>            Assign an Expression via Script          </li> <li>            AttackDecaySustainRelease          </li> <li>            AudioInputIntoScalingValue          </li> <li>            Automatically Chain Selected Nodes          </li> <li>            ChangeOrderPointsSortSOP          </li> <li>            ChangeSeedWithClock          </li> <li>            CombingChannelsPatternCHOP          </li> <li>            CombiningChannelsMathCHOP          </li> <li>            Container Vs Base          </li> <li>            Convert2DImage3Dshape          </li> <li>            ConvertTextToTable          </li> <li>            ConvertingDATIntoGraph          </li> <li>            Cornerpinning Output via Interface with StonerCOMP          </li> <li>            Create3DShapePhongMAT          </li> <li>            CreatingCutoutShapes          </li> <li>            CreatingMergingMetaballs          </li> <li>            CreatingSteppedNoise          </li> <li>            CutPartsShapewithClipSOP          </li> <li>            CutPolygonSOPWithClip          </li> <li>            DMX          </li> <li>            DefineLoopingBehaviourCHOP          </li> <li>            DefiningLoadingErrorImage          </li> <li>            DeleteCopyWithGroup          </li> <li>            DeleteSamplesBeginningEndCHOP          </li> <li>            DisplaceFixedSOPSurfaceSpringSOP          </li> <li>            DisplaceGridMagnetSOP          </li> <li>            DisplaceGridWithPatternCHOP          </li> <li>            DisplaceSOPOnlyXY          </li> <li>            DistributeShapesAlongPathSweepSOP          </li> <li>            ExecuteNewSelectionTable          </li> <li>            ExpressionValuesDAT          </li> <li>            FlipChannelPath          </li> <li>            FloatingWindow          </li> <li>            FullImageTopToCHOP          </li> <li>            GetAllValuesChopAsList          </li> <li>            GetSpecificSampleFromCHOP          </li> <li>            GrabCurrentInputValueConstantCHOP          </li> <li>            GrainEffect          </li> <li>            Grid          </li> <li>            HoldLastChangedValue          </li> <li>            ImportSpecificGeoFromFBX          </li> <li>            Improve Performance Instancing          </li> <li>            InfiniteLoopingNoiseChannel          </li> <li>            IterateThroughConstantChannelsViaScript          </li> <li>            KeepChannelCountStableReplaceCHOP          </li> <li>            Loading Point Cloud file          </li> <li>            ManipulateCHOPValueExpressionCHOP          </li> <li>            ManipulateSOPwithData          </li> <li>            MapCHOPValuesToNewIntervall          </li> <li>            MapCHOPtoSOPLength          </li> <li>            Mapping          </li> <li>            MeasureChangeOfValue          </li> <li>            MergeLinesIntoSurface          </li> <li>            MoveInstancedShapesOnSpiralPath          </li> <li>            NodeFlags          </li> <li>            OffsetSingleChannelCHOP          </li> <li>            Often used scripting for DATS          </li> <li>            OnlyEffectCertainChannelsMath          </li> <li>            OutputNoiseTOPTransparency          </li> <li>            ParticlesMoveBackToSource          </li> <li>            Play Video with Slow Speed          </li> <li>            PolygonLookSOP          </li> <li>            PopulateTableDATViaScript          </li> <li>            Pulse a pulse Parameter via script          </li> <li>            Python in Touch          </li> <li>            ReduceNumChannelsButKeepShape          </li> <li>            RepeatImageRemapTOP          </li> <li>            ReplaceSpecificDataTableMerge          </li> <li>            ReplicateSampleAtEndBegginng          </li> <li>            Replicator          </li> <li>            ResampleAudioToSOPLength          </li> <li>            RotateCameraOnCirlceSOP          </li> <li>            Scripting Operators          </li> <li>            SelectCOMPSelectUIElements          </li> <li>            SelectTableDataByValue          </li> <li>            Set random Parameter Value          </li> <li>            SetBackgroundContainer          </li> <li>            SetCustomFrameRateProcess          </li> <li>            SetLocalVariablesOperator          </li> <li>            SetValueOfSliderViaScript          </li> <li>            SetWidgetAsChildrenContainer          </li> <li>            Show Operator in UI          </li> <li>            ShowSpecificOperatorContainer          </li> <li>            SimpleMovementTracker          </li> <li>            SkinnedShapeFromLines          </li> <li>            Specifc Scripting for Touch          </li> <li>            SpreadCopiesEvenlyAround360CopySOP          </li> <li>            StoringDataViaScript          </li> <li>            StretchCHOPToNumSamples          </li> <li>            SwappingColsRowsTable          </li> <li>            TestEffectsLowPerformanceCHOP          </li> <li>            Tips and tricks          </li> <li>            ToggleValueViaKeyboard          </li> <li>            TriggerSingleSound          </li> </ul>"},{"location":"tags/#tag:typescript","title":"Typescript","text":"<ul> <li>            Converting Json to typescript          </li> <li>            Interface from JSON          </li> <li>            NPM          </li> <li>            Routing in React          </li> <li>            Tailwind CSS - Basics          </li> </ul>"},{"location":"tags/#tag:typo","title":"Typo","text":"<ul> <li>            Typography          </li> </ul>"},{"location":"tags/#tag:ui","title":"UI","text":"<ul> <li>            Elementa          </li> </ul>"},{"location":"tags/#tag:unity","title":"Unity","text":"<ul> <li>            Audio Optimization Settings          </li> <li>            Dublicate Adressable Group in Android APK          </li> <li>            Localization - Multiple Languages in Unity          </li> <li>            Save Screenshot in device gallery          </li> <li>            Tipps and tricks          </li> </ul>"},{"location":"tags/#tag:unityar","title":"Unity/AR","text":"<ul> <li>            Save Screenshot in device gallery          </li> </ul>"},{"location":"tags/#tag:unityadressable","title":"Unity/Adressable","text":"<ul> <li>            Dublicate Adressable Group in Android APK          </li> </ul>"},{"location":"tags/#tag:unityaudio","title":"Unity/Audio","text":"<ul> <li>            Audio Optimization Settings          </li> </ul>"},{"location":"tags/#tag:unityfoto","title":"Unity/Foto","text":"<ul> <li>            Save Screenshot in device gallery          </li> </ul>"},{"location":"tags/#tag:vcv","title":"VCV","text":"<ul> <li>            BasicKickDrum          </li> <li>            Basics          </li> <li>            Chorus          </li> <li>            EugeneRareBreeds          </li> <li>            Eurorack          </li> <li>            NoisePlethoraBefaco          </li> <li>            RecurringBeatPattern          </li> <li>            Rhythm          </li> <li>            VCF          </li> <li>            Window doesn't show on start          </li> </ul>"},{"location":"tags/#tag:vcvbasics","title":"VCV/Basics","text":"<ul> <li>            BasicKickDrum          </li> <li>            Basics          </li> <li>            Chorus          </li> <li>            Eurorack          </li> </ul>"},{"location":"tags/#tag:vcverror","title":"VCV/ERROR","text":"<ul> <li>            Window doesn't show on start          </li> </ul>"},{"location":"tags/#tag:vcvfilter","title":"VCV/Filter","text":"<ul> <li>            VCF          </li> </ul>"},{"location":"tags/#tag:vcvmodule","title":"VCV/Module","text":"<ul> <li>            EugeneRareBreeds          </li> <li>            NoisePlethoraBefaco          </li> <li>            VCF          </li> </ul>"},{"location":"tags/#tag:vcvrhythm","title":"VCV/Rhythm","text":"<ul> <li>            EugeneRareBreeds          </li> <li>            NoisePlethoraBefaco          </li> </ul>"},{"location":"tags/#tag:vscode","title":"VSCode","text":"<ul> <li>            Configure a Snippet          </li> <li>            OpenFolderWithVSCodeMacOS          </li> </ul>"},{"location":"tags/#tag:vvvv","title":"VVVV","text":"<ul> <li>            Animation          </li> <li>            Audio          </li> <li>            Automata UI          </li> <li>            BackgroundFrame          </li> <li>            Basics          </li> <li>            C# Scripts          </li> <li>            Change precision of float values          </li> <li>            Channel Data          </li> <li>            Collisions          </li> <li>            Controlling Patches          </li> <li>            Convert IOBox to slider          </li> <li>            Converting Single Value into Vector2          </li> <li>            CountMouseClick          </li> <li>            CreateMultipleValueWithRepeat          </li> <li>            CreateRandomValueWhenTrue          </li> <li>            CreateRandomValueWhenValueBiggerThan          </li> <li>            CreatingRetrievingVariables          </li> <li>            Elementa          </li> <li>            FeedbackEffect          </li> <li>            Fuse          </li> <li>            Get Data From Link          </li> <li>            GetScreenDimensions          </li> <li>            HoldChangedValueForTimeInterval          </li> <li>            How to Server          </li> <li>            Interactions          </li> <li>            Learning Material          </li> <li>            MapValues          </li> <li>            Model          </li> <li>            Move3DElementOnCircularPath          </li> <li>            Nugets          </li> <li>            Object oriented programming          </li> <li>            OnlyExecuteNodesWhenTure          </li> <li>            OnlyKeepValueWhereTryParseSuccess          </li> <li>            OpenCV          </li> <li>            Operations          </li> <li>            Projection Mapping          </li> <li>            RandomOrderSpread          </li> <li>            Read File into VVVV          </li> <li>            Runtime          </li> <li>            Set Dependency In Other file          </li> <li>            SetOutputTrueForXTimeOnTrueInput          </li> <li>            Show help patch of node          </li> <li>            Skia          </li> <li>            Smooth jittery input data          </li> <li>            SplitStringBySeperator          </li> <li>            Storing Data          </li> <li>            Stride          </li> <li>            StrideFX          </li> <li>            TriggerBoolSeconds          </li> <li>            Typography          </li> </ul>"},{"location":"tags/#tag:vvvvanimation","title":"VVVV/Animation","text":"<ul> <li>            Animation          </li> <li>            HoldChangedValueForTimeInterval          </li> </ul>"},{"location":"tags/#tag:vvvvaudio","title":"VVVV/Audio","text":"<ul> <li>            Audio          </li> </ul>"},{"location":"tags/#tag:vvvvc","title":"VVVV/C#","text":"<ul> <li>            C# Scripts          </li> </ul>"},{"location":"tags/#tag:vvvvcontrollingpatches","title":"VVVV/ControllingPatches","text":"<ul> <li>            Controlling Patches          </li> <li>            SetOutputTrueForXTimeOnTrueInput          </li> </ul>"},{"location":"tags/#tag:vvvvdata","title":"VVVV/Data","text":"<ul> <li>            Channel Data          </li> <li>            Smooth jittery input data          </li> <li>            Storing Data          </li> </ul>"},{"location":"tags/#tag:vvvvdataflow","title":"VVVV/DataFlow","text":"<ul> <li>            OnlyExecuteNodesWhenTure          </li> </ul>"},{"location":"tags/#tag:vvvvelementa","title":"VVVV/Elementa","text":"<ul> <li>            Elementa          </li> </ul>"},{"location":"tags/#tag:vvvvfile","title":"VVVV/File","text":"<ul> <li>            Read File into VVVV          </li> </ul>"},{"location":"tags/#tag:vvvvfiles","title":"VVVV/Files","text":"<ul> <li>            Set Dependency In Other file          </li> </ul>"},{"location":"tags/#tag:vvvvfuse","title":"VVVV/Fuse","text":"<ul> <li>            Fuse          </li> </ul>"},{"location":"tags/#tag:vvvvinteraction","title":"VVVV/Interaction","text":"<ul> <li>            Interactions          </li> </ul>"},{"location":"tags/#tag:vvvvnuget","title":"VVVV/Nuget","text":"<ul> <li>            Nugets          </li> </ul>"},{"location":"tags/#tag:vvvvoop","title":"VVVV/OOP","text":"<ul> <li>            Object oriented programming          </li> </ul>"},{"location":"tags/#tag:vvvvoperations","title":"VVVV/Operations","text":"<ul> <li>            Operations          </li> </ul>"},{"location":"tags/#tag:vvvvphysics","title":"VVVV/Physics","text":"<ul> <li>            Collisions          </li> </ul>"},{"location":"tags/#tag:vvvvprojectionmapping","title":"VVVV/ProjectionMapping","text":"<ul> <li>            Projection Mapping          </li> </ul>"},{"location":"tags/#tag:vvvvscreen","title":"VVVV/Screen","text":"<ul> <li>            GetScreenDimensions          </li> </ul>"},{"location":"tags/#tag:vvvvserver","title":"VVVV/Server","text":"<ul> <li>            How to Server          </li> </ul>"},{"location":"tags/#tag:vvvvspread","title":"VVVV/Spread","text":"<ul> <li>            CreateRandomValueWhenTrue          </li> <li>            CreateRandomValueWhenValueBiggerThan          </li> <li>            RandomOrderSpread          </li> </ul>"},{"location":"tags/#tag:vvvvstatemachine","title":"VVVV/StateMachine","text":"<ul> <li>            Automata UI          </li> </ul>"},{"location":"tags/#tag:vvvvstride","title":"VVVV/Stride","text":"<ul> <li>            Move3DElementOnCircularPath          </li> </ul>"},{"location":"tags/#tag:vvvvtypography","title":"VVVV/Typography","text":"<ul> <li>            Typography          </li> </ul>"},{"location":"tags/#tag:video","title":"Video","text":"<ul> <li>            Convert All mp4 into wav in powershell terminal on windows          </li> <li>            Convert Mov files into mp4          </li> </ul>"},{"location":"tags/#tag:web","title":"Web","text":"<ul> <li>            NPM          </li> </ul>"},{"location":"tags/#tag:webdesign","title":"WebDesign","text":"<ul> <li>            Tailwind CSS - Basics          </li> </ul>"},{"location":"tags/#tag:n8n","title":"n8n","text":"<ul> <li>            Aggregate          </li> <li>            Basics          </li> <li>            Data          </li> <li>            Date and Time Node          </li> <li>            Edit Fields (Set)          </li> <li>            Filter Out Email          </li> <li>            Filter Out Empty Field in Table          </li> <li>            HTTP Request Node          </li> <li>            RaindropNode          </li> <li>            Schedule Trigger          </li> <li>            Webhook          </li> </ul>"},{"location":"tags/#tag:n8naction","title":"n8n/Action","text":"<ul> <li>            Date and Time Node          </li> <li>            Edit Fields (Set)          </li> <li>            HTTP Request Node          </li> </ul>"},{"location":"tags/#tag:n8ndata","title":"n8n/Data","text":"<ul> <li>            Edit Fields (Set)          </li> </ul>"},{"location":"tags/#tag:n8nfilter","title":"n8n/Filter","text":"<ul> <li>            Filter Out Email          </li> <li>            Filter Out Empty Field in Table          </li> </ul>"},{"location":"tags/#tag:n8nfunction","title":"n8n/Function","text":"<ul> <li>            Aggregate          </li> </ul>"},{"location":"tags/#tag:n8nnode","title":"n8n/Node","text":"<ul> <li>            HTTP Request Node          </li> <li>            RaindropNode          </li> <li>            Webhook          </li> </ul>"},{"location":"tags/#tag:n8ntrigger","title":"n8n/Trigger","text":"<ul> <li>            RaindropNode          </li> <li>            Schedule Trigger          </li> <li>            Webhook          </li> </ul>"},{"location":"tags/#tag:n8nworkflow","title":"n8n/Workflow","text":"<ul> <li>            Filter Out Email          </li> <li>            Filter Out Empty Field in Table          </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/06/22/hallo-world/","title":"Hallo World","text":""},{"location":"blog/2025/06/22/25-06-22---today-i-learned/","title":"25-06-22 - Today I Learned...","text":"<p>Today I went to a TouchDesigner Workshop about PointClouds. </p>","tags":["TIL"]},{"location":"blog/2025/06/25/25-06-25---today-i-learned/","title":"25-06-25 - Today I Learned...","text":"<p>I learned the hard way that you should run your python and AI projects in a virtual environment so they don't create problems with other dependencies. <code>python -m venv env</code> with env as the name for the environment.</p> <p>To run the environment you write <code>env\\Scripts\\activate.bat</code> or <code>env\\Scripts\\activate</code>.</p> <p>With <code>deactivate</code> we simply can deactivate the virtual environment.</p> <p>The packages and dependencies that we used in the environment we then can save in a <code>requirements.txt</code> file so if somebody else uses the project they can download themselves without us sending the dependencies. <code>pip freeze &gt; requirements.txt</code></p>","tags":["TIL"]},{"location":"blog/2025/06/26/25-06-25---today-i-learned/","title":"25-06-25 - Today I Learned...","text":"<p>Today I learned again how to set the right path for your python version.</p> <ol> <li> <p>Find the Python installation path.</p> </li> <li> <p>Add the Path to Windows:</p> </li> <li><code>Win+R</code> and <code>sysdm.cpl</code> to open the system window.</li> <li>Go to Advanced Tab and Environment Variables</li> <li>Under System Variables find Path -&gt; Edit</li> <li>New and add the path to your Python</li> <li> <p>Also add the path to the Scripts folder in the python folder.</p> </li> <li> <p>Restart terminal</p> </li> </ol>","tags":["TIL"]},{"location":"blog/2025/07/08/25-07-08---today-i-learned/","title":"25-07-08 - Today I Learned...","text":"<p>Today I learned about acceleration and how to use the device acceleration in p5.js</p> <p>Acceleration is the rate at which velocity changes over time.</p> <p><code>Acceleration = Change in velocity / time taken</code></p> <p>Speeding up -&gt; positive acceleration Slowing down -&gt; negative acceleration</p> <p>for current acceleration you can use <code>accelerationX,accelerationY,accelerationZ</code></p> <p>for previours frames acceleration you can use <code>pAccelerationX,pAccelerationY,pAccelerationZ</code></p> <p>To limit the length of the float value use <code>accelerationX.toFixed(2)</code>.</p>","tags":["TIL"]},{"location":"blog/2025/07/08/25-07-08---today-i-learned/","title":"25-07-08 - Today I Learned...","text":"<p>Today I learned how to reference the current framerate with <code>project.cookRate</code> or <code>me.time.rate</code> in TouchDesigner.</p>","tags":["TIL"]},{"location":"blog/2025/02/13/glsl-sketches/","title":"GLSL Sketches 25","text":""},{"location":"blog/2025/02/13/glsl-sketches/#25-05-07-034","title":"25-05-07 - 034","text":"See the Pen    GLSL- 25-05-07 - 034 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-033","title":"25-04-22 - 033","text":"See the Pen    GLSL -25-04-22 - 033 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-032","title":"25-04-22 - 032","text":"See the Pen    GLSL - 25-04-22 - 032 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-031","title":"25-04-22 - 031","text":"See the Pen    GLSL - 25-04-22 - 031 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-030","title":"25-04-22 - 030","text":"See the Pen    GLSL - 25-04-22 - 030 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-029","title":"25-04-22 - 029","text":"<p> See the Pen    GLSL- 25-04-22 - 029 by levoxtrip (@levoxtrip)   on CodePen. </p>"},{"location":"blog/2025/02/13/glsl-sketches/#25-04-22-028","title":"25-04-22 - 028","text":"See the Pen    GLSL - 25-04-22 - 028 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-17-027","title":"25-04-17 - 027","text":"See the Pen    GLSL - 25-04 - 17 - 027 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-16-026","title":"25-04-16 - 026","text":"See the Pen    GLSL -25-04-15 - 025 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-15-025","title":"25-04-15 - 025","text":"See the Pen    GLSL -  25-04-15 - 025 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-15-024","title":"25-04-15 - 024","text":"See the Pen    GLSL- 25-04-15 - 024 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-12-023","title":"25-04-12 - 023","text":"See the Pen    GLSL - 25-04-12 - 023 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-09-022","title":"25-04-09 - 022","text":"See the Pen    GLSL-25-04-09 - 022 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-07-021","title":"25-04-07 - 021","text":"See the Pen    GLSL-25-04-07 - 021 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-03-020","title":"25-04-03 - 020","text":"See the Pen    GLSL - 25-04-03 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-02-019","title":"25-04-02 - 019","text":"See the Pen    GLSL - 25-04-02 - 019 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-04-02-018","title":"25-04-02 - 018","text":"See the Pen    Tiling Canvas by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-27-017","title":"25-03-27 - 017","text":"See the Pen    25-03-27 - 017 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-25-016","title":"25-03-25 - 016","text":"See the Pen    25-03-25 - 016 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-25-015","title":"25-03-25 - 015","text":"See the Pen    25-03-25 - 015 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-24-014","title":"25-03-24 - 014","text":"See the Pen    25-03-24-014 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-21-013","title":"25-03-21 - 013","text":"See the Pen    25-03-21-RescaleMadness by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-19-012","title":"25-03-19 - 012","text":"See the Pen    25-03-19-012 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-06-011","title":"25-03-06 - 011","text":"See the Pen    25-03-06 - 011 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-06-010","title":"25-03-06 - 010","text":"See the Pen    25-03-06 - 010 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-03-05-009","title":"25-03-05 - 009","text":"See the Pen    25-03-05-009 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-25-008","title":"25-02-25 - 008","text":"See the Pen    25-02-25-008 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-24-007","title":"25-02-24 - 007","text":"See the Pen    25-02-25-007 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-25-006","title":"25-02-25 - 006","text":"See the Pen    25-02-24-006 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-19-005","title":"25-02-19 - 005","text":"See the Pen    25-02-19 - 005 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-19-004","title":"25-02-19 - 004","text":"See the Pen    25-02-19-004 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-19-003","title":"25-02-19 - 003","text":"See the Pen    250219 - 003 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-15-002","title":"25-02-15 - 002","text":"See the Pen    DistanceFieldPatternScale by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-14-001","title":"25-02-14 - 001","text":"See the Pen    PrettyLinePattern by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/02/13/glsl-sketches/#25-02-13-000","title":"25-02-13 - 000","text":"See the Pen    FlashingLights by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/06/22/log-of-projects-im-working-on/","title":"Today I worked on:","text":"<p>I worked on making this work.</p>"},{"location":"blog/2025/04/14/threejs-sketches/","title":"25 - 04 - 16 - 004","text":"See the Pen    # 25- 04 - 16 - 004 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/04/14/threejs-sketches/#25-04-16-003","title":"25 - 04 - 16 - 003","text":"See the Pen    Three.JS - 25-04-16 - 003 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/04/14/threejs-sketches/#25-04-16-002","title":"25- 04 - 16 - 002","text":"See the Pen    Three.JS - 25-04-16 - 002 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/04/14/threejs-sketches/#25-04-15-001","title":"25 -04 -15 - 001","text":"See the Pen    Three.JS - 25-04-15 - 001 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/04/14/p5-sketches/","title":"25-04-14 - 002","text":"See the Pen    P5 -  25-04-14 - 002 by levoxtrip (@levoxtrip)   on CodePen."},{"location":"blog/2025/04/14/p5-sketches/#25-04-14-001","title":"25-04-14 - 001","text":"See the Pen    Untitled by levoxtrip (@levoxtrip)   on CodePen."},{"location":"topics/Coding/","title":"Basics Coding","text":"<p>If you feel frustrated while coding or you can't find a solution - come back later. Always have fun while coding.</p>","tags":["Coding"]},{"location":"topics/CreativeIdeas/","title":"Creative Concepts","text":""},{"location":"topics/CreativeIdeas/#delay","title":"Delay","text":"<p>Delay as history </p>"},{"location":"topics/CreativeIdeas/#damp-fast-inputs-with-long-time","title":"Damp fast inputs with long time","text":"<p>Damp a fast inputs with long smoothing </p>"},{"location":"topics/CreativeIdeas/#counterwrap","title":"CounterWrap","text":"<p>Every time you get an input you can count up and depending on the value you set a different visual or sound</p>"},{"location":"topics/CreativeIdeas/#restrict","title":"Restrict","text":"<p>Take the input and just a select a part of the input value. Like a focus in.</p>"},{"location":"topics/CreativeIdeas/#filter","title":"Filter","text":"<p>What if you filter the input values - What different results do you get?</p>"},{"location":"topics/CreativeIdeas/#randomnoise","title":"Random/Noise","text":"<p>How noise is the sound/visual? </p> <p>Only movement when there is no sound</p> <p>stop when there is sound.</p>"},{"location":"topics/Algorithms/CreativeCodingAlgorithms/","title":"Creative Coding Algorithms","text":""},{"location":"topics/Algorithms/CreativeCodingAlgorithms/#position-elements-on-angles-from-center","title":"Position Elements on Angles From Center","text":"<pre><code>let radius = 10;\nlet numBranches = 3;\nfor(let i = 0; i&lt;elements.count;i++){\n    let modIndex = i%numBranches;\n    let angle = (modIndex/numBranches) * Math.PI*2;\n    let ranRadius = Math.random()*radius\n\n    position[i].x = Math.cos(angle)*ranRadius;\n    position[i].x = 0;\n    position[i].z = Math.sin(angle)*ranRadius;\n}\n</code></pre>"},{"location":"topics/Algorithms/CreativeCodingAlgorithms/#position-elements-on-angles-from-center-with-spin","title":"Position Elements on Angles From Center With Spin","text":"<pre><code>let radius = 10;\nlet numBranches = 3;\nlet spin = 0.1;\nfor(let i=0; i&lt;elements.count;i++){\n    let ranRadius = Math.random()*radius;\n    let spinAngle = ranRadius + spin;\n    let pIndex = i%numBranches;\n    let branchAngle = (pIndex/numBranches)*Math.PI*2;\n    position[i].x = Math.cos(branchAngle+spinAngle)*ranRadius;\n    position[i].y = 0\n    position[i].z = Math.sin(branchAngle+spinAngle)*ranRadius;\n}\n</code></pre>"},{"location":"topics/Algorithms/CreativeCodingAlgorithms/#manipulate-random-values-distribution","title":"Manipulate Random Values Distribution","text":""},{"location":"topics/Algorithms/CreativeCodingAlgorithms/#push-smaller-values-closer-to-0-and-bigger-values-closer-to-1","title":"Push smaller values closer to 0 and bigger values closer to 1","text":"<p>We can use <code>.pow</code> to not have a linear distribution but to move the random values closer to 0 when the random value is small and closer to one when the random value is bigger</p> <p><code>Math.pow(Math.random(),randomnessPower)</code> This just creates positive values. When we want to have also some values distributed to a negative axis we can multiply it with a random 1/-1 <code>Math.pow(Math.random(),randomPower) * (Math.random() &lt;0.5 ? 1:-1)</code></p>"},{"location":"topics/Algorithms/MovementPatterns/","title":"Movement patterns","text":""},{"location":"topics/Algorithms/MovementPatterns/#cross-movement","title":"Cross movement","text":"<pre><code>while movement:\n- drive forward\n- turn right\n- drive forward\n- turn right\n- drive forward\n- turn left\n</code></pre> <pre><code>\n</code></pre>"},{"location":"topics/Algorithms/Programming/","title":"Programming","text":""},{"location":"topics/Algorithms/Programming/#program","title":"Program","text":"<p>A good program solve multiple situations without manual configuration. A good program decides when to stop automatically</p> <p>A <code>while</code> loop checks a logical condition to decide wether to repeat - it only repeats if its condition is true and stops when its condition is false. It doesn't need a number of repetitions specified ahead of time.</p>"},{"location":"topics/Algorithms/Programming/#debug","title":"Debug","text":""},{"location":"topics/Algorithms/Programming/#debug-a-loop","title":"Debug a Loop","text":"<p>To debug a loop picture what happens in the first repetition</p>"},{"location":"topics/Algorithms/Programming/#understanding-functionality","title":"Understanding Functionality","text":"<p>It can super helpful to draw flowcharts of the logic and flow of your program.</p> <p></p>"},{"location":"topics/Art/","title":"Art","text":"<p>Welcome in the land of artists!</p>"},{"location":"topics/Art/#last-added","title":"Last added","text":"<p>Afro Basaldella Natalia Goncharova Franz Kline Mikhail Larionov Roberto Matta</p>"},{"location":"topics/Art/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Art/AfroBasaldella/","title":"AfroBasaldella","text":"","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/AfroBasaldella/#basaldella-afro","title":"Basaldella Afro","text":"<p>Genre: Abstract</p> <p>More Infos here</p> <p></p> <p>All images from wikiart.org</p>","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/FranzKline/","title":"FranzKline","text":"","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/FranzKline/#franz-kline","title":"Franz Kline","text":"<p>Genre: Abstract</p> <p> </p> <p>More Infos here</p> <p>All images from wikiart.org</p>","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/MikhailLarionov/","title":"MikhailLarionov","text":"","tags":["ART","ART/Fauvism","ART/Painting"]},{"location":"topics/Art/MikhailLarionov/#mikhail-larionov","title":"Mikhail Larionov","text":"<p>Genre: Fauvism</p> <p> </p> <p>More Infos here</p> <p>All images from wikiart.org</p>","tags":["ART","ART/Fauvism","ART/Painting"]},{"location":"topics/Art/NataliaGoncharova/","title":"NataliaGoncharova","text":"","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/NataliaGoncharova/#natalia-goncharova","title":"Natalia Goncharova","text":"<p>Genre: Cubo-Futurism, Rayonism</p> <p>More Infos here</p> <p> </p> <p>All images from wikiart.org</p>","tags":["ART","ART/Abstract","ART/Painting"]},{"location":"topics/Art/RobertoMatt/","title":"RobertoMatt","text":"","tags":["ART","ART/Surrealism","ART/Painting"]},{"location":"topics/Art/RobertoMatt/#roberto-matta","title":"Roberto Matta","text":"<p>Genre: Surrealism</p> <p> </p> <p>More Infos here</p> <p>All images from wikiart.org</p>","tags":["ART","ART/Surrealism","ART/Painting"]},{"location":"topics/Blender/","title":"Blender","text":"<p>Create Studio Lighting Setup Create Environment Map Link Objects To Each Other Add Thickness Plane Smooth Geometry Basics Blender Learning Source</p>"},{"location":"topics/Blender/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Blender/AddThicknessPlane/","title":"Add Thickness To Plane","text":"<p>We can make a plane geometry thicker with the <code>Solidify</code> modifier.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/","title":"Basics","text":"","tags":["Blender"]},{"location":"topics/Blender/Basics/#view","title":"View","text":"<p>Rotate the view with the <code>middle mouse</code> and dragging or the gizmo on the top right corner. </p> <p>To move left/right or up/down hold down <code>shift + middle mouse</code> and drag. Or click and drag the hand icon on the right.</p> <p>To move forward and back war we can use <code>wheel</code></p> <p>To zoom in and out the can use the <code>shift + ctrl + wheel</code></p> <p>Toggle view between perspective and orthographic with <code>numpad 5</code> or the grid button on the right.</p> <p>Align camera to axis:</p> <ul> <li>x: <code>numpad</code></li> <li>y: <code>numpad</code></li> <li>z: <code>numpad</code>   With <code>ctrl</code> hold down you can position camera at the opposite side of the axis.</li> </ul> <p>To get the camera viewpoint <code>numpad 0</code></p> <p>To focus back to the scene origin <code>shift + c</code></p> <p>To focus on a specific object click the object and use <code>numpad ,</code></p> <p>To hide everything and only focus on one object <code>numpad /</code></p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#shading-mode-of-view","title":"Shading mode of view","text":"<p> We can switch between different shading modes in the view with <code>z</code> or click on the modes in the top right corner. Wireframe view - <code>shift + z</code></p> <p><code>Solid</code> - all materials are shown with default gray material <code>Material</code> - shows a preview of materials and textures <code>Wireframe</code> - Wireframe view <code>Renderer</code> - Low quality render</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#select","title":"Select","text":"<p>We can select objects with <code>left mouse</code> and multiple objects with <code>shift + left mouse</code>  When you select multiple objects you see that one has a brighter edge than the others. This on is the currently <code>active</code> selection. To un select an object <code>shift+ left mouse</code> on the object you want to unselect - if the object is not the active one it will become the active one. We can also undo a selection with <code>ctrl + z</code> Select everything <code>a</code> and double <code>a</code> for unselecting.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#createdelete-objects","title":"Create/Delete Objects","text":"<p>With <code>shift + a</code> we can open the menu to create shapes.</p> <p>When you created an object a little menu for the properties appear on the bottom of the 3D viewport.  You loose that menu when you click somewhere else but not the menu but you can get it back with <code>F9</code></p> <p>To delete objects click the object and push <code>x</code></p> <p>We also can temporally hide object to clean up the viewport. With <code>h</code> you hide the selected object and to show the hidden objects again with <code>alt + h</code> To hide unselected objects <code>shift + h</code></p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#transforming-objects","title":"Transforming objects","text":"<p>To move an object click an object and press <code>g</code> To rotate an object click the object and press <code>r</code> To scale an object click the object and press <code>s</code></p> <p>To force an object to apply these transformations along the axis you can press <code>x</code>,<code>y</code>,<code>z</code> after the transformation shortcut activation.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#modes","title":"Modes","text":"<p>Blender has different modes which allow different ways to edit our geometries. With <code>ctrl + tab</code> we can switch modes via shortcut or we pick the modes on the top left corner.</p> <p>In the <code>Object mode</code> we can transform, create and delete objects.</p> <p>In the <code>Edit mode</code> we can edit the geometry and it's vertices, edges and faces. Because it is so frequently used it has it's own shortcut with <code>tab</code>. To switch between vertex <code>1</code>, edge <code>2</code> and face <code>2</code> selection mode</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#properties","title":"Properties","text":"","tags":["Blender"]},{"location":"topics/Blender/Basics/#object-properties","title":"Object Properties","text":"<p>In the Object properties we can change the properties with numerical values to be more accurate if necessary. </p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#modifier-properties","title":"Modifier Properties","text":"<p>In the Modifier properties you can add non destructive modifiers to change your geometry. </p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#material-properties","title":"Material Properties","text":"<p>The Material properties allow to create Materials and edit them. We also can select already created materials</p> <p></p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#render-properties","title":"Render Properties","text":"<p>In the Render properties we can pick which renderer we use for our blender scene. Blender has <code>EEVEE</code>,<code>Workbench</code> and <code>Cycles</code> as default renderer. We also can add our own renderer via plugins to Blender. The most used render engines are:</p> <ul> <li><code>EEVEE</code> - GPU real-time renderer - performant but lacks realism</li> <li><code>Cycles</code> - RayTracing engine - not performant but high realism</li> </ul> <p>To render the current camera image <code>F12</code></p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#shortcuts","title":"Shortcuts","text":"<p>Shortcuts can have different actions depending on what's behind the cursor.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#layouts","title":"LAYOUTS","text":"<p><code>LEFT CLICK</code> select <code>RIGHT CLICK</code> context menu <code>N</code> toggle sidebar <code>T</code> toggle tools <code>CTRL + SPACE</code> maximize area <code>Q</code> favorites <code>F3</code> search for any action (should switch to <code>SPACE</code>) <code>CMD/CTRL + Z</code> undo (almost any changes, even selection) <code>CMD/CTRL + SHIFT + Z</code> redo (almost any changes, even selection)</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#fields","title":"FIELDS","text":"<p><code>CMD/CTRL + C</code> to copy (above field) <code>CMD/CTRL + V</code> to paste (above field)</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#scene-graph","title":"SCENE GRAPH","text":"<p><code>C</code> new collection <code>M</code> move to collection</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#view_1","title":"VIEW","text":"<p><code>MIDDLE WHEEL</code> rotate <code>SHIFT + MIDDLE WHEEL</code> truck and pedestal <code>CTRL + MIDDLE WHEEL</code> zoom <code>CTRL + SHIFT + MIDDLE WHEEL</code> dolly <code>.</code> or <code>,</code> focus section <code>5</code> toggle ortho/persp <code>1</code>, <code>3</code>, <code>7</code> position view on axis (<code>CMD/CTRL</code> to invert axis) <code>SHIFT + 7</code> position view in front of the selected face <code>0</code> position view on camera <code>CMD/CTRL + 0</code> position view on active camera and set as default camera <code>Z</code> show shadings wheel <code>ALT + Z</code> Toggle x-ray <code>SHIFT + S</code> change cursor position <code>SHIFT + C</code> focus on all scene <code>CTRL + ALT + Q</code> set quad view</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#object","title":"OBJECT","text":"<p><code>SHIFT + A</code> create object <code>F9</code> to re-open creation options <code>X</code> delete <code>CTRL + A</code> apply transformations to the geometry <code>G</code> translate (<code>X</code>, <code>Y</code>, <code>Z</code> to force axis, <code>SHIFT</code> for precision, <code>CTRL</code> to round) <code>R</code> rotate (<code>X</code>, <code>Y</code>, <code>Z</code> to force axis, <code>SHIFT</code> for precision, <code>CTRL</code> to round) <code>S</code> scale (<code>X</code>, <code>Y</code>, <code>Z</code> to force axis, <code>SHIFT</code> for precision, <code>CTRL</code> to round) <code>S</code> normalized scale <code>ALT + G</code> reset position <code>ALT + R</code> reset rotation <code>ALT + S</code> reset scale <code>SHIFT + TAB</code> toggle snap <code>SHIFT + D</code> duplicate <code>ALT + D</code> link duplicate <code>H</code> hide selection <code>SHIFT + H</code> isolate <code>/</code> isolate and focus <code>ALT + H</code> unhide all <code>CMD/CTRL + J</code> merge <code>SHIFT + R</code> repeat last</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#selection","title":"SELECTION","text":"<p><code>A</code> select all <code>A, A</code> unselect all <code>B</code> border selection <code>C</code> circle selection (<code>WHEEL</code> to change size) <code>CTRL + I</code> invert selection <code>SHIFT + LEFT CLICK</code> add to/remove from selection</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#modes_1","title":"MODES","text":"<p><code>CTRL + TAB</code> change mode</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#edition","title":"EDITION","text":"<p><code>TAB</code> toggle edition <code>1</code> vertex <code>2</code> edges <code>3</code> faces <code>ALT + LEFT CLICK</code> edge loop selection <code>CTRL + ALT + LEFT CLICK</code> parallel edge loop selection <code>G, G</code> translate on edge (<code>C</code> to go beyond the limit) <code>E</code> extrude (<code>ALT + E</code> extrude with options) <code>I</code> inset <code>I, I</code> individual inset <code>CTRL + B</code> bevel <code>CTRL + R</code> loop cut <code>J</code> connect vertices <code>K</code> knife cut (<code>Z</code> cut through) <code>P</code> separate <code>F</code> create edge or face <code>V</code> Rip <code>CTRL + T</code> triangulate <code>ALT + M</code> merge <code>CTRL + L</code> select island <code>SHIFT + E</code> change crease (for subdivision surface) <code>U</code> unwrap menu <code>M</code> merge</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#curves","title":"CURVES","text":"<p><code>C</code> toggle open <code>V</code> change handle type <code>ALT + S</code> change thickness of selected points</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#painting","title":"PAINTING","text":"<p><code>F</code> change brush size</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#sculpting","title":"SCULPTING","text":"<p><code>F</code> change brush size</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#outliner","title":"OUTLINER","text":"<p><code>.</code> go to selected object</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#rendering","title":"RENDERING","text":"<p><code>F12</code> render <code>CTRL + B</code> set render region <code>CTRL + ALT + B</code> reset render region</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#timeline","title":"TIMELINE","text":"<p><code>ARROW RIGHT</code> Next frame <code>ARROW LEFT</code> Previous frame <code>ARROW UP</code> Next keyframe <code>ARROW DOWN</code> Previous keyframe <code>,</code> Focus selection <code>I</code> Insert keyframe <code>T</code> Choose interpolation <code>P</code> Define Range <code>ALT + P</code> Reset range <code>V</code> Change handle type</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#change-ui","title":"Change UI","text":"","tags":["Blender"]},{"location":"topics/Blender/Basics/#change-area","title":"Change Area","text":"<p>To change an area we can click on the top left button. </p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#resize-area","title":"Resize Area","text":"<p>To resize an area go with the mouse to the side of an area/between two areas and the drag it.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#create-a-new-area","title":"Create a new Area","text":"<p>To create a new area go to one of the corners till we get a crosshair and then drag the mouse. With <code>ESC</code> you can stop it.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#remove-an-area","title":"Remove an Area","text":"<p>The idea is to un-split two areas. For that you need to decide which of the areas is taking over the other that you want to get rid of. Then start in the corner from the area that you want to keep and drag into the other area till it gets a little bit brighter.</p>","tags":["Blender"]},{"location":"topics/Blender/Basics/#change-start-file","title":"Change Start File","text":"<p>To save your current UI setting as the startup setting you can go to <code>File-&gt;Defaults-&gt;Save Startup File</code></p>","tags":["Blender"]},{"location":"topics/Blender/BlenderLearningSources/","title":"Blender Learning Sources","text":"<p>Blender Guru CGCOOKIE CG Fast Track Gabbitt</p>","tags":["Blender"]},{"location":"topics/Blender/CreateAIEnvironmentmaps/","title":"Create AI environment maps","text":"","tags":["Blender","AI"]},{"location":"topics/Blender/CreateAIEnvironmentmaps/#nvidia-canvas","title":"NVIDIA Canvas","text":"<p>Download here</p> <p>Choose <code>panorama</code> file.</p> <p>You can draw shapes with colors and for each color the AI will generate realistic elements.</p> <p>You also can pick different styles.</p> <p>Export the <code>exr</code> file.</p>","tags":["Blender","AI"]},{"location":"topics/Blender/CreateAIEnvironmentmaps/#skybox-lab","title":"Skybox Lab","text":"<p>https://skybox.blockadelabs.com/</p> <p>It outputs a <code>jpg</code></p> <p>By checking <code>Generate Depth</code> you also can export a depth map which allows to create parallax effects in your scene.</p> <p>You also can draw your scene like here</p> <p>We can also download a grayscale <code>Depth</code> map that we can use parallax effect or fog.</p>","tags":["Blender","AI"]},{"location":"topics/Blender/CreateEnvironmentMap/","title":"Create Environment map in Blender","text":"<p>For more realistic map we should render in cycles. In <code>Render Properties</code> set <code>Max Samples</code> to 256 for <code>Viewport</code> and <code>Render</code></p> <p>In <code>World Properties</code> you can set the <code>Surface</code> color to black if needed.</p> <p>In <code>Output Properties</code> under <code>Format</code> set the Resolution to a power of two like <code>2048x1024</code></p> <p>Add a camera, set <code>x rotation</code> to 90\u00b0 and under <code>Object Data Properties</code> set Type to <code>Panoramic</code> and the <code>Panorama Type</code> to <code>Equirectangular</code></p> <p>Check that in the <code>Object Properties</code> the <code>Camera</code> is checked under the <code>Visibility</code> section.</p> <p>Then render with <code>F12</code> Then save the render with <code>alt+s</code> and set <code>Radiance HDR</code> as the file format.</p>","tags":["Blender"]},{"location":"topics/Blender/CreateStudioLightingSetup/","title":"Create Studio Lighting Setup","text":"<p>Add multiple area lights with the colors you want, let them look at the center of the scene and change there x and y position then create environment map</p>","tags":["Blender"]},{"location":"topics/Blender/LinkObjectToEachOther/","title":"Link Objects to Each Other","text":"<p>We can link objects with <code>ctrl + l</code></p>","tags":["Blender"]},{"location":"topics/Blender/SmoothGeometry/","title":"Smooth Geometry","text":"<p>To smooth a geometry we can use the <code>Subdivision Surface</code> modifier.</p> <p>To see a smooth shading of the geometry <code>right click -&gt; shade smooth</code></p>","tags":["Blender"]},{"location":"topics/CSS/Basic/","title":"CSS","text":"","tags":["CSS"]},{"location":"topics/CSS/Basic/#block-scroll","title":"Block Scroll","text":"<p>In css we define <code>html,body {overflow:hidden;}</code> to prevent the user to scroll outside of our Three.js canvas.</p>","tags":["CSS"]},{"location":"topics/CSS/Basic/#fixed-position-for-element","title":"Fixed position for element","text":"<p>With <code>fixed</code> the element stays in the viewport</p> <pre><code>.canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n</code></pre>","tags":["CSS"]},{"location":"topics/CSS/Basic/#full-screen-sections","title":"Full screen sections","text":"<pre><code>.section {\n  display: flex;\n  align-items: center;\n  height: 100vh;\n  position: relative;\n  padding-left: 10%;\n  padding-right: 10%;\n}\n</code></pre> <pre><code>&lt;section class=\"section\"&gt;\n  &lt;h2&gt;Contact me&lt;/h2&gt;\n&lt;/section&gt;\n</code></pre>","tags":["CSS"]},{"location":"topics/Controller/KorgMidiKontrol2/","title":"Korg MIDI kontroll 2","text":""},{"location":"topics/Controller/KorgMidiKontrol2/#problems","title":"problems","text":"<p>https://forum.bome.com/t/korg-nanokontrol2-driver-on-windows-10-not-working-how-to-fix-it/3047</p>"},{"location":"topics/Controller/MIDI/MIDIprograms/","title":"Midi programs","text":"<p>Loop Midi MIDI key to key</p> <p>MIDI from joystick fjoymidi</p>"},{"location":"topics/Git/","title":"Git","text":"<p>Useful Git Commands </p>"},{"location":"topics/Git/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Git/UsefulGitCommands/","title":"Useful Commands","text":"<p>Find the file that got edited the longest time ago <pre><code>git ls-files *.md | ForEach-Object {\n    $file = $_\n    $timestamp = git log -1 --format=\"%at\" -- \"$file\"\n    [PSCustomObject]@{ Timestamp = $timestamp; File = $file }\n} | Sort-Object Timestamp | Select-Object -First 1\n</code></pre></p>","tags":["Git","Terminal"]},{"location":"topics/GraphicsProgramming/ComputeShader/","title":"Compute Shader","text":"<p>In Pixel shader we write for every pixel \"do this\", in vertex shader we write for every vertex \"do this\". In Compute Shader we write single threads. Thread is the atomic unit of your compute shader you run once per thread.</p>"},{"location":"topics/GraphicsProgramming/SignedDistanceField/","title":"Signed Distance Fields","text":"<p>Signed Distance Fields are functions that describe surfaces in 2D and 3D space. They take the coordinate space as an input and for each point in that space the signed distance fields returns the distance from that point to the nearest point of the surface. The further away the point the higher the distance to the surface. If the point lies on the surface it's distance is 0 and if the point lies outside the shape it is positive and negative when the point lies inside.</p> <p>SDF are a scalar field so they return a single value per point in space.</p> <p>More Information</p>","tags":["Shader"]},{"location":"topics/Inspiration/","title":"Interesting Tools","text":"<p>3D Mandlebulb VideoInterpolation</p>"},{"location":"topics/JavaScript/","title":"Javascript","text":""},{"location":"topics/JavaScript/#latest-added","title":"Latest added","text":"<p>Javascript Basics ThreeJS Basics React P5.JS</p>"},{"location":"topics/JavaScript/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/JavaScript/ConvertingJSONtoTS/","title":"Converting Json to typescript","text":"<p>Website to Convert</p>","tags":["Typescript","ReactNative","React"]},{"location":"topics/JavaScript/TailwindCSS/","title":"Tailwind CSS - Basics","text":"<p>Tailwind provides predefined utility classes. Every tailwind class is a predefined css rule. When we use <code>flex</code> tailwind gerates behind the scenes.</p> <p>Tailwind generates styles on the fly only on classes that we actually use.</p> <p><pre><code>.flex{\n    display:flex\n}\n</code></pre> There is an interactive playground for tailwind styles. Tailwind PLay</p> <p>Align text center <code>text-center</code> Set text size <code>text-lg</code> Text large Text color <code>text-blue-400</code> 400 stands for a shade of the color</p> <p>Apply margin <code>mt-2</code> margin top 2</p> <p>Set height of div element <code>h-10</code> 2.5rem = 40px Set width of div element <code>w-full</code> full width Set border of element <code>border-2</code> border width of 2 Set border color <code>border-violet-600</code> Set roundet corner <code>rounded-md</code> medium border radius Set margin y off <code>my-4</code> top and bottom - x for left and right Set margin top <code>mt 4</code>  Set margin left <code>ml 4</code> set padding off <code>p-2</code> if you just use the letter it applies it to all sites.</p> <p>Margin is external spacing which pushes the element away from others Padding is inside the element.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#set-a-background","title":"Set a background","text":"<p>`","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#add-shadow","title":"Add Shadow","text":"<p><code>shadow-xl</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#center-element","title":"center element","text":"<p><code>div class =\"flex justify-center items-center\"</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#just-in-time-compiler","title":"Just in Time compiler","text":"<p>Tailwind is super flexible because of its Just in time compiler.</p> <p>Tailwind only includes the exact styles that your project uses.</p> <p>When you give your site a not defined utility you can do <code>text-[20px]</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#layouts-flexbox","title":"Layouts - Flexbox","text":"<p>Tailwind provides powerful utilities for structuring your layout  with <code>Position</code>,<code>Display</code>,<code>Flexbox</code> and <code>Grid</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#positioning","title":"Positioning","text":"<p>Where does you element appear relative to its container or viewport <code>relative</code> moves element relative to it's position. <code>absolute</code> moves element to its nearest parent. <code>fixed</code> sticks element to viewport <code>sticky</code> behaves normally until scrolled to a certain point</p> <p><code>top-0</code> Element is fixed at the top of the website regardless of the scroll position.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#flexbox","title":"Flexbox","text":"<p>Determines how an element behaves in terms of layout and visibility within the document. <code>dislay:block</code> element takes full width <code>display:inline</code> behaves like text <code>display:flex</code> enables flexbox <code>display:grid</code> enables grid properties</p> <pre><code>//enable flex and align element to the right with spacing of the element\n&lt;div class =\"flex justify-end space-x-6 mt-2\"&gt;\n    //height, width rounded corner - background blue\n    &lt;div class =\"h-16 w-16 rounded-full bg-blue-600\"&gt;\n&lt;/div&gt;\n</code></pre> <p>With <code>justify-</code> you can set different ways to justify the elements in the flexbox <code>justify-end</code> move object to the end/right. <code>center</code> object to the center <code>space-around</code> evenly distribute objects with space around them.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#column-based-layout","title":"Column based layout","text":"<p>One element on top of each other <code>div class = \"flex flex-col\"&gt; &lt;/div&gt;</code></p> <p>You also can instead of using justify you can use <code>items-</code></p> <p><pre><code>&lt;div class = \"flex flex-col items-center justify center space-y-6\"&gt;...&lt;/div&gt;\n</code></pre> Practise flex box with Flexbox froggy.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#css-grid","title":"CSS Grid","text":"<p>To position elements on a grid we need to add the <code>grid</code>property <pre><code>//Grid with 3 cols and a gap of 2 and margin at top and bottom\n&lt;div class=\"grid grid-cols-3 gap-2 mt-2 mx-2\"&gt;\n// If you don't provide with in the children it will naturally expand the children\n&lt;div class=\"h-16\"&gt;&lt;/div&gt;\n&lt;div class=\"h-16\"&gt;&lt;/div&gt;\n&lt;div class=\"h-16\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <p>You can practise CSS grid on the Grid garden website.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#media-queries","title":"Media Queries","text":"<p>Tailwind uses mobile first break points. They set a min width by default.</p> <p>Media Queries allow you to change CSS properties depending on the screen width. <pre><code>//Element is hidden in media devices smaller than md = 768 pixels\n&lt;div class =\"md:block hidden\"&gt;\n    &lt;p class=\"text-white\"&gt;I appear on the screen wider than 768px&lt;/p&gt;\n&lt;/div&gt;\n\n// different background depending on the size\n&lt;div class=\"sm:bg-amber-500 md:bg-amber-700\"&gt;\n&lt;/div&gt;\n</code></pre> Larger Screen Sizes always overwrite smalller ones.</p> <p>When you use the <code>max-width</code> media queries you can turn that around. It applies the style then only if the width is lower than the defined size. <pre><code>&lt;div class=\"max-sm:bg-amber-500 max-md:bg-amber-700\"&gt;&lt;/div&gt;\n</code></pre></p> <p>unprefixed utilities like <code>uppercase</code> take effect on all screen sizes while prefixed utilities like <code>md:uppercase</code> only take effect at the specified breakpoint and above</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#show-text-in-center-on-mobile-and-left-on-bigger-screens","title":"Show text in center on mobile and left on bigger screens.","text":"<pre><code>&lt;div class=\"text-center sm:text-left\"&gt;&lt;/div&gt;\n</code></pre>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#customize-your-breakpoints","title":"Customize your breakpoints","text":"<p>```CSS app.css @import \"tailwindcss\"; @theme {     --breakpoint-xs: 30rem;     --breakpoint-2xl:100rem;     --breakpoint-3xl:120rem; } <pre><code>We also can provide arbitrary values\n`div class=\"max-[600px]:bg-sky-300 min-[320px]:text-center\"&gt;`\n\n# Dark-mode\nTailwind supports darkmode natively. You have to add `dark:property`\n```JS\n&lt;div class=\"bg-white dark:bg-black text-black dark:text-white\"&gt;\n&lt;/div&gt;\n</code></pre></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#toggle-dark-mode-manually","title":"Toggle dark-mode manually","text":"<pre><code>@import \"tailwindcss\";\n@custom-variant dark(&amp;:where(.dark,.dark *));\n...\n@theme {\n    ...\n}\n</code></pre>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#custom-styles-reusability","title":"Custom Styles &amp; Reusability","text":"","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#introduce-new-color-that-isnt-in-theme","title":"Introduce new color that isn't in theme","text":"","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#inline","title":"Inline","text":"<p>You can use it for every element and property. <code>h1 class =\"text-[#99ffee]\"&gt;Examples&lt;/h1&gt;</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#tailwind-config","title":"Tailwind config","text":"<p>Enables to organise and control the visual style of your application. Go into the css file and use Tailwind directives</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#theme-directives","title":"Theme directives","text":"<p><pre><code>@theme{\n    --color-chesnut: #930482;\n    --font-\n\n}\n...\n\n&lt;p class=\"text-chesnut\"&gt;&lt;/p&gt;\n</code></pre> You can find the different Theme variable namespaces on the Tailwind site</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#basecomponentsutitlies","title":"Base,components,utitlies","text":"<p>base applies styles globally to your project for your elements <pre><code>@layer base {\n    h1:{\n        color:green;\n        font-size:var(--text-2xl)\n    }\n    h2: {\n        font-size:var(--text-xl)\n    }\n}\n</code></pre></p> <p>components - styles for reusuable components like cards, footers, header <pre><code>@layer components {\n    .card {\n        background-color: var(--color.white);\n        border-radius: var(--rounded-lg);\n        padding: var(--spacing-6)\n        box-shadow: var(--shadow-xl);\n    }\n}\n</code></pre> utilities - atomic styles for individual properties like margins padding typography colors <pre><code>@utility content-auto {\n    content-visibility:auto;\n}\n\n&lt;div class=\"content-auto\"&gt;&lt;/div&gt;\n</code></pre></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#apply","title":"@apply","text":"<p><code>@apply</code> inserts tailwind styles into css <pre><code>.select2-dropdown{\n    @apply rounded-b-lg shadow-md;\n}\n.select2-search{\n    @apply rounded border border-gray-300;\n}\n.select2-results__group {\n    @apply text-lg font-bold text-gray-900\n}\n</code></pre></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#layer","title":"@layer","text":"<pre><code>@layer base {\n    h1{\n        @apply text-base font-medium tracking-tight\n    }\n}\n\n\n\n@layer components {\n    .card{\n        @apply m-10 rounded-lg bg-white\n    }\n}\n\n&lt;div class\"card\"&gt;&lt;/div&gt;\n</code></pre> <p>To overwrite certain default styles yo defines in the layers you can write your own utilites <pre><code>@utility flex-center{\n    @apply flex justify-center items-center;\n}\n</code></pre></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#component-libraries","title":"Component libraries","text":"<p>We can use component libraries like <code>shadcn/ui</code> to get already pre created components. ChadCN will create the tailwind styles for you. We also can use native tailwind in them.</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#tips-and-tricks","title":"Tips and Tricks","text":"","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#special-utilies","title":"Special utilies","text":"<p>To overwrite the default styles for elements like checkboxes and radio btn. Provide a class of <code>accent-pink-500</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#fluid-text","title":"Fluid text","text":"<p>To make text scale fluidly you can use <code>text-[min(10vw,70px)]</code></p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#file","title":"File","text":"<pre><code>&lt;label class=\"my-4 block\"&gt;\n    &lt;input type=\"file\" class=\"block w-full text-sm file:mr-4\"&gt;\n&lt;/label&gt;\n</code></pre>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/TailwindCSS/#highlights","title":"Highlights","text":"<p>with <code>selection:bg-green-400 selection:text-white</code> you can change the selection colors</p>","tags":["Typescript","ReactNative","React","WebDesign"]},{"location":"topics/JavaScript/npm/","title":"NPM","text":"<p><code>npm install --save</code> <code>--save</code> saves the dependency in the <code>package.json</code> so the module can be fetched if you do a <code>npm install</code></p>","tags":["Typescript","JavaScript","Web"]},{"location":"topics/JavaScript/HydraSynth/LoadingExtentionHydra/","title":"Loading Hydra Extention","text":"<p><pre><code>await loadScript('https://hyper-hydra.glitch.me/hydra-glsl.js')\nglsl('vec4(sin(((_st.x*54.)+time*2.)*vec3(0.1,0.102,0.101)),1.0)')\n    .diff(o0)\n//  .glslColor('vec4(c0.brg,1.)')\n//  .glslCoord('xy*=(1.0/vec2(i0, i0)); return xy',.25)\n    .glslCombine('return c0-c1',o1)\n    .glslCombineCoord('uv+(vec2(c0.r,c0.b)*0.1)',o1)\n  .out()\n\nnoise(3)\n    .out(o1)\n</code></pre> https://github.com/ritchse/hydra-extensions/blob/main/doc/hydra-glsl.md</p>","tags":["JavaScript","HydraSynth","LiveCoding"]},{"location":"topics/JavaScript/HydraSynth/WritingOwnFunctions/","title":"Writing own functions","text":"<pre><code>col = () =&gt; osc(10).scale(2)\n\nosc(10).mult(col()).out()\n</code></pre>","tags":["JavaScript","HydraSynth","LiveCoding"]},{"location":"topics/JavaScript/JS/Basics/","title":"Basics","text":"<p>Runtime: Where code gets executed for example Browser or on a Server thanks to Node.Js</p> <p>JavaScript(JS) got invented to make websites interactive.</p> <p>JavaScript is a programming language - you can execute it on the fly e.g. in your browser console.</p> <p>In the relation to HTML,CSS and JS we can say:</p> <ul> <li>HTML is the content - NOUN</li> <li>CSS is the adjectives - How is something? - ADJECTIVE</li> <li>JS - dynamic and interactive elements - VERB</li> </ul> <p>JS is interpreted line by line.</p> <p>V8 is engine under the hood that let's run JS extremely fast.</p> <p>To run JS on a webpage you need an html document with a <code>&lt;script&gt;...&lt;/script&gt;</code> Tag to run your JS inside. The advantage is that you don't have to load a seperate file. But it makes sense to seperate the website content from the javascript functionality You can write directly inside the script tag or you reference an external file <code>&lt;script src = \"app.js\"&gt;&lt;/script&gt;</code> We usually reference the script at the end of the html file.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#print-out-statements","title":"Print out statements","text":"<p>If you want to show information in the console you can use <code>console.log('hi momi')</code> To print multiple information you can seperate it by a comma <code>console.log(var1,var2,'Hallo')</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#show-alert-popup-in-browser","title":"Show Alert Popup in browser","text":"<p><code>alert('string text')</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#variables","title":"Variables","text":"<p>A value is a piece of data - the smallest piece of information in our program.</p> <p>A variable is like a box that contains objects. By assigning a value to a variable we define what the box contains.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#defining-variables","title":"Defining variables","text":"<p>There are several different ways to define/declare variables <code>let luckyNumber = 23;</code> <code>let luckyNumber;</code> &lt;- undefined value (default value)</p> <p>When we want to assign two variables we can also do it in one line <code>let x,y</code></p> <p>If you want to assign a specific value to two values in one line you could write <code>x = y = 20*4</code> -&gt; x =80 y=80</p> <p>We use <code>let</code> for variables, that can change later.</p> <p>JS is a dynamically typed language so no type assignment to variable is necessary.</p> <p>To define an emtpy value <code>let luckyNum = null;</code></p> <p>To define a variable that will not change in the future we use <code>const</code>. <code>const</code> variable can't reassigned later. <code>const birthYear = 1992;</code></p> <p>Because it can't be changed later we also can't declare empty constant variables.</p> <p>So as a rule of thumb always declare your variables as <code>const</code> unless you are 100% your variable is gonna change later then use <code>let</code></p> <p>The third way is to use <code>var</code> but these just should be ignored or used if you really know why. Under the surface <code>let</code> and <code>var</code> are really different although they look like the same.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#naming-variables","title":"Naming variables","text":"<p>In JS a variable naming conventing is camel case. The first word is small and to seperate the second we start with a capital letter. <code>let firstVariable</code></p> <p>We can't start variable names with a number. <code>let 3years = 3</code> wouldn't work.</p> <p>Variables only can contain letters,numbers,underscore or the dollar sign.</p> <p>Don't start a variable with a capital letter because we use it for object oriented programming.</p> <p>Variables written in uppercase are often reserved for constants that never change. <code>let PI = 3.1415;</code></p> <p>Make your variable names descriptive.</p> <p><code>let myFirstJob = 'Programmer'</code> <code>let currentJob = 'Teacher'</code></p> <p>instead of <code>let job1 = 'Programmer'</code> <code>let job2 = 'Teacher'</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#datatypes","title":"Datatypes","text":"<p>Number: Floating point numbers - used for decimals and integers <code>let age = 23;</code> <code>let weight = 22.23;</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#strings","title":"Strings","text":"<p>Strings are a sequence of characters <code>const firstName = 'Jonas';</code></p> <p>To concatenate strings we can use the <code>+</code> <code>const jonas = \"I'm \" + name + ' a ' + year</code></p> <p>For more complex string concatenation we can use template literals. We can write a string more normal and then insert the variables into the string. To write template literals we need backtics and then set the variables into <code>${variableName}</code></p> <pre><code>const firstName = 'Jonas'\nconst jonasNew = `I'm ${firstName}`\n</code></pre> <p>We can write every expression inside the <code>{year - birthyear}</code></p> <p>We also can use backticks for all strings</p> <pre><code>console.log(`just a regular string`)\n</code></pre> <p>We also can use template literals for multiline strings.</p> <pre><code>console.log(`String with \\n\\\nmultiple \\n\\\nlines`)\n</code></pre> <p>Bool: Logical type that can be <code>true</code> or <code>false</code> - used for making decisions <code>let goodWeather = true</code></p> <p>Undefined: Value taken by a variable that haven't been defined yet - \"empty value\" <code>let children;</code></p> <p>Null: Also means empty value but gets used in other circumstances.</p> <p>Symbol: Value that is unique and cannot be changed</p> <p>BigInt: Larger integers than the Number type can hold</p> <p>JS has dynamic typing which means you don't have to define the data types of the values that get stored. JS automatically stores it for you. In JS the value stores the type not the variable.</p> <p>To evaluate what datatype some value is we can use <code>typeof</code></p> <pre><code>let jsIsFun = true\nconsole.log(typeof jsIsFun)\n</code></pre> <p>There is a bug inside of JS when you do <code>typeof null</code>. It returns an <code>object</code> which is wrong. It should return <code>null</code>.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#type-conversion-and-coersion","title":"Type-Conversion and -Coersion","text":"<p>In JS there is Type-conversion and Type-coersion</p> <ul> <li>Type-conversion: When we manually convert from one type to another</li> <li>Type-coersion: When JS automatically converts types for us in the background</li> </ul> <p>JS can only convert to string,number and boolean.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#convert-a-string-into-a-number","title":"Convert a String into a Number","text":"<p>You can use the build-in <code>Number()</code> function.</p> <pre><code>const inputYear = '1991'\nconsole.log(Number(inputYear))\n</code></pre> <p>Using the <code>Number()</code> function only gives a converted value. It doesn't automatically assign it to the input value.</p> <p>If we try to convert something into a number that isn't JS returns <code>NaN</code> for Not a Number/Invalid number</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#convert-number-into-string","title":"Convert Number into String","text":"<p>You can use the build-in <code>String(23)</code> function. or we can use <code>const numberToString = num =&gt; num.toString();</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#coersion","title":"Coersion","text":"<p>Javascript is converting some types internally. That is called Type-Coersion <code>console.log('I am' + 23 + 'years old')</code> <code>console.log('1' + 1) =&gt; '11'</code> If you use <code>-</code> or <code>*</code>, <code>/</code> it triggers the conversion from string to number <code>console.log('23' - '10' -3) =&gt; 10</code> <code>console.log('23' * '10') =&gt; 230</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#truthy-and-falsy","title":"Truthy and Falsy","text":"<p>Falsy values are not exactly false but will become false when we convert them into boolean <code>0,'',undefined,null,NaN</code> will become false when we convert them into boolean. <code>console.log(Boolean(0))-&gt; false</code> <code>console.log(Boolean(undefinied))-&gt;</code></p> <pre><code>const money = 0\nif(money){\n    console.log(\"Dont spend it all\")\n}else {\n    console.log(\"You should get a job\")\n}\n</code></pre> <p>JS converts the number 0 into a falsy false Boolean.</p> <p>Everything else will be truthy values</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#variable-scopes","title":"Variable scopes","text":"<p>Global scope - variable is available everywhere.</p> <p>If we define a variable in a function, the variable is locally scoped - only available in that function and can't used outside of the function.</p> <p>If you have statements in your code a variable also can just exist in that statement</p> <pre><code>let a = 'global'; //global scope\n\nfunction fun (){\n    let a = 'function'; //local scope\n\n    if(true){\n        let a = 'block'; // block scope\n        //when you use a var variable in that statement the variable gets available in the whole function\n        var b = 'hoisted';\n    }\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#comments","title":"Comments","text":"<p>We write comments inside our code with eather single line comments or multi line comments</p> <pre><code>//This is a simple line comment\n\n/*\nThis is\na multi\nline\ncomment\n*/\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#operators","title":"Operators","text":"<p>Operators allow us to transform or combine multiple values.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#arithmetic-operators","title":"Arithmetic operators","text":"<p>Add - <code>+</code> Subtract - <code>-</code> Multiply - <code>*</code> Devide - <code>/</code> Exponent - <code>**</code> 2 ** 3 means: 2 to the power of 3</p> <p>We can use the <code>+</code> to join strings <code>firstName + \" \" + lastName</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#assignment-operators","title":"Assignment operators","text":"<p>The most basic assignment operator is the <code>=</code> to assign values to a variable.</p> <p><code>x+=10</code> is a short version of <code>x = x +10</code>. The same works with the other basic arithmetic operators <code>-=, *= , /=,</code></p> <p>If you want to add or subtract just 1 there is another short version <code>x++</code> and <code>x--</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#comparison-operators","title":"Comparison operators","text":"<p>We use comparison operators to create boolean values.</p> <p><code>a&gt;b</code> - a is greater than b <code>a&lt;b</code> - a is smaller than b <code>a&lt;=b</code> - a is smaller/equal to b <code>a&gt;=b</code> - a is greater/equal to b</p> <p>We can also assign directly a value to a variable</p> <p><code>let isThisBigger = a&gt;b</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#operator-precedence","title":"Operator precedence","text":"<p>The order operators get executed in JS. </p> <p>The higher values get executed before lower values.</p> <p>So usally all the math operators get executed before the comparison operators.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#control-structure-conditionals","title":"Control structure - Conditionals","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#if-else","title":"If-else","text":"<p>To make decisions in our code we can use <code>if else</code> to decide what happens if something is true or false</p> <pre><code>const age = 19\n\nif(age &gt;= 18){\n    console.log(`Sarah is start driving`)\n} else {\n    console.log(`She is not old enough`)\n}\n</code></pre> <p>You don't have to use the <code>else</code> part if you don't want anything executed when the condition isn't met.</p> <p>We can extend the <code>if-else</code> with an <code>else if</code> to ask for more conditions</p> <pre><code>const weather = 'hot'\nif(weather === 'cold'){\n    console.log(\"I'm so cold')\n} else if (weather === 'mild'){\n    console.log(\"I'm mild)\n} else if(weather === 'hot'){\n    console.log(\"uff so hot)\n}else {\n    console.log(\"no idea\")\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#switch-statement","title":"Switch statement","text":"<p>The switch does a strict comparision of a variable and iterates through different cases.</p> <pre><code>const day = 'monday'\n\nswitch (day){\n    case 'monday': // equal to day === 'monday' strict comparision\n        console.log(\"do monday stuff\")\n        break;\n    case 'tuesday':\n        console.log(\"do tuesday stuff\")\n        break;\n    case 'wednesday':\n    case 'thursday'://If you do this with two cases it will be executed for both\n        console.log(\"Write this\")\n        break;\n    case 'friday':\n        console.log(\"chill mate\")\n        break;\n    case 'saturday':\n    case 'sunday':\n        console.log(\"Enjoy the weekend\")\n        break;\n\n    default:\n        console.log(\"WOW a new day that we havent seen before')\n\n}\n</code></pre> <p>If we use a switch without break statement the code continues executing</p> <pre><code>const count = 0\nswithc(count){\n    case 0:\n        count+=1\n    case 1:\n        count+=1\n    case 2:\n        count+=1\n    case 3:\n        break;\n}\nconsole.log(count)\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#ternary-operator","title":"Ternary Operator","text":"<p>The Ternary/conditional operator allows us to write something like an if-else structure in just one line. <code>age &gt;= ? console.log('I like to drink this') : console.log('I like to drink water')</code></p> <p>Operator always produce values - so they are expressions. So we can produce new values with the Ternary Operator.</p> <pre><code>const drink = age &gt;=18 ? 'wine' : 'water'\nconsole.log(`I'm allowed to drink ${drink}`)\n</code></pre> <p>So because the Ternary operator is an expression we actuall can insert the into string literals</p> <pre><code>const age = 15\nconsole.log(`I'm gonna have a ${age&gt;=18?'wine':'water'}`)\n</code></pre> <p>So we use Ternary operators when we need to make a quick decision. We still need if-else for bigger parts of codes.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#equality-operators","title":"Equality Operators","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#equal","title":"Equal","text":"<p>JS has two equality operators which test if two values are equal. <code>===</code> strict equality operator - does not perform type coersion - only returns true when both values are exactly the same. <code>'18' === 18 -&gt; false</code></p> <p><code>==</code> loose equality operator - does type coersion. <code>'18'==18 -&gt; true</code></p> <pre><code>const age = 18;\nif(age===18) console.log(\"18 Years old\")\n</code></pre> <p>It is suggested to always use <code>===</code> the strict one.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#difference","title":"Difference","text":"<p>To check if something is different from another value we can use <code>!==</code></p> <pre><code>const age = 18;\nif(age !== 16) console.log(\"You are not 16 years old\")\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#boolean-logic","title":"Boolean Logic","text":"<p>Boolean logic uses true and false values to solve complex logical problems. In order to do that it combines several logical operators to combine true and false values.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#and","title":"AND","text":"<p><code>&amp;&amp;</code> AND operator - both needs to be true to return true. <code>if A AND B are true -&gt; returns true</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#or","title":"OR","text":"<p><code>||</code> OR operator - one needs to be true to return true <code>if A OR B are true -&gt; return true</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#not","title":"NOT","text":"<p><code>!</code> inverts a boolean value <code>!true -&gt; false</code></p> <pre><code>const hasDriversLicence = true\nconst hasGoodVision = false\n\nif(hasDriversLicence &amp;&amp; hasGoodVision){\n    console.log(\"You are able to drive\")\n} else {\n    console.log(\"you shouldn't drive\")\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#properties-of-logical-operators","title":"Properties of logical operators","text":"<p>But the logical operators doesn't necessary need to return boolean values <code>console.log(3||'Jonas') -&gt; 3</code></p> <p>They can use and return any data type.</p> <p>Logic operators do also <code>short-circuiting</code> or short-circuit-evaluation. It returns the first value that is a truthy value.</p> <p>Truthy values - all Values except <code>false,0,-0,0n,\"\",null,undefinied,NaN,document.all</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#or-operator","title":"OR operator","text":"<p>The OR operator returns the first truthy value of all the operants or the last value if all other values are falsy. So we can use the OR operator to set default values.</p> <pre><code>3 || 'Jonas' -&gt; 3\n'' || 'Jonas' -&gt; Jonas\ntrue || 0 -&gt; true\nundefined || null -&gt; null //because undefined not truthy it automatically returns the other value\nfalse || undefined || null || 'Hallo' -&gt; 'Hallo'\n</code></pre> <p>So this allows us to short-circuit the assigning of default values if a value doesn't exist <pre><code>//instead of \nconst guest = concert.guests ? concert.guests : 20;\n// we can \n//if concert.guests undefined it sets 20 as default. If not undefined it sets concert.guests\nconst guest = concert.guests || 20;\n</code></pre> The only problem is when <code>concert.guests</code> exists but is <code>0</code>. Then it sets 20 although concert.guests is defined as 0.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#nullish-coalescing-operator","title":"Nullish Coalescing Operator","text":"<p>Nullish Coalescing works with the idea of nullish values which are only <code>null</code> and <code>undefined</code> For that case we need to use Nullish Coalescing Operator <code>??</code> <pre><code>concert.guests = 0;\nconst guest = concert.guests ?? 10;\nguest -&gt; 0\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#and-operator","title":"AND operator","text":"<p>The AND operator works the exact opposite way to the OR operator. It returns the first falsy value or the last value if all of them are truthy.</p> <p><pre><code>//When first value is falsy -&gt; return that value\n// Because &amp;&amp; is only true when both values are true -&gt; so if the first value is false already we don't need to look at the second and we return the first value\n0 &amp;&amp; 'Jonas' -&gt; 0\n//when first value is truthy -&gt; return the second value\n7 &amp;&amp; 'Jonas' -&gt; 'Jonas'\n//this returns the first falsy value\n'hello' &amp;&amp; '23' &amp;&amp; null &amp;&amp; 'Jonas' -&gt; null\n</code></pre> So we can use the AND operator to execute code if the first value is true.</p> <pre><code>//instead of\nif(concert.band){\n    concert.start()\n}\n// you can do\nconcert.start &amp;&amp; concert.start()\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#logical-assignment-operators","title":"Logical Assignment Operators","text":"<p>JS has Logical Assignment Operators which makes the assignment event faster</p> <p><code>||=</code> assigns a value to a variable if the current variable is falsy</p> <p><pre><code>const house1 = {\n    street:\"street1\",\n    doors: 1\n}\nconst house2 = {\n    street:\"street2\",\n    windows:10\n}\n\nhouse1.doors ||= 2; -&gt; house1.doors = 1\nhouse2.doors ||= 2; -&gt; house2.doors = 2\n</code></pre> Again this doesn't work when the value is actually defined as <code>0</code></p> <p>For this we can use the nullish operator <code>??</code> <pre><code>const house1 = {\n    street:\"street1\",\n    doors: 0\n}\nconst house2 = {\n    street:\"street2\",\n    windows:10\n}\nhouse1.doors ??= 10; -&gt; house1.doors = 0;\nhouse2.doors ??= 10; -&gt; house2.doors = 10;\n</code></pre></p> <p>There is als the <code>&amp;&amp;=</code> assignment. This allows us to replace a value when there is actually a value.</p> <pre><code>const house1 = {\n    street:\"street1\",\n    doors: 1\n}\nconst house2 = {\n    street:\"street2\",\n    windows:10\n}\n\nhouse1.windows &amp;&amp;= 23 -&gt; house2.windows = undefined\nhouse2.windows &amp;&amp;= 23 -&gt; house2.windows = 23\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#loops","title":"Loops","text":"<p>Loops allow to execute repetitive tasks.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#for-loop","title":"For-loop","text":"<p>For loop keeps running while the condition is true.</p> <pre><code>for(let i= 0; i&lt;=10;i++){\n    console.log(`do something ${i}`)\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#looping-through-arrays","title":"Looping through arrays","text":"<pre><code>const arrayNames = ['Jonas','Heinz','Reinhold']\n\nfor(let i = 0;i&lt;arrayNames.Count;i++){\n    console.log(`Name is:${arrayNames[i]}`)\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#continue","title":"Continue","text":"<p>With <code>continue</code> you exit the current iteration and move on to the next iteration.</p> <pre><code>for(let i= 0; i&lt;=20;i++){\n    if(i/2 !== 0){\n        continue;\n    } else {\n        console.log(`${i} is an even number`)\n    }\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#break","title":"break","text":"<p><code>break</code> is used to leave the whole loop.</p> <pre><code>for(let i=0;i&lt;10;i++){\n    if(i&gt;4){\n        break;\n    }\n    console.log(i);\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#loop-backwards","title":"Loop backwards","text":"<pre><code>for(let i = arrayNames.length -1; i&gt;=0,i--){\n    console.log(arrayNames[i]);\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#while-loop","title":"While-Loop","text":"<p>A while loop runs as long as the condition of the loop is true.</p> <pre><code>let rep = 1\nwhile(rep&lt;10){\n    rep++;\n}\n</code></pre> <p>For example when we don't know how many times the loop should run we can use a <code>while</code>-loop. Role a dice till you get the value = 6</p> <pre><code>let dice = Math.trunc(Math.random()*6)+1;\n\nwhile(dice!=6){\n    console.log(`you rolled a ${dice}`)\n    dice = Math.trunc(Math.random()*6)+1;\n    if(dice=== 6) console.log('Loop is about to end...')\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#expressions-vs-statement","title":"Expressions vs Statement","text":"<p>Expression is code that produces a value like <code>3+4</code></p> <p>Statement is a bigger piece of code that doesn't produce a value</p> <pre><code>if(20&gt;4){\n    const str = \"20 is bigger\"\n}\n</code></pre> <p>This doesn't really produces a value it just performes some actions. So JS expect Expressions and Statements in differnt places. In Template Literals we can only insert expressions but not statements.</p> <p><code>console.log(``I'm ${2037-1991}``)</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#functions","title":"Functions","text":"<p>Functions are one of the main building blocks in JS. They work by taking an input, process the input and returning it. We can think of them like being machines that process input we give and return an output.</p> <p>To write a function declaration we write <code>function name(parameters){...}</code></p> <p>To execute a function is also called calling/running or invoking a function. We then reference the function name and round brackets <code>name()</code>.</p> <p>We can also pass values into a function to be processed in a function. These are called <code>Parameters</code>. Here in the example <code>a</code>and <code>b</code>.</p> <pre><code>//Function declaration\n// input params\nfunction add(a,b){\n\n    // return a value\n    return a +b;\n}\n//calling a function\nadd(4,5)\n</code></pre> <p>With functions we also can assign their return value directly to a variable <code>let fruitMix = fruitMachine(apples,oranges);</code></p> <p>So when coding we should keep our code dry which means we shouldn't repeat ourselves in our code. For that functions are super useful.</p> <p>Functions are objects so they can be used as expressions(Function expression) allowing them be used as variables. When we write function expressions we don't really define a name for the function so we create anonymous functions.</p> <pre><code>//Function expression\nconst add = function(a,b){\n    return a +b;\n}\n</code></pre> <p>Sometimes we need to write functions as expressions and sometimes as declarations. So the difference between these two is that we can call the function declaration before they are defined.</p> <pre><code>const age = calculateAge(1982);\n\nfunction calculateAge(birthYear){\n    return 2025-birthYear;\n}\n</code></pre> <p>We couldn't do that with function expressions.</p> <p>It is personal preference to decide which way you use your functions.</p> <p>In JS functions are also a value. That means we can do *Method borrowing - copying a method from another object</p> <pre><code>const jonas = {\n    name:\"jonas\",\n    calcAge: function () {\n        console.log(\"calculate\")\n    }\n}\njonas.calcAge()\n\nconst matilda = {\n    year:1992\n}\nmatilda.calcAge = jonas.calcAge\nmatilda.calcAge()\n</code></pre> <p>Another way is to save a function in it's own variable</p> <pre><code>const f = jonas.calcAge\nf()\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#anonymous-functions","title":"Anonymous functions","text":"<p>An Arrow function is a shorter version to write a function expression.</p> <pre><code>//instead of\nconst calcAge = function(birthYear){\n    return 2025-birthYear\n}\n// we can write\nconst calcAge = birthYear =&gt; 2025 - birthYear;\n// To call the function\nconst age = calcAge(1991);\n</code></pre> <p>This works only if we just have a one line process in the function.</p> <p>If we have multiple steps or multiple parameters we still need to go back to the brackets.</p> <pre><code>// one paremeter\nconst yearsTillRetirement = birthYear =&gt; {\n    const age = 2025-birthYear;\n    const retirement = 65-age;\n    return retirement;\n}\nyearsTillRetirement(1990);\n// multiple parameters for the function.\nconst yearsTillPayedDebt = (startYear,endYear) =&gt; {\n    const yearsToPay = endYear - startYear;\n    return `You have to pay ${yearsToPay} years.:(`\n    }\nyearsTillPayedDebt(2020,2099);\n</code></pre> <p>We also can construct higher-order functions where a function is used as an argument or a return value.</p> <pre><code>function higherOrder(fun) {\n  fun();\n  return function () {\n    //Do something\n  };\n}\n</code></pre> <p>Functions can also be nested to create closure, that incapsulates data and logic from the rest of the program.</p> <p>Normally when you call a function that has a variable with a primitive value <code>let a = 10;</code> it is stalled on the call stack which is the browsers short term memory. When you call a closure the inner function can still acccess variables in the outer function and even after the initial function call. That happens because JS automatically stores the data in the outer function and the heap memory, which persists after the function call.</p> <pre><code>function giveMeClosure(){\n    let a = 10;\n    return function () {\n        a++:\n        return a;\n\n    }\n}\n</code></pre> <p>JS functions can only return one thing.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#rest-pattern-in-funktions","title":"Rest Pattern in Funktions","text":"<p>We can use the Rest pattern to unpack an undefined amount auf parameters into a function <pre><code>const add = function(...parameters){\n    let sum = 0;\n    for(let i = 0;i&lt;parameters.length;i++){\n        sum += parameters[i];\n    }\n    console.log(sum);\n}\n\nadd(2,4)\nadd(3,2,3)\nadd(3,4,5,6,6)\n\nconst x = [2,68,93]\nadd(...x);\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#arrays","title":"Arrays","text":"<p>Arrays are a datastructure where we can collect different variables. <code>const names = ['leon','ro','il'];</code> another way is <code>const years = new Array(1990,1991,1992);</code></p> <p>Arrays can hold any datatype that we want. We can add expressions into arrays and we can even put whole other arrays into an array. Another possibility is to put function calls inside an array declaration. <code>const ages = [calcAge(years[0]),calcAge(years[1]),calcAge(years[2]),calcAge(years[3])]</code></p> <p>To pick an element from an array we use square brackets <code>[]</code> <code>const firstFriend = names[0];</code>.</p> <p>To get the amount of elements in an array we use <code>.length</code> <code>const len = name.length;</code></p> <p>To get the last element of your array. <code>const lastElement = names[names.length-1];</code></p> <p>We can put any expression that we want inside of the square brackets to pick the element we want.</p> <p>To change the data inside an array at a specific position. <code>names[2] = 'Ju';</code></p> <p>Even though we defined an array as <code>const</code> we still can change its elements. But we can't exchange it with a whole new array.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#array-operations","title":"Array operations","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#add-element-to-the-end-of-the-array","title":"Add Element to the end of the array","text":"<p>With <code>.push()</code> we can add an element to the end of the array. <code>friends.push('me')</code></p> <p><code>.push()</code> returns the length of the new array. <code>const newLength = names.push('name')</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#add-element-to-the-beginning-of-array","title":"Add Element to the beginning of array","text":"<p>The <code>.unshift()</code> method allows us to put an element to the beginning of an array.</p> <p><code>names.unshift('Heinz')</code> As <code>.push()</code> the <code>.unshift()</code> method returns the length of the new array.</p> <p><code>.push()</code> adds an element to the end of the array.</p> <p>We also can add multiple elements in push <code>array.push('word1','word2','word3')</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#remove-last-element-of-an-array","title":"Remove last element of an array","text":"<p>To remove the last element of an array we use the <code>.pop()</code> methods <code>names.pop()</code></p> <p>The <code>.pop()</code> method returns the removed element from the array.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#remove-first-element-from-array","title":"Remove first element from array","text":"<p>With <code>.shift()</code> we can remove the first element from an array. <code>names.shift()</code> The <code>.shift()</code> method returns the removed element from the array.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#get-position-of-element-in-array","title":"Get position of element in array","text":"<p>To find out which position a certain element in the array has we can use <code>.indexOf('variableName')</code> <code>names.indexOf('me')</code> If the element is not in the array the function returns <code>-1</code></p> <p>A function from new JS version is <code>.includes('variableName')</code>. It returns a boolean if the element is in the array.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#loop-through-array","title":"Loop through array","text":"<p>So instead of using a <code>for</code> loop we also can use <code>for(const item of arrayName)</code>. This is meant to give you the current element.  <pre><code>const menu = [\"food1\",\"Food2\",\"food\"]\n\nfor(const item of menu) console.log(item)\n</code></pre> The <code>for of</code> loop also allows to use <code>break</code> and <code>continue</code></p> <p>If you still want the <code>index</code> but want to use the <code>for of</code> loop <pre><code>for(const item of menu.entries()){\n    console.log(item);\n\n}\n/*\n[0, \"food1\"],\n[1, \"Food2\"],\n[2, \"food\"],\n*/\n</code></pre> <code>.entries()</code> creates an array of arrays with each child array having the elements of <code>index</code> and the <code>item</code>.</p> <p>With further destructuring <pre><code>for(const [i,el] of arrayName.entries()){\n    console.log(`${i}:${el}`)\n}\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#merge-two-arrays","title":"Merge two arrays","text":"<p>Wie can use the <code>.concat()</code> function to merge two arrays.</p> <pre><code>const array1 =\nconst array2 =\n\nconst array3 = array1.concat(array2);\n[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#find-biggestsmallest-element-in-array","title":"Find biggest/smallest element in Array","text":"<pre><code>let max = testArray[0];\nlet min = testArray[0];\nfor(let i= 0; i&lt;testArray.Length;i++){\n    const curTemp = testArray[i]\n    if(curTemp&gt;max) max = curTemp;\n    if(curTemp&lt;min) min = curTemp;\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#ignore-elements-that-arent-the-type-you-look-for","title":"Ignore elements that aren't the type you look for","text":"<pre><code>for(let i = 0; i&lt;array.Length;i++){\n    if(typeof array[i] !== 'number') continue;\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#empty-an-array","title":"Empty an array","text":"<p>With <code>.splice</code> we replace the content of the array with nothing. <code>array.splice(0,array.length)</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#unpack-all-array-elements","title":"Unpack all array elements","text":"<p><pre><code>const arr = [7,8,9]\nconst badArray = [5,6,arr[0],arr[1], arr[2]]\n\nconst goodWay = [5,6,...arr];e\n</code></pre> So the spread operator takes each element out of an array and adds them as a single element into another array.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#expand-existing-array","title":"Expand existing array","text":"<pre><code>const oldMenu = [\"pizza\",\"pasta\",\"dumplings\"]\nconst newMenu = [...oldMenu,\"Choco\"]//this creates a new array\n</code></pre> <p>To useful application for using the spread operator are creating shallow copies of an array <pre><code>const menu = [\"pizza\",\"pasta\",\"dumplings\"]\nconst copiedMenu = [...menu]\n</code></pre></p> <p>and merge multiple arrays together into a new one <pre><code>const menu1 = [\"Dumplings\",\"noddles with water\"]\nconst menu2 = [\"pizza\",\"burger\"]\nconst menu3 = [\"IceCream\",\"Tiramisu\"]\nconst allDishes = [...menu1,...menu2,...menu3]\n</code></pre></p> <p>The spread operator works on all iterables: arrays, strings,maps,sets. But NOT objects.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#rest-pattern-collect-unspecified-elements-in-assignment","title":"Rest pattern - Collect unspecified elements in assignment","text":"<p>The rest pattern allows us to pack elements, that aren't specifically assigned, into an array. Always use the rest pattern as the last element.</p> <pre><code>const [a,b,...others] = [1,2,3,4,5]\nconsole.log(a) -&gt; 1\nconsole.log(b) -&gt; 2\nconsole.log(others) -&gt; 3,4,5\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#input-multiple-values-into-array-via-prompt","title":"Input multiple values into array via prompt","text":"<pre><code>const inputs = [prompt(\"Input 1?\"),prompt(\"Input 2?\"),prompt(\"input3\")]\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#array-destructuring","title":"Array Destructuring","text":"<p>to destructure an array we can use <code>[]</code> to assign elements <pre><code>const arr = [2,3,4]\nconst [x,y,z] = arr\n</code></pre></p> <p>Only taking the first and the last element <pre><code>const arr = [2,3,4]\nconst[x,,z] = arr\n</code></pre></p> <p>This makes also switching the order easier <pre><code>[main,secondary] = [secondary,main]\n</code></pre></p> <p>With destructuring we can have a function returning an array and then directly destruct the result into different values <pre><code>...\nconst restaurant = {\norder: function(starterIndex,mainIndex){\n    return [this.starterMenu[starterIndex],this.mainMenu[mainIndex]];\n}\n}\n//Destructuring the returned array\nconst[starter,main] = restaurant.order(2,0)\n</code></pre> To destructure a nested array <pre><code>const nested = [4,5,[6,3]]\nconst [i,,[j,k]] = nested;\n//i = 4\n//j = 6\n//k = 3\n</code></pre></p> <p>Sometimes it is useful to set default values  when we destructure arrays. For example when we get data from an api <pre><code>const [a=1,b=2,c=3] = [8,9]\na = 8\nb = 9\nc = 3\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#get-value-from-prompt","title":"Get Value from prompt","text":"<p>We can use the <code>prompt()</code> function to ask the user to input a value. <code>const favNumber = prompt(\"What is your favorite number\")</code> It returns a string.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#this","title":"this","text":"<p><code>this</code> is a keyword that references an object based on how a function is called. We called from the global scope it references the <code>window</code> object in the browser.</p> <pre><code>//global scope\nfunction isThis(){\n    console.log(this);\n}\n</code></pre> <p>If that same function is attached to an object and is called by that object <code>this</code> references the object.</p> <pre><code>const person = {\n    isThis: function () {\n        console.log(this)\n    }\n}\n</code></pre> <p>Read more about <code>this</code> here</p> <p>You can manually bind a function to some other objects using <code>.bind()</code> method.</p> <pre><code>function isThis(){\n    console.log(this);\n}\n\nconst person = {};\n\nconst personFun = isThis.bind(person)\n</code></pre> <p>In modern JavaScript we can define functions with the arrow syntax <code>()=&gt;</code> Arrow functions don't have their own <code>this</code> value and they are always anonymous which makes them ideal for function expressions.</p> <p>When passing arguments in functions a primitive like a number is passed by value which means a copy is created of the original variable.</p> <p>If the argument is an object that means it is stored in the heap and it is passed by reference. That means multiple parts of the code is mutating the same object.</p> <pre><code>const num = 23;\n//copy of num gets created\nsomeFun(num);\n\nconst obj = new Object();\n//\nsomeFun(num,obj);\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#objects","title":"Objects","text":"<p>An object contains a collection of key:value pairs or properties and values. A key in the object is called property. The order of the values in an object doesn't matter at all. We reference values by their key The easiest way to define an object is with the object literal syntax using <code>const name = { }</code>:</p> <pre><code>const human = {\n    dna: 'BAJCA',\n    name: 'Jeff',\n    born: Date.now(),\n    walk() {\n        console.log('walking')\n    }\n}\n</code></pre> <p>There is also an <code>Object()</code> Type that is created with a constructor. <code>const human = new Object();</code></p> <p>Objects can inherit properties from each other with <code>human.__proto__.__proto__</code> Every object has a private property that links to one prototype.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#retrieve-data-from-object","title":"Retrieve data from object","text":"<p>The first way to get a property from an object is the <code>.</code> notation: <code>const humDNA = human.dna</code> The other way is to use the <code>['keyName']</code> way <code>const humDNA = human['keyName']</code> The difference is that with the brackets way we can put any expression inbetween the brackets. So we can compute it from a calculation</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#add-new-property-to-the-object","title":"Add new property to the object","text":"<p>To set no properties to the object we again can use both ways <code>human.eyeColor = 'blue'</code> <code>human['eyeColor'] = 'blue'</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#object-methods","title":"Object methods","text":"<p>In JS functions are just like a value which means we can add functions to an key:value pair in an object. Any function added to an object is called method. We can reference the name of the function as a key and the value as an expression. In Objects we need a function expression instead of a definition.</p> <pre><code>const human = {\n    ...,\n    calcAge: function(birthYear){\n        return 2037 - birthYeah;\n    }\n}\n\nconsole.log(human.calcAge(2099))\nconsole.log(human['calcAge'](2099))\n</code></pre> <p>If we want to access a inside the object a variable from within we can use the <code>this.</code> keyword. It is equal to the object calling the method.</p> <pre><code>const human = {\n    birthYear:1991,\n    calcAge:function(){\n        return 2037 - this.birthYear\n    }\n}\n</code></pre> <p>To avoid multiple calculations we can calculate a value once then store it in the object and then can retrieve it later as a property from the object.</p> <pre><code>const human = {\n    birthYear: 1991,\n    calcAge: function(){\n        this.age = 2037-this.birthYear;\n        return this.age;\n    }\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#destructure-objects","title":"Destructure Objects","text":"<p>To destructure objects we use <code>{}</code> <pre><code>const object = {\n    name:\"me\",\n    location:\"world\"\n}\n\nconst {name,location} = object\nconsole.log(name,location)\n</code></pre></p> <p>To change the variable names from the property names we <pre><code>const {name:newName,location:newLocationName} = object;\nconsole.log(newName,newLocationName)\n</code></pre></p> <p>To set default values for a property that may not exist in the object. If it exists the default values get's overwritten. <pre><code>// sets menu to empty \nconst {name,location,menu = []} = object;\nconsole.log(name,location,menu)\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#mutating-variables-while-destructuring-objects","title":"Mutating variables while destructuring objects","text":"<p>In order to mutate the variables <code>a,b</code> while destructuring our object we need to put it inside <code>()</code> to make it work. <pre><code>let a = 111;\nlet b = 999;\nconst obj = {a:23,b:7,c:14};\n({a,b} = obj);\nconsole.log(a,b);\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#destructure-nested-objects","title":"destructure nested objects","text":"<pre><code>const object = {\n    feed: {left:43,\n        right:44\n    }\n}\n\nconst {feed:{left:l,right:r}} = object;\nconsole.log(l,r)\n</code></pre> <p>this allows to use destructuring inside functions for example <pre><code>const order = {\n    food:\"pizza\",\n    time:14\n}\n\n\nfunction orderSomething({food = \"none\" ,time = 0}){\n    console.log(`Order received: ${food} at ${time}`);\n}\n\norderSomething(order);\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#spread-operation-on-objects","title":"Spread operation on objects","text":"<pre><code>const object1 = {\n    name:\"rolfo\",\n    location:\"Berlin\"\n}\n\nconst object2 = {...object1, weather:\"good\"}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#shallow-copy-of-object","title":"Shallow copy of object","text":"<pre><code>const object2 = {...object1}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#rest-operations-on-objects-collect-unspecified-elements-in-assignment","title":"Rest operations on objects - Collect unspecified elements in assignment","text":"<p>The rest pattern allows us to pack elements, that aren't specifically assigned, into an object. Always use the rest pattern as the last element.</p> <pre><code>const object = {\n    a:0,\n    b:2,\n    c:4,\n    d:6,\n    f:8\n}\n\nconst {myA,myB,...others} = object\nconsole.log(myA) -&gt; 0\nconsole.log(myB) -&gt; 2\nconsole.log(others) -&gt; {c:4,d:6,f:8}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#enhanced-object-literals","title":"Enhanced Object Literals","text":"<p>With Enhanced Object Literals we don't need to reassing objects from outside an object with the variable name. We just implement it as an element. <pre><code>const openingHours = {\n    mon: {\n        open:0,\n        close:24\n    },\n    tue: {\n        open:0,\n        close:24\n    }\n}\n\n\nconst restaurant = {\n    name:'my restaurant',\n    openingHours\n    //dont need openingHours = openingHours\n}\n</code></pre></p> <p>Also methods doesn't need to be declared with function</p> <pre><code>const restaurant = {\n    ...\n    order(starterIndex,mainIndex){\n        return [this.starterMenu[starterIndex]]\n    }\n    ...\n}\n</code></pre> <p>Another enhancement is that we can compute the variable names inside the object <pre><code>const weekdays = ['mon','tue']\n\nconst openingHours = {\n    [weekdays[0]]: {\n        open:0,\n        close:24\n    },\n    [`day-${2+4}`]:{\n        open:2,\n        close:20\n    }\n}\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#optional-chaining","title":"Optional Chaining","text":"<p>With optional chaining <code>?.</code> if a certain property does not exist <code>undefined</code> will be returned.</p> <p><code>console.log(restaurant.openingHours.mon?.open)</code></p> <p>We also can check for multiple properties</p> <p><code>console.log(restaurant.openingHours?.mon?.open)</code></p> <pre><code>const weekdays = ['mon','tue','wed','thu','fri','sat','son']\nconst openingHours = {\n    [weekdays[0]]:\n    {\n        open:0,\n        closed:23\n    },\n    [weekdays[1]]:\n    {\n        open:0,\n        closed:23\n    },\n    [weekdays[1]]:\n    {\n        open:0,\n        closed:23\n    },\n}\n\nfor(const day of weekdays){\n    const open = openingHours[day]?.open ?? 'closed';\n    console.log(`On ${day}, we open at ${open}`);\n}\n</code></pre> <p>This also works for methods <code>restaurant.oder?.(0,3) ?? 'Method does not exist'</code></p> <p>And on arrays to check if an array is empty <pre><code>const users = [{name:\"me\",email:\"Hallo world\"}];\nconsole.log(users[0]?.name ?? \"User array is empty\")\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#oop","title":"OOP","text":"<p>JavaScript supports object oriented programming with the <code>class</code> keyword.</p> <pre><code>class Human {\n    constructor(name){\n        this.dna = 'MMYYDD'\n        this.name = name\n    }\n\n    get gender() {\n        return this.gender;\n    }\n\n    set gender(){\n        this.gender = val;\n    }\n}\n</code></pre> <p>But classes are syntactic sugar for prototype and inheritance and objects.</p> <p>A class can define a constructor that is called when the object is first created. The class also can have properties and getter and setter functions to access the properties.</p> <p>Classes also encapsulate functions as methods on an objects instance. We also can make the methods global to the class name by defining it <code>static</code> method</p> <pre><code>class Human {\n    constructor(name){\n        this.dna = 'MMYYDD'\n        this.name = name\n    }\n\n    get gender() {\n        return this.gender;\n    }\n\n    set gender(){\n        this.gender = val;\n    }\n\n    walk(){\n        console.log('walking')\n    }\n    static isHuman(human){\n        if(human.dna == 'AACTG'){\n            return true;\n        }\n    }\n}\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#other-datastructures","title":"Other Datastructures","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#array","title":"Array","text":"<p>Hold dynamic collection of index items. <code>const list = ['aa','bb','cc','cc']</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#sets","title":"Sets","text":"<p>Hold a collection of unique items <code>const uniq = new Set(list)</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#map","title":"Map","text":"<p>Hold key:value pairs and it is easier to loop over this data collection than objects.</p> <pre><code>const dict = new Map([\n    ['doof',1],\n    ['foof',2],\n    ['cruuf',3]\n])\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#garbage-collection","title":"Garbage collection","text":"<p>JS is garbage collected which means it will automatically deallocate objects from memory when they are no longer referenced in the code.</p> <p>With Maps and Sets all your properties will always be referenced. For optimization there is <code>WeakMap()</code> and <code>WeakSet()</code> that contain properties that can garbage collected and the memory reduced.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#non-blocking-event-loop","title":"Non blocking event loop","text":"<p>Normally when you run your code in a script it gets executed synchronously line by line. The next line can't start before the previous line finished.</p> <p>With an event loop we can write asynchronous code in javascript which runs in a serparate thread pool while the rest of the application continues to execute. It allows multi task</p> <p>We can writer async code with a <code>promise()</code></p> <pre><code>const promise = new Promise(\n    (resolve, reject) =&gt; {\n        // Do something async here\n\n        if(sucess){\n            resolve('success');\n        } else {\n            reject('failure')\n            //To raise an error\n        }\n    }\n)\n</code></pre> <p>A promise is a wrapper for a value that is unknow right know but that will resolve to a value in the future. For example a call to a 3rd party api that resolves to some data.</p> <p>The consumer of the promise can use methods <code>.then()</code> and <code>.catch()</code> to handle this outfcomes</p> <pre><code>promise\n.then(success =&gt; {\n    console.log('yay!',success);\n})\n.catch(err =&gt;{\n    console.log('oh no!',err)\n})\n</code></pre> <p>You also can define an <code>async function</code> that automatically returns a promise</p> <pre><code>async function asyncFun(){\n    //waits till the promise is resolved\n    const result = await promise;\n}\n// To implement error handling you want to wrap it in a try catch block\n\nasync function asyncFun(){\n    try{\n        const result = await promise;\n    } catch(error) {\n\n    }\n}\n</code></pre> <p>To keep bigger code more easy to read we can use modules which is code in an extra file for parts of the code.</p> <p>By default all the code in a file is private just to that file. In order to share code with other files we can make the code default export by assigning <code>export default function name</code>.</p> <p>Then we can import it in another file with <code>import functionFun from './help.js';</code></p> <p>we also can export and import variables <code>export const hallo = 344;</code> <code>import {hallo} from '.help.js';</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#node-package-manager","title":"Node package manager","text":"<p>To use code from other developers we can use npm javascript package manager We can install packages with <code>npm install</code>. It downloads the code it in the <code>node_modules</code> folder. It also provides a <code>package.json</code> file that list out all the dependencies that you use in your project.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#js-in-browser","title":"Js in Browser","text":"<p>The browser is based on document object model (DOM) where the UI is based on a structured tree of html elements. </p> <p>It allows JS to access HTML elements and style to manipulate them</p> <p>When JS interacts with an element from the website it is called Dom manipulation</p> <p>A browser provides an api to interact with these elements with <code>window.document</code>.</p> <p>The DOM methods and properties are part of the WEB APIs that browser implement.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#grab-element-from-html","title":"Grab element from html","text":"<p>The <code>document</code> allows us to grab an individual html element using the <code>.querySelector()</code> it takes a css selector as an argument and will find the html elements that has the same classname<code>.className</code>, id <code>#idName</code> or tag name. It returns an instance of the element class. If there are multiple instances with the same className <code>querySelector()</code> will pick the first the first element. To grab multiple elements at the same time with <code>.querySelectorAll('.button')</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#select-and-manipulate-elements","title":"Select and manipulate elements","text":"<p>We can select an element by it's class <code>document.querySelector(.message).textContent = 'new Text'</code></p> <p>or select it by an elements unique id <code>document.querySelector(#id).textContent = ...</code> <code>document.getElementById('id').textContent = ...</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#get-and-set-values-input-field","title":"Get and Set values Input field","text":"<p><code>document.querySelector(.inputField).value</code> &lt;- This returns a string Converting into a number <code>Number(document.querySelector(.inputField).value))</code> Setting value of input field. <code>document.querySelector(.inputField).value = 10</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#grab-text-from-element","title":"Grab text from element","text":"<p><code>document.querySelector(.message).textContent</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#handling-click-events","title":"Handling Click Events","text":"<p>When we want our javascript to react to something that happens in the dom we need to listen to the event that happen to the element. For example when a btn is clicked, we can assign a function that gets called when the button gets clicked.</p> <p>Every time an event happens JS creates an event object which allows us to get information about the specific event.</p> <pre><code>const btn = document.getSelector(.btn);\nconst btn2 = document.getSelector(.btn2);\nbtn.addEventListener('click', () =&gt; {\n    //Only gets called when the event happens\n    console.log('clicked')\n})\n\nbtn2.addEventListener('dblclick',function () {\n    console.log(\"hallo\")\n})\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#handling-keypressed-events","title":"Handling KeyPressed Events","text":"<p>The keypress event is a global event. For global events we usually listen to the whole document</p> <pre><code>document.addEventListener('keydown',handleEscKey)\n\nconst handleEscKey = (e)=&gt; {\n    if(e.key === \"Escape\"){\n        console.log(`${e.key} pressed`)\n    }\n}\n</code></pre> <p>There are three key events <code>keydown</code> - when we put down the key <code>keypress</code>- fired while we have finger on the keyboard <code>keyup</code> - when we lift our finger up from the keyboard</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#manipulate-css-styles","title":"Manipulate CSS styles","text":"<p>To manipulate the css style we have to access the html element and then the <code>style</code> property. Whenever we manipulate a style we have to specify a <code>string</code>. We can't write a number.</p> <p><code>document.querySelector(body).style.backgroundColor = '#60b347'</code></p> <p><code>document.querySelector(.message).style.width = '30rem'</code></p> <p>The changes get applied as <code>Inline Styles</code> so the css files doesn't get changed or manipulated It looks like <code>div class=\"message\" style=\"width:30rem\"&gt;text&lt;/div&gt;</code> The <code>Inline Styles</code> overwrite the properties of css file.</p> <p>Why is that new info</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#manipulate-classes","title":"Manipulate classes","text":"<p>To check if an element contains a class we can use <code>if(elemnt.classList.contains('hidden'))</code></p> <p>We can use JS to <code>remove</code> classes from an html element. For example we can have a modal which has the class</p> <pre><code>.hidden{\n    display:none;\n}\n</code></pre> <p>We then call <code>myElement.classList.remove('hidden')</code> and the class is removed and the element is shown on the screen.</p> <p>To add a class we can call <code>modal.classList.add('hidden')</code></p> <p>We also can use <code>myElement.classList.toggle('hidden')</code> this will add a class if it's not there and remove a class when it already exists</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#math","title":"Math","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#cut-of-decimal-part-of-number","title":"Cut of decimal part of number","text":"<p>We can call <code>Math.trunc()</code> <code>Math.trunc(Math.random()*20)</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#front-end-frameworks","title":"Front-end frameworks","text":"<p>Many developers use front-end frameworks that produce declerative code where the UI is a function of its input data /states.</p> <p>These frameworks encapsulate JS, HTML,CSS into components. Inside a components the data is reactive. It can be bound from js directly to html</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#bundle","title":"Bundle","text":"<p>Module bundler</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#network-waterfall","title":"Network waterfall","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#dynamic-imports","title":"Dynamic imports","text":"<p>Only import bundle when it is needed</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#let-js-reload-automatically-when-code-is-changed","title":"Let JS reload automatically when code is changed","text":"<p>We can use the VSCode extension Live Server or we can set up our own node.js server</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#run-javascript-on-a-server","title":"Run Javascript on a server","text":"<p>With node.js is a javascript runtime. It allows us to run javascript outside of a browser and on a server. with <code>node</code> command we can execute javascript.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#see-if-node-is-installed","title":"See if node is installed","text":"<p><code>node -v</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#install-live-server","title":"Install live server","text":"<p><code>npm install live-server -g</code></p> <p><code>-g</code> install globally</p> <p>On mac you might need <code>sudo</code> in front of npm.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#run-live-server","title":"Run live server","text":"<p>Call live server <code>live-server</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#strict-mode","title":"Strict Mode","text":"<p>Strict mode assures that we write secure JS code. For that we just add <code>'use strict'</code> at the beginning of our code. It needs to be the first line in the code.</p> <p>Strict mode also blocks the usage of certain variable names that JS has blocked to use because it might use them in the future. Like <code>interface</code> or <code>private</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#_1","title":"Basics","text":"<p>Electron node.js with the browser to create app react native to build whole apps</p> <p>typescripts</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#dom","title":"DOM","text":"<p>Document Object Model What every browser uses to model all the html elements on a webpage. </p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#errors","title":"Errors","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#unexpected-token","title":"Unexpected token","text":"<p>You used a wrong variable name.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#how-to-learn-to-code","title":"How to Learn to Code","text":"","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#what-can-you-do-wrong","title":"What can you do wrong","text":"<ul> <li>dont have clear goal</li> <li>just copy the code without thinking what the code means</li> <li>dont reinforce what you learned by doing small challenges</li> <li>dont practise coding</li> <li>dont create own project ideas</li> <li>quickyl become frustrated</li> <li>lose motivation because you think you never can know everything</li> <li>learn in isolation</li> </ul>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#what-do-write","title":"What do write","text":"<ul> <li>write down your specific,measurable,realistic and time-based goal on a piece of paper. I want to become a web developer in 6 month.</li> <li>Always type the code</li> <li>Understand the code</li> <li>Use immediately what you learned.</li> <li>Take notes</li> <li>Challenge yourself</li> <li>practise coding on your own - come up with your own project ideas.</li> <li>dont be stuck in \"tutorial\" hell</li> <li>you will never know everything</li> <li>Even devs after 20 years struggle to get their code to work and it is a tedious slog.</li> <li>Never learn in isolation - explain new concepts to other people.</li> <li>Share your learning progress with web dev community #100DaysOfCode #CodeNewbie #webdev</li> <li>Keep challenging yourself, run into lots of problems and fix them</li> </ul>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#how-to-think-like-a-developer","title":"How to think like a developer","text":"<p>How to solve problems in coding:</p> <ul> <li>stay calm and slow down - don't jump at a problem without a plan</li> <li>take a logical and rational approach</li> <li> <p>Framework:</p> </li> <li> <p>Take a step back and make sure you understand 100% the problem:</p> </li> <li> <p>Ask right questions to get a clear picture of the problem</p> </li> <li>What does ... mean?</li> <li> <p>What should we do if something else happens?</p> </li> <li> <p>Divide and conquer:</p> </li> <li> <p>Break big problem into smaller sub-problems.</p> </li> <li> <p>Do as much Research as possible</p> </li> <li> <p>For bigger problem write pseudo code before writing actual code.</p> </li> </ul>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#see-objects-as-a-table-in-console","title":"See objects as a Table in Console","text":"<p><code>console.table(object)</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#debugger-in-chrome","title":"Debugger in Chrome","text":"<p>In the debugger under <code>Sources</code> we can set breakpoints to evaluate values at a certain stage. You can find the debugger next to console under sources.</p> <p>Don't forget to unselect the breakpoint at the end.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#bundler","title":"Bundler","text":"<p>Bundler is a tool in which you send assets like JavaScript,Css,HTML,images, TypeScript. The bundler handles these assets, applies potential modifications and output a bundle composed for web friendly files like HTML,CSS,images and JS. Like a pip in which you send non-web-friendly assets and at the end of the tube you get web-friendly assets back.</p> <p>Bundler can do even more. You can use a bundler to create a local server, manage dependencies, improve compatibility, support modules, optimize images, deploy on a server, minify the code, etc.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#webpack","title":"Webpack","text":"<p>Webpack is most popular bundler.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#js-behind-the-scenes","title":"JS behind the scenes","text":"<p>Every software need to use some hardware resources like cpu and memory to run. In Low-level languages like c you have to manually manage these resources. In high level languages we don't have to manage the resources. They have abstractions that take care for us.</p> <p>Garbage Collection takes memory management away from the developer. Its an algorithm that automatically removes old unused objects from the computer memory. Like a cleaning guy that cleans up for us.</p> <p>JS is an interpreted/just-in-time-compiled language. A computers processor only understands 0 and 1 - which is called as machine code. We write human readable javascript code which is an abstraction from machine code. And this code needs to be translated into machine code by the compiler/interpreter. This happens inside the javascript engine.</p> <p>Javascript is a multi-paradigm language. A paradigm is an approach of structuring code. Three paradigms are: Procedural programming: Organising code in a linear way with some functions in between.</p> <p>Object-oriented programming(OOP): In JS OOP is a prototype based object oriented approach: almost everything in JS is an object except primitives like numbers,string etc. Arrays are objects for example. We create arrays from an array blueprint - which is like a template - and this is called <code>Prototype</code> - <code>Array.prototype.push</code> for the <code>.push()</code> method. The prototype contains all the methods. The array in our code then inherits all the methods from the blueprint.</p> <p>Functional programming(FP):</p> <p>Many languages are only procedural,oop or functional, but javascript does all of it. That makes it super flexible.</p> <p>JS is a language with <code>first-class</code> functions, functions that are treated as variables. We can pass into other functions and return functions from functions.</p> <p>Javascript is a <code>dynamic-typed</code> language - we don't assign datatypes to variables. They only become known when the engine executes the code. Also the type of variables can easily be changed. If you want to use JS with types you can use <code>Typescript</code></p> <p>Concurrency model is how the engine handles multiple tasks that are happening at the same time. JS runs in one single thread - it only can do one thing at a time. In computing a thread is a set of instructions executed in the cpu. Where the code is executed in the processor.</p> <p>To avoid that long task are blocking the single thread we create an event loop. The event loop executes these tasks in the <code>background</code> and puts them back in the main thread once they are finished.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#javascript-engine-and-runtime","title":"Javascript Engine and Runtime","text":"<p>A Javascript engine is a program that executes JS code. Every browser has its own javascript engine but the most well known is googles v8 engine which powers chrome and node.js.</p> <p>Any JS engine contains a <code>call stack</code> and a <code>heap</code>. A <code>call stack</code> is where our code gets executed - using execution context A <code>Heap</code> is a unstructured memory pool which stores all the objects that our application needs.</p> <p>How is the code compiled to machine code? There are two ways how code gets converted into machine code</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#compilation","title":"Compilation","text":"<p>The entire code is converted into machine code at once - written to a binary file that can be executed by a computer. Two steps: Source code -&gt; COMPILATION = machine code -&gt; EXECUTION = program running</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#interpretation","title":"Interpretation","text":"<p>Interpreter runs through source code and executes it line by line. Source code -&gt; EXECUTION line by line = program running</p> <p>The source code gets converted into machine code right before execution - not ahead of time.</p> <p>Modern JS now uses a mix of interpretation and compilation - Just-in-time compilation Compiles the entire code in machine code once and executes it right away.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#js-engine-example","title":"JS Engine example","text":"<p> As JS code enters the engine the first step is to <code>Parse</code>/read the code. During the <code>Parsing</code> the code is parsed into a data structure called abstract syntax tree - AST. Every line of code that is meaningful to the engine gets spit up in pieces and then saving all the pieces into the tree in a structured way. It also checks if there are syntax errors.</p> <p>Next step is the compilation which takes the generated AST and compiles it into machine code. This machine code gets executed right away. The execution happens in the <code>Call Stack</code>.</p> <p>Modern JS engines have optimisation strategies where they first create unoptimised version of machine code so it can start executing as fast as possible. Then in the background code is optimised and recompiled in the background multiple times.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#js-runtime","title":"JS Runtime","text":"<p>Browsers are JS Runtime. A JS runtime is like a big box which includes all the things that we need to use JS. At the heart is always the JS Engine. In order to work properly the engine needs access to apis like <code>DOM</code>, <code>Timers</code>,<code>FetchAPI</code>. WebAPIs are functionalities provided to the engine but not part of JS language. JS get's access to theses apis over the gloabel <code>window</code> object.</p> <p></p> <p>A typical JS runtime also contains a <code>Callback queue</code> which is a data structure that contains all the callback functions. We attach eventHandler functions to DOM elements to react to certain events. These event handler functions are called <code>Callback functions</code>. As the event happens, e.g. <code>click</code>, the callback function will be called - the callback function is put in the callback queue. When the call stack is empty the callback function is passed into the call stack so it can be executed. This is caused by the event loop - it takes callback functions from the callback queue and puts them into the call stack so they can be executed.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#how-is-js-code-executed","title":"How is JS code executed","text":"<p>When the compilation is finished a <code>global execution context</code> is created for the top level code - code that is not inside a function. So only the code outside of functions is executed because you only want to execute the functions when they are called.</p> <p>A <code>global execution context</code>is an environment where JS is executed. It stores all the necessary information for the execution like variables or arguments passed into a function.</p> <p>In any JS project there is only one <code>global execution context</code>.</p> <p>Once the top level code is processed functions get executed as well. For each function call one execution context is created - containing all the necessary information to run the function. All these execution contexts make up the call stack.</p> <p>Inside a execution context is:</p> <ul> <li>Variable environment: <code>let</code>, <code>const</code> and <code>var</code> declarations</li> <li>Functions</li> <li><code>arguments</code> object</li> <li>Scope chain</li> <li><code>this</code> keyword</li> </ul> <p>Arrow functions don't have <code>arguments</code> object nor <code>this</code> keyword.</p> <p></p> <p>The <code>Call Stack</code> is where the execution contexts get stacked on top of each other in order to keep track of where we are in the program execution. So the execution context that is on the top of the stack gets executed. When it's finished it gets removed from the stack and the next execution context gets processed.</p> <p>If the program is completely finished also the <code>global execution context</code> is popped out of the call stack.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#scope-and-scope-chain","title":"Scope and Scope chain","text":"<p>Scoping defines how the variables are organized and accessed in our program. \"Where do they live and where can we access a variable\"</p> <p>In JS we have <code>Lexical scoping</code> - scoping is controlled by <code>placement</code> of functions and blocks in the code. A function inside another function has access to the variables of its parent function.</p> <pre><code>function func1(){\n    func2()//Has access to the variables of func1\n}\n</code></pre> <p><code>Scope</code> environment in which a certain variables and functions is declared: <code>global</code>, <code>function</code>and <code>block</code> scope.</p> <p><code>global</code> - Outside of any function or block; variables are accessible everywhere <code>function</code> - Each function creates a scope in which its variables are accessible - also called <code>local</code> scope - local life in the functions and are not accessible outside of the function <code>block</code> - from ES6 blocks also create a scope. So for example variables created in an if block have there own scope in the if block. Same for for block etc. This applies only to <code>let</code> and <code>const</code> variables. <code>var</code> would be accessible in the function or global scope.</p> <p>From ES6 all functions are also <code>block</code> scoped - so only accessible inside that block</p> <p><code>Scope of variable</code> region of code where variable can be accessed</p> <p>Every scope has access to all variable from all outer scopes. You can see that <code>second()</code> has access to the variables of the <code>first()</code> function and the <code>global</code> scope.</p> <pre><code>const myName = \"Leo\";\n\nfunction first() {\n    const age = 30;\n\n    if(age&gt;=30){\n        const decade = 3;\n        var millenial = true;\n    }\n    function second(){\n        const job = \"worker\";\n        console.log(`${myName} is a ${age}-old ${job}`)\n    }\n    second()\n}\nfirst()\n</code></pre> <p>So a function looks in itself if it can find the variable, if not it looks up in the next outer scope. This is called variable lookup in scope chain. One <code>scope</code> can only look up in the scope chain not down.</p> <p></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#hoisting","title":"Hoisting","text":"<p>Makes some types of variables accessible before they are declared in the code. Behind the scenes - before the execution the code is scanned for variable declarations - for each variable found, a new property is created in the variable environment object.</p> <p>It doesn't work the same for all variable types. </p> <p><code>function</code> declarations are hoisted and the initial value is the actual function - we can use function declarations before they are actually declared - because they are stored in the variable environment object before the code starts executing.</p> <p><code>var</code> variables also are hoisted but we don't get the declared value we get the initial value <code>undefined</code>. One of the reason why we almost never use <code>var</code></p> <p><code>let</code> and <code>const</code> are not hoisted - they are set to <code>&lt;uninitialized&gt;</code> no value at all - not even undefined. These variables are placed in the <code>TDZ</code> temporal dead zone.</p> <p><code>function expressions and arrows</code> depend on if using <code>var</code> <code>let/const</code></p> <pre><code>console.log(addDecl(2,3));// -&gt; Works\nconsole.log(addExpr(2,3));// -&gt; Doesn't Work\nconsole.log(addArrow(2,3));// -&gt; Doesn't Work -&gt; AddArrow function is undefined(2,3)\n\nfunction addDecl(a,b) {\n    return a+b;\n}\n\nconst addExpr = function(a,b) {\n    return a+b;\n}\n\nvar addArrow = (a,b) =&gt; a+b;\n</code></pre>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#temporal-dead-zone","title":"Temporal dead zone","text":"<p> The <code>const job = 'teacher'</code> will only be accessible from the line it is defined because the lines before lies the Temporal Dead Zone of that <code>job</code> variable - so we can't use it there. The region where the variable is defined but can't be used anyway - as if the variable doesn't even exist.</p> <p>In the first <code>console.log()</code> with the <code>job</code> variable we get an <code>ReferenceError: Cannot access 'job' before initialization</code> error.</p> <p>The <code>TDZ</code> got invented to catch errors like accessing variables before declaration. It also allows <code>const</code> variables to not be reassigned.</p> <p>Hosting got invented to make it possible to use functions before there actual declarations.</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#this-keyword","title":"this keyword","text":"<p><code>this</code> keyword is special variable that is create for every execution context / every function. <code>this</code> keyword will always take the value of the owner of the function in which the <code>this</code> is used - it points to the owner of the function.</p> <p>The value of <code>this</code> is depends on how the function is called - NOT static. <code>this</code> is only assigned when the function is called.</p> <p><code>Method</code> - <code>this</code> -&gt; Points to Object that is calling the method</p> <pre><code>const jonas = {\n    name: 'Jonas',\n    year: 1889,\n    calcAge:function () {\n        return 2037 - this.year;\n    }\n}\njonas.calcAge()\n</code></pre> <p>Here <code>this.</code> points to <code>jonas</code></p> <p>Global scope</p> <pre><code>//global scope\nconsole.log(this)\n//returns the window object\n</code></pre> <p><code>Simple function call</code> - <code>this</code>-&gt; undefinied(in strict mode) Otherwise points to <code>window</code></p> <pre><code>const calculate = function(a,b){\n    console.log(this)\n}\ncalculate(1,2)\n//Return undefined\n</code></pre> <p><code>Arrow functions</code> - <code>this</code> -&gt; <code>this</code> of the function that surrounds the arrow function</p> <pre><code>const calculate = (a,b) =&gt; {\n    console.log(this)\n}\ncalculate(1,2)\n// returns the window because it is the surrounding \"function\"/scope of the arrow function\n</code></pre> <p><code>Event listener</code> - <code>this</code> -&gt; DOM element that the handler is attached to</p> <p><code>this</code> doesn't point to the function itself nor the variable environment</p> <p>Never user an arrow function as a method in an object <pre><code>//Dont do this!!!!\nconst hans = {\n    ...\n    greet: ()=&gt; {\n\n    }\n}\n// Use a normal function\nconst hans = {\n    ...\n    greet: function() {\n        concole.log(this)\n    }\n}\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#arguments-keyword","title":"Arguments Keyword","text":"<p>Regular Javascript functions have an arguments keyword which store all the passed arguments.  It is also possible to pass more arguments than specified into a function. But you can't use it in arrow functions. <pre><code>const addExpr = function(a,b) {\n    console.log(arguments);\n}\n\naddExpr(2,5,40,45)\n//-&gt; agrumentsArray[2,5,40,45]\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#memory-management-primitives-and-objects","title":"Memory Management: Primitives and Objects","text":"<p>Memory management is how JS allocates space in memory to create variables and later frees up the memory. Every value in the program goes through a memory lifecycle.</p> <p>In the lifecycle: - When a variable gets created a peace of memory gets allocated - Then whenever the variable or its value is used the memory gets used. - When the variable is not used anymore the memory is released.</p> <p>For different types of values memory is allocated in different places in the JS Engine.</p> <p>Values are ether primitive types or objects in JS.</p> <p>Objects get stored in the <code>Heap</code> of the JS Engine and primitive values get stored in <code>Call Stack</code>.</p> <p>Object Variables in the call stack don't hold the objects themselves but references to the objects in the heap References to objects are also stored in the <code>Call Stack</code> </p> <p>When we copy a variable that contains a reference to an object then we only copy the reference to the object. But we have to be aware that if we change a value in the copied variable it will also change the value in the original object because we overwrite the reference and both elements have the same reference. </p> <p>So to properly copy on object and not copying the reference we need to use the spread operator <code>...</code> <pre><code>//Shallow copy\nconst object = {\n    name:\"franz\",\n    age:20\n}\n\nconst objectCopy = {...object}\n</code></pre> But be aware this only creates a <code>shallow</code> copy. It copies the <code>primitives</code> but if the object would contain another object/ a object reference it wouldn't really make a unique copy of the object reference.</p> <p>To create a Deep copy/clone for example when we want to manipulate a big object in our code and make sure that the original data isn't affected by these changes. <pre><code>//Deep copy/clone\nconst objectClone = structuredClone(object);\n</code></pre></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/Basics/#memory-management-garbage-collection","title":"Memory Management: Garbage Collection","text":"<p>Call stack Variable environment is simply deleted when execution context pops off stack </p> <p>Heap In order to clean up old unused objects from the heap JS uses <code>Garbage Collection</code>. The JS Engine runs <code>Garbage Collection</code> automatically whenever it thinks it is necessary. The developer can't instruct to do it.</p> <p>Mark-and-sweep-Alogrithm 1. Mark all objects that are reachable from a root/starting point like global and other execution context as \"alive\". If objects can be reached object is considered alive. 2. Sweep - Delete all un-marked objects and reclaim memory for future allocations.  When  the getTasks() finishes execution and the execution context pops of the stack, the garbage collection deletes the objects from getTasks() because they aren't reachable any more.</p> <p>Any globally defined object will never be garbage collected because the <code>Global EC</code> exists whe whole lifetime of the program.</p> <p>Memory Leaks When an object that is no longer needed by the program is incorrectly still actively reachable by the garbage collection from one of the roots. So the object is marked as alive and not deleted. Forgetting to throw away stuff that you don't use anymore.</p> <p>Often old and undesired reference happen from event listener and timers. If a timer creates an object this object will always be reachable unless the developer deletes the timer when not needed anymore. Same for event listeners. Also avoid declare large objects as global objects because they will never be garbage collected</p>","tags":["JavaScript"]},{"location":"topics/JavaScript/JS/DotEnv/","title":"DotEnv","text":"<p>To be able to load API-Keys from an .env file </p>","tags":["JavaScript","Server"]},{"location":"topics/JavaScript/JS/Errors/","title":"JS Error","text":"<p><code>ReferenceError: Cannot access 'job' before initialization</code> - You try to access a variable that lies in the temporal dead zone. Can't be used jet.</p>","tags":["JS"]},{"location":"topics/JavaScript/JS/Express/","title":"Express","text":"<p>Express is a framework to create an http-server</p>","tags":["JavaScript","Server"]},{"location":"topics/JavaScript/JS/RunScriptOnServer/","title":"Run Script On Server","text":"<p>To run a script on a server you need a javascript environment on a server. Most commonly used for that is node.js</p> <ol> <li>Install node.js You can download node js on <code>https://nodejs.org</code></li> </ol> <p>To check if node.js got properly installed test in terminal <code>node -v</code></p> <ol> <li>Write a simple Javascript file In a file called for example <code>index.js</code> write your javascript behaviour</li> </ol> <p>To execute the javascript file in the node environment  <code>node index.js</code> in the terminal</p> <ol> <li>Execute File on a server Local server  If you want to execute a script on your computer as a server you can create an HTTP-Server-Script</li> </ol> <pre><code>const http = require('http')\n\nconst server = http.createServer((req,res)=&gt;{\n    res.writeHead(200,{'Content-Type': 'text/plain'});\n    res.end('Hallo von meinem Node.js-Server!\\n');\n});\n\nconst port = 3000;\nserver.listen(port,()=&gt;{\n    console.log('Server l\u00e4uft auf http://localhost:${port}');\n});\n</code></pre> <p>External hosting To host a JS script not just locally but on a server you can rent a  Virtual Private Server or you can use free cloud products (Heroku, Railway,Render)</p> <ol> <li> <p>Install Node.js if it isnt already installed</p> </li> <li> <p>Upload Code via Git or FTP/SSH to the server.</p> </li> <li> <p>Install dependencies <code>npm install</code></p> </li> <li> <p>Start Script <code>node server.js</code></p> </li> <li> <p>Execute script constantly To execute the script constantly it makes sense to use a prozessmanager like pm2 </p> </li> </ol> <p><code>npm install pm2 -g</code></p> <p>Start script with pm2 <code>pm2 start server.js</code></p>","tags":["JavaScript"]},{"location":"topics/JavaScript/React/","title":"React","text":"<p>React Basics React</p>"},{"location":"topics/JavaScript/React/#latest-added","title":"Latest added","text":""},{"location":"topics/JavaScript/React/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/JavaScript/React/ExecuteUseEffectSpecificState/","title":"Execute useEffect for specific state","text":"<pre><code>useEffect(() =&gt; {\n    window.scrollTo(0, 0);\n}, [stationIndex]); \n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/HostViteReactGithubPages/","title":"Host Vite React Project on Github Pages","text":"<ol> <li> <p>Install gh-pages package    <code>npm install --save-dev gh-pages</code></p> </li> <li> <p>Update package.json    Add homepage field with your github pages url</p> </li> </ol> <pre><code>{\n\"name\":\"my-project-name\",\n\"homepager\": \"https://github.com/levoxtrip/MyDashboard\",\n\"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d dist\"\n}\n}\n</code></pre> <ol> <li>Configure vite.config.js</li> </ol> <pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  base: \"/&lt;repo-name&gt;/\",\n  plugins: [react()],\n});\n</code></pre> <ol> <li>Initialise GIT, connect to repo, push</li> <li>Build and deploy project    <code>npm run deploy</code></li> </ol>","tags":["Javascript","React","Github"]},{"location":"topics/JavaScript/React/InterfaceFromJson/","title":"Interface from JSON","text":"<p>We can write interfaces in an own file and then just import the when we need them <code>stationData.ts</code> <pre><code>export interface StationData {\n    stationId: number\n    stationTypeIndex: number\n    mapLinks: MapLinks\n    languages: Language[]\n    image: string\n  }\n\n  export interface MapLinks {\n    google: string\n  }\n\n  export interface Language {\n    language: string\n    title: string\n    description: string\n  }\n\n//Component\nimport {StationData} from \"../data/stationData\"\n...\n\nconst stationData = data[stationIndex] as StationData;\n</code></pre></p>","tags":["Typescript","ReactNative","React","Json"]},{"location":"topics/JavaScript/React/OwnLearning/","title":"React Own Learning","text":"<p>When you use React routing have in mind that when you change sites that doesn't trigger a full page reload. Elements like three.js need to be reinitiated and properly cleaned up.</p> <p>ThreeJS doesn't automatically gets garbage collected by JS. You need to do it yourself. Dispose the textures etc. Implement Cleanup functionality in <code>useEffect</code></p>"},{"location":"topics/JavaScript/React/React/","title":"Basics","text":"<p>React is a JavaScript library to build user interfaces. React allows us to build the structure for our website.</p> <p>With React it is really common to build single page applications. We have one site with one single template and update the components in the DOM that get shown.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#components","title":"Components","text":"<p>Components are the building blocks of our application. Allow us to make the visual layer of our application. They let us split up our UI in individual reusable pieces. Each part of the UI gets build up as a seperate component and then get added to the parent component.</p> <p>A component is a JS class or function that returns JSX, which is similar to html code.</p> <pre><code>function Profile(){\n    return (\n        &lt;div&gt;\n        &lt;p&gt;Welcome!&lt;/p&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <p>Components can be nested as deep as you want.</p> <pre><code>function Tweets(){\n    return(\n        &lt;div&gt;\n        &lt;Tweet/&gt;\n        &lt;/div&gt;\n    )\n}\n\nfunction Tweet(){\n    return (\n        &lt;div&gt;\n        &lt;Author/&gt;\n        &lt;Content/&gt;\n        &lt;Actions/&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <p>Start with functional components and then later learn class based components.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#jsx","title":"JSX","text":"<p>Javascript XML looks like HTML with some slight syntax differences and gives us some added functionality. You write it in a <code>camelCase</code> style.</p> <p>The advantage of using React over HTML is that you can use dynamic JavaScript values in your JSX.</p> <pre><code>function Profile({name}){\n    return(\n        &lt;div className=\"profile-container\"&gt;\n        &lt;h1&gt;Hello, my name is {name}&lt;/h1&gt;\n        &lt;button onClick={alert('hello')}&gt;&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <p>We can use and display data in curly braces <code>{name}</code> to pass JS variables and logic directly into the html. This makes our attributes dynamic depending on the variables in the brackets.</p> <pre><code>//dynamic attributes\nconst src = \"/react.svg\"\n&lt;img src={src}/&gt;\n\n//dynamic styles with a JS object inside the {{}}\nconst background = 'red'\n&lt;div style={{background}}/&gt;\n</code></pre> <p>JSX tags are similar to HTML tages. Differences:</p> <ul> <li>class declaration: <code>className=</code> instead of <code>class=</code></li> <li>how events get handled.</li> </ul> <p>Browser actually can't read JSX so the code gets run through a compiler and gets converted into HTML and JS once it is shown in the browser.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#fragments","title":"Fragments","text":"<p>JS functions can only return one thing. In React you can only return one parent element from a component.</p> <p>For example you CAN'T do this without getting the error <code>JSX expressions must have one parent element</code>.</p> <pre><code>function App(){\n    return(\n        &lt;Header/&gt;\n        &lt;Main/&gt;\n    )\n}\n//We could fix this by wrapping a component in a div\n\nfunction App(){\n    return(\n        &lt;div&gt;\n        &lt;Header/&gt;\n        &lt;Main/&gt;\n        &lt;/div&gt;\n    )\n}\n\n//To not add another element to your page you can use an emty component called Fragment\n&lt;&gt;\n    &lt;Header/&gt;\n    &lt;Main/&gt;\n&lt;/&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#rendering","title":"Rendering","text":"<p>The way how and when to render our App React uses the VirtualDOM or VDOM.</p> <p></p> <p>The React rendering steps are:</p> <ul> <li>Has the state of our React app changed? If Yes -&gt; React updates the VDOM</li> <li>React uses 'diffing' process to compare the updated VDOM with a previous version to see what changed.</li> <li>Once it sees what is different React uses a process called 'Reconciliation' to update the real DOM with the updated changes.</li> </ul>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#event-handling","title":"Event Handling","text":"<p>Handling the user interactions. Event handling is how we take the user events and do something with them.</p> <p>React has build-in events like:</p> <ul> <li><code>onClick</code> - <code>&lt;button&gt; onClick={handleClick}/&gt;</code></li> <li><code>onChange</code> - <code>&lt;input&gt; onChange={handleChange}/&gt;</code></li> <li><code>onSubmit</code> - <code>&lt;form&gt; onSubmit={handleSubmit}/&gt;</code></li> </ul>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#alert-user-when-button-clicked","title":"Alert user when button clicked","text":"<p>We would add the <code>onClick</code> event to the button and refer a function that shows the alert.</p> <pre><code>function redAlert(){\n    const handleClick= ()=&gt; {\n        alert('RED')\n    }\n\n    return (\n        &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;\n    )\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#react-router","title":"React Router","text":"<p>Using React Router we can have multiple pages in a singel page application. We handle URL routing with a <code>Router</code>that keeps our UI in sync with our URL.</p> <pre><code>import {BrowserRouter as Router, Route} from 'react-router-dom'\n</code></pre> <p>Because we are not actually changing pages, the router takes care of rendering our components into the dom based on the current url.</p> <pre><code>import{BrowserRouter as Router, Route} from 'react-router-dom'\n\nfunction App(){\n    return (\n        &lt;div className=\"App\"&gt;\n        &lt;Router&gt;\n        &lt;Route path='/' element = {&lt;Home/&gt;}/&gt;\n        &lt;Route path='/profile' element = {&lt;Profile/&gt;}/&gt;\n        &lt;Route path='/product' element = {&lt;Product/&gt;}/&gt;\n        &lt;/Router&gt;\n&lt;/div&gt;\n    );\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#props","title":"Props","text":"<p>When you need to pass data down from one compenent to another you can pass it down as a prop.  A prop can be passed down like a function parameter.</p> <p>To make a prop create a name on the component you want to pass data to and set it equal to some value. <code>&lt;Greeting text={'HI'}/&gt;</code> You then can use that prop inside the component you past it too.</p> <pre><code>function Greeting(props){\n    return &lt;h1&gt;{props.text}&lt;/h1&gt;\n}\n</code></pre> <p><code>props</code> refers to properties of an object.</p> <pre><code>function Tweet(){\n    let item = {\n        'author':'Dennis',\n        'tweet':'My first tweet'\n    }\n\n    return (\n        &lt;div&gt;\n        &lt;Author/&gt;\n        &lt;Content body={item.tweet}/&gt;\n        &lt;Actions/&gt;\n        &lt;/div&gt;\n    )\n}\n\nfunction Content(props){\n    return(\n        &lt;p&gt;{props.body}&lt;/p&gt;\n    )\n}\n</code></pre> <p>Once the prop is passed down into the component you can use that prop everywhere in your component. Props can passed down multiple layers if needed. This get's called Prop Drilling. </p> <p>You can pass anything as a prop even other components. The passed components are called children. You can access them with the <code>props.children</code></p> <pre><code>&lt;Parent/&gt;\nto\n&lt;Parent&gt;\n    &lt;Child/&gt;\n&lt;/Parent&gt;\n\nfunction Parent(props){\n    return &lt;div&gt;{props.children}&lt;/div&gt;\n}\n</code></pre> <p>This is great for compositions.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#manage-data-in-app-with-state","title":"Manage Data in app with State","text":"<p><code>State</code> is like a snapshop from a camera - like a screenshot of our app at any given time. <code>State</code> is a JS object used to represent information in or about a component.</p> <p>To manage state we can't use JS variables because they don't cause our App to re-render.</p> <p><code>useState</code> takes an argument that serves as a starting value of the state variable and returns and array which contains the state variable and a function to update that state. <code>const [likes, setLikes] = useState(0)</code></p> <pre><code>function Likes(){\n    const [likes,setLikes] = useState(0)\n\n    const handleClick = () =&gt; {\n        setClicks(likes+1)\n    }\n\n    return(\n        &lt;button onClick={handleClick}&gt;Likes{likes}!\n        &lt;/button&gt;\n    )\n}\n</code></pre> <pre><code>myState = {\n    name:'Me',\n    isHuman:true,\n    moreInfo:[],\n};\n</code></pre> <p>In modern React we use Hooks like <code>useState(starting value)</code> to create a component state.</p> <pre><code>function Notes(){\n    let[notes,setNotes] = useState([])\n}\n</code></pre> <p>For example a list of notes that we want to render in our app.</p> <pre><code>function Notes(){\n    let [notes,setNotes] = useState([])\n\n    return(\n        &lt;ul&gt;\n        {notes.map(note=&gt; (\n            &lt;li&gt;{note.title}&lt;/li&gt;\n        ))}\n        &lt;/ul&gt;\n    )\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#update-state","title":"Update State","text":"<p>Set State as empty array then we request some data from our api and update that state with new data.</p> <pre><code>let [notes,setNotes] = useState([])\n\nlet getNotes = async () =&gt; {\n    let response = await fetch('/notes')\n    let data = await response.json()\n    setNotes(data)\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#controlled-components","title":"Controlled components","text":"<p>Controlled components use States to have more predictable behaviour.</p> <pre><code>function ControlledInput(){\n    const [value,setValue] = useState('')\n\n\n    return(\n        &lt;input\n        value={value}\n        onChange={(e)=&gt;setValue(e.target.value)}\n        /&gt;\n    )\n}\n</code></pre> <p>The value tiped into the input is being put into state and controlled by state variable value. What is happening:</p> <ul> <li>User types and <code>setValue</code> puts what is tiped into State.</li> <li>The state <code>value</code> is updated</li> <li>Input uses the updated state as its value</li> </ul> <p>Great pattern to use because we want to change the components behaviour we just need to change the state that controls it.</p> <p>The state update will trigger component lifecycle effect.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#component-lifecycle","title":"Component Lifecycle","text":"<p>A component in React has lifecycle that it goes through. Three main phases:</p> <ul> <li>Mounting Phase - When it gets added to the DOM</li> <li>Updating Phase - When we are modifying something and that component needs to update.</li> <li>Unmoting Phase - When this component gets removed from the DOM.</li> </ul>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#class-components","title":"Class components","text":"<p>Methods to take care of Phases</p> <pre><code>componentDidMount(){\n    //Component mounted\n}\n\ncomponentDidUpdate(){\n    //Finished component updating\n}\n\ncomponentWillUnmount(){\n    //Component is being removed from DOM\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#functional-components","title":"Functional components","text":"<p><code>useEffect()</code> method allows us to handle each of the components lifecycle</p> <pre><code>useEffect(()=&gt; {\n    //Manage lifecycles\n},[Dependencies])\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#hooks","title":"Hooks","text":"<p>React Hooks allow us to hook into features such as <code>useState</code> within function components. Only apply to functional components. Hooks led us add State and other features without using class based components. Before Hooks functional components couldn't hold states. Hooks are functions that allow us to hook into and manage States.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#state-hooks","title":"State hooks","text":"<p>Help you manage state within react components. <code>useState()</code> - Set &amp; update states <code>useReducer()</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#context-hooks","title":"Context Hooks","text":"<p>Let you use data passed through React Context <code>useContext()</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#ref-hooks","title":"Ref Hooks","text":"<p>Let's you reference things like HTML elements</p> <p><code>useRef()</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#effect-hooks","title":"Effect Hooks","text":"<p>Let's you connect with external systems like browser apis <code>useEffect()</code> - Perform side effects in lifecycle</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#performance-hooks","title":"Performance Hooks","text":"<p>Improve performance by preventing unnecessary work. <code>useMemo()</code> <code>useCallback()</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#purity","title":"Purity","text":"<p>Pure react components mean that the same input should always return the same output. To keep a component pure they should only return JSX and Don't change objects or variables that existed before rendering.</p> <p>The <code>Cup</code> component is impure because it changes the variable inside of render. Which exists outside the component. This leads the JSX to have the wrong output when the component is used multiple times.</p> <pre><code>let count = 0\nfunction Cup(){\n    count = count+1\n    return &lt;h2&gt;Cup {count}&lt;/h2&gt;\n}\n</code></pre> <p>To avoid these errors we can use something like Strict mode. Strict Mode is a special component which tells us about our mistakes while we develop our app. We just wrap it around our <code>&lt;App/&gt;</code> component.</p> <pre><code>import {StrictMode} from 'react'\n...\n&lt;StrictMode&gt;\n&lt;App/&gt;\n&lt;/StrictMode&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#execute-something-outside-our-reactapp","title":"Execute something outside our ReactApp","text":"<p>Talk to browser API or make a request to server we use Effects. It is code that reaches outside of our React app. Usually effects also called side effects can be done in event handlers. For example make a HTTP Request when user submits a form.</p> <pre><code>function handleSubmit(e){\n    e.preventDefault()\n    post('api/register', {email,password})\n}\n</code></pre> <p>If you can't run your side effect in a event handler you can use <code>useEffect()</code> hook. For example fetch data when a component first loads.</p> <pre><code>useEffect(()=&gt;{\n    fetchData().then(data =&gt; {\n        //use data here\n    })\n},[])\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#refs","title":"Refs","text":"<p>To step outside of React and work directly with the DOM. To reference an actual DOM element you can use what is called <code>ref</code>. You can create a <code>ref</code> with the <code>useRef()</code>hook and to get access to a DOM element use the <code>ref</code>prop on any React element.</p> <pre><code>const ref = useRef()\n\n&lt;input ref={ref}/&gt;\n</code></pre> <p>For some tasks, such as fokusing an input, it is easier to reference the actual DOM element instead of doing it the React way. <code>ref.current.focus()</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#context","title":"Context","text":"<p>A way to pass prop data through apps components. Most of React Apps have a lot of nested components. To not need to pass props through every child component, that not even need the data, just to get the data in the n-th child we can use <code>Context</code>. It lets us jump to where the data is needed without making props.</p> <p>To use <code>Context</code></p> <ul> <li> <ol> <li>Create context in parent component: <code>const AppContext = createContext()</code></li> </ol> </li> <li> <ol> <li>Wrap component in special component called <code>.Provider</code>:</li> </ol> </li> </ul> <pre><code>&lt;AppContext.Provider&gt;\n    &lt;App/&gt;\n&lt;/AppContext.Provider&gt;\n</code></pre> <ul> <li> <ol> <li>Put the data you want to pass down on a provider      <code>&lt;AppContext.Provider value=\"Hola\"&gt;</code></li> </ol> </li> <li> <ol> <li>Access data within any child component with the <code>useContext()</code> hook.</li> </ol> </li> </ul> <pre><code>function Title(){\n    const text = useContext(AppContext)\n    return &lt;h1&gt;{text}&lt;/h1&gt;\n}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#portals","title":"Portals","text":"<p>Are like Context but for components. They let you move React components into any HTML element that you select. They are great for components that can't be displayed properly because of their parents components styles. For example for displaying modals, dropdowns and tooltips.</p> <p>To create a portal use <code>createPortal()</code> function, pass the component to it, and choose the html element where you like your React component to appear.</p> <pre><code>&lt;div&gt;\n    &lt;p&gt; I'm in the parent div.&lt;/p&gt;\n    {createPortal(\n        &lt;p&gt; I'm in the document body&lt;/p&gt;,\n        document.body\n    )}\n    &lt;/div&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#suspense","title":"Suspense","text":"<p>Special component that helps you loading a component or its data. Here show loading component while loading the component.</p> <pre><code>&lt;Suspense fallback ={&lt;Loading/&gt;}&gt;\n&lt;Component/&gt;\n&lt;/Suspense&gt;\n</code></pre> <p><code>Suspense</code> is helpful for components that need some time to fetch data. Provides a better user experience. It is also usefull if you lazily load a component. Lazily loading lets us load a component only when it is needed.</p> <pre><code>//For lazy-loading component\n\nconst Component = lazy(\n    ()=&gt;import('./Component')\n)\n\n&lt;Suspense fallback={&lt;Loading/&gt;}&gt;\n&lt;Component&gt;\n&lt;/Suspense&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#error-boundaries","title":"Error Boundaries","text":"<p>Error boundaries let you catch app-breaking errors and show a fallback component to tell the user what happened.</p> <pre><code>import {ErrorBoundary} from 'react-error-boundary'\nfunction Fallback({error}){\n    return(\n        &lt;div role=\"alert\"&gt;\n        &lt;p&gt; No user provided:&lt;/p&gt;\n        &lt;pre&gt;{error.message}&lt;/pre&gt;\n        &lt;/div&gt;\n    );\n}\n\n&lt;ErrorBoundary FallbackComponent={Fallback}&gt;\n&lt;App/&gt;\n&lt;/ErrorBoundary&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#state-managment","title":"State Managment","text":"<p>It makes sense to have Component Sate for the single component and Global State to manage multiple components.</p> <p>We can use the build in Context API or a third party package like Redux.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#virtual-dom","title":"Virtual DOM","text":"<p>React creates a virtual DOM which is a virtual representation of the real DOM. When we are updating our components we actually updating the virutal DOM not the real DOM. This enables that React can figure out the most performant way to update only the elements that changed instead of updating the whole DOM.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#keyprop","title":"KeyProp","text":"<p>Key is a unique number or string to identify a component. Each item in a dynamically rendered list needs a key prop or you get an error `Warning: Each child in an array or iterator should havd a unique \"key\" prop.</p> <pre><code>&lt;ul&gt;\n    {notes.map(note =&gt; (\n        &lt;li key={note.id}&gt;{note.title}&lt;/li&gt;\n    ))}\n&lt;/ul&gt;\n</code></pre> <p>If you don't have a unique value you can use the current index inside the map function.</p> <pre><code>{items.map((item,index) =&gt; (\n    &lt;div key={index}&gt;{item}&lt;/div&gt;\n))}\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#event-listeners","title":"Event Listeners","text":"<p>Handling Events in React is similar to handle events in traditional JS with some differences. <code>&lt;li onClick={openNote}&gt;</code> There is no need for methods like <code>addEventListener('click',openNote)</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#forms","title":"Forms","text":"<p>Handling forms in React is differnt from the HTML way, because we want to hold our information in a State inside our component. HTML elements like <code>&lt;input&gt;,&lt;select&gt;</code> normally maintain and update there state based on the user input. With react we add event listeners to each field and update our component state whenever one of these imputs change. <code>OnChange</code> or <code>submit</code> would directly update our state and controlled by our own function <code>handleSubmit</code> instead of letting the form handle it on its own.</p> <pre><code>&lt;form onSubmit={handleSubmit}&gt;\n    &lt;input type=\"text\" onChange={updateNoteValue} value={note}/&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#conditional-rendering","title":"Conditional Rendering","text":"<p>When you want to render components depending of the state of other values inside your app. For example <code>if user logged in show different icon than when user not logged in</code>.</p> <p>A way to handling this are Logical &amp;&amp; Operator.</p> <pre><code>return(\n    &lt;div&gt;\n    {userIsLoggedIn &amp;&amp; &lt;Span&gt; Hello {user.name}&lt;/span&gt;}\n    &lt;/div&gt;\n)\n</code></pre> <p>or the inline if else conditional operator for some extra logic.</p> <pre><code>return(\n    &lt;div&gt;\n    {userIsLoggedIn ? (\n        &lt;span&gt; Hi {user.name}&lt;/span&gt;\n    ):(\n        &lt;span&gt; Please Login&gt;&lt;/span&gt;\n\n    )}\n    &lt;/div&gt;\n)\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#commands","title":"Commands","text":"<p>Create React app <code>npx create-react-app &lt;appName&gt;</code></p> <p>Start development server <code>npm start</code></p> <p>Create optimized build of app <code>npm run build</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/React/#source","title":"Source","text":"<p>The information are from: Dennis Ivy Youtube</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/","title":"React FirebseDatabase","text":"<p>If you need router <code>npm install react-router-dom</code></p> <p>To use Environment files to store your keys <code>npm install dotenv</code></p> <p>For Firebase <code>npm install firebase</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#connect-react-to-firebase","title":"Connect React to Firebase","text":"<p>Create new Firebase Project</p> <p>Register an App in firebase for web</p> <p>Go to realtime database and setup the database - creating the database.</p> <p>Change database rules to  .read :true .write : true</p> <p>Grab firebase configurations by clicking on whe gear settings We need the database url  also we can copy the code to </p> <p>Create in <code>src</code> a file. <code>firebaseConfig.js</code></p> <p>Add <code>databaseURL:</code> parameter in the the firebaseConfig object You can find the databaseURL in the Realtime Database window its the <code>htpps://fir.-number-default...</code> next to the link sign</p> <p>Add it in the object</p> <p>We should save the important data of firebase config inside an .env file Don't change the naming in the file. pass the data from the <code>firebaseConfig</code> into the env <pre><code>6. create a dotenv file at the root of your project:\nREACT_APP_FIREBASE_API_KEY=\"...\"\nREACT_APP_FIREBASE_AUTH_DOMAIN=\"...\"\nREACT_APP_FIREBASE_DATABASE_URL=\"a..\"\nREACT_APP_FIREBASE_PROJECT_ID=\"..\"\nREACT_APP_FIREBASE_STORAGE_BUCKET=\"...\"\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"...\"\nREACT_APP_FIREBASE_APP_ID=\"...\"\nREACT_APP_FIREBASE_MEASUREMENT_ID=\"...\"\n</code></pre></p> <p>Now pass the REACT_APP_FIREBASE_API_KEY etc variables and pass them into <code>firebaseConfig.js</code></p> <p>Don't forget to add  <code>export default firebaseConfig</code> in the <code>firebaseConfig.js</code></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#write","title":"Write","text":"<p>Create a Write Component <code>Write.ts</code></p> <pre><code>import app from '../firebaseConfig'\nimport React, {useState} from 'react'\nimport {getDatabase,ref,set,push} from \"firebase/database\"\n\nconst saveData = async () =&gt; {\n    //Get the database\n    const db = getDatabase()\n    //Define what and where we push/save the data\n    //we reference the database db, with \"nature/fruits\" we create a folder and subfolder where e store the data in\n    const newDocRef = push(ref(db, \"nature/fruits\"))\n    // To save the data we use set and define where we are saving the data in the database with the newDocRef and what we save in the object\n    set(newDocRef, {\n        fruitName: inputValue1,\n        fruitDefinition:inputValue2\n    }).then(()=&gt; {\n        ///When successful\n        alert(\"data saved successfully\")\n    }).catch((error) =&gt; {\n        //When not successful\n        alert(\"error: \", error.message)\n    })\n}\n\n\nfunction Write(){\n    const [inputVal,setInputVal] = useState(\"\");\n    const [inputVal2,setInputVal2] = useState(\"\");\n    return (\n        &lt;div&gt;\n        &lt;input type=\"text\" value={inputVal} onChange={(e)=&gt;setInputVal(e.target.value)}/&gt;\n        &lt;input type=\"text\" value={inputVal2} onChange={(e)=&gt;setInputVal2(e.target.value)}/&gt;\n\n        &lt;button onClick={saveData}&gt;Save Data &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <p>Important to add to your <code>.gitignore</code> to ignore the .env file otherwise you get problems when you host it</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#read","title":"Read","text":"<p>Create a <code>Read.js</code> compontent <code>rfce</code></p> <p>Now we need to import the <code>get</code> function from firebase <pre><code>import {getDatabase,ref,get} from 'firebase/database'\nimport app from '../firebaseConfig'\n\nfunction Read() {\n    let {fruitArray, setFruitArray} = useState([]);\n\n    const fetchData = async () =&gt; {\n        const db = getDatabase(app);\n        //create a reference where the data is - database - folder structure\n        const dbRef = ref(db,\"nature/fruits\");\n        // make a snapshot\n        const snapshot = await get(dbRef);\n\n        if(snapshot.exists()){\n            setFruitArray(Object.values(snapshot.val()))\n        } else {\n            alert(\"error\")\n        }\n    }\n\n    return(\n        &lt;div&gt;\n            &lt;button onClick={fetchData}&gt;Display Data&lt;/button&gt;\n            &lt;&gt;\n            &lt;ul&gt;\n            {\n                fruitArray.map((item,index)=&gt; (\n                    &lt;li key= {index}&gt;\n                    {item.fruitName}: {item.fruitDefinition}\n                    &lt;/li&gt;\n                ))}\n                &lt;/&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <code>snapshot.val()</code> gets the data from the database but with the uuid like <pre><code>BEFORE SNAPSHOT.VAL() -- JSON LIKE FORMAT\n{\n  \"fruit1Id\": {\n    fruitName: \"apple\", \n    fruitDefinition: \"red fruit\"\n  },\n  \"fruit2Id\": {\n    fruitName: \"banana\",\n    fruitDefinition: \"yellow  fruit\"\n  }\n}\n\n\nAFTER SNAPSHOT.VAL() -- JAVASCRIPT OBJECT\n{\n    \"fruit1Id\": {\n      fruitName: \"apple\",\n      fruitDefinition: \"red fruit\"\n    },\n    \"fruit2Id\": {\n      fruitName: \"banana\",\n      fruitDefinition: \"yellow  fruit\"\n    }\n}\n\nOPTION 1: AFTER OBJECT.VALUES(SNAPSHOT.VAL()) -- AN ARRAY OF JAVASCRIPT OBJECTS\n[\n    {\n      fruitName: \"apple\",\n      fruitDefinition: \"red fruit\"\n    },\n    {\n      fruitName: \"banana\",\n      fruitDefinition: \"yellow  fruit\",\n      fruitId: \"fefwef2f\"\n    }\n]\n</code></pre></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#update-data","title":"Update Data","text":"<p>So we need to grab the unique identification number of the data and then display it on the frontadd</p> <p>So you don't want to rewrite everything every time so you grad the element with the uuid and then change only that one.</p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#update-read","title":"Update Read","text":"<p><code>UpdateRead.js</code></p> <p>To get the keys of an element from our database we can call <code>Object.Keys</code> this give us the key of the element <pre><code>AFTER CALLING OBJECT.KEYS(SNAPSHOT.VAL())\n[\n  \"-NfCnDYK3ZUCQgQ90A1b\",\n  \"-NfCnDYK3ZUCQgQ90C3c\"\n] \n</code></pre></p> <pre><code>...\nconst fetchData = () =&gt; {\n    const db = getDatabase(app);\n    const dbRef = ref(db,\"nature/fruits\");\n    const snapshot = await get(dbRef);\n    if(snapshot.exists()){\n        const myData = snapshot.val();\n        //Object.key Gives us an array of the uuids of our elements\n        const tempArray = Object.key(myData).map(fireUUID =&gt; {\n            return {\n                //this will return the object fields from the json\n                ...myData[fireUUID],\n                elementID:fireUUID//adding a UUID field for the new array\n            }\n        })\n        setFruitArray(temporaryArray);\n    } else {\n        alert(\"error\")\n    }\n}\nreturn(\n    ...\n    {item.elementID}\n)\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#update-write","title":"Update Write","text":"<p>Update write component When we update data most of the time we want to show the currently data for that we first fetch the data in an <code>useEffect()</code> <pre><code>...\n\nuseEffect(()=&gt; {\n    const fetchData = async () =&gt; {\n        const db = getDatabase(app);\n        const dbRef = ref(db, \"nature/fruits/\"+UUIDElement);\n        const snapshot = await get(dbRef);\n        if(snapshot.exists()) {\n            const targetObject = snapshot.val()\n            setInputValue1(targetObject.fruitName)\n            setInputValue2(targetObject.fruitDescription)\n        }else {\n            alert(\"error\")\n        }\n    }\n    fetchData();\n})\n\nconst overWriteData = async () =&gt; {\n    const db = getDatabase(app);\n    const newDocRef = ref(db, \"nature/fruits/\"+UUIDElement);\n    set(newDocRef, {\n        fruitName:inputValue1,\n        fruitDefintion:inputValue2\n    }).then(()=&gt; {\n        alert(\"data uptaded successfullY\")\n    }).catch((error)=&gt; {\n        alert(\"Error:\", error.message)\n    })\n}\n</code></pre></p>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/ReactFirebaseDatabase/#delete-data","title":"Delete Data","text":"<pre><code>import {getDatabase,ref,get,remove} from 'firebase/database'\n\nconst deleteFruit = async (UUID) =&gt; {\n    const db = getDatabase(app);\n    const dbRef = ref(db, \"nature/fruits/\"+UUID)\n    await remove(dbRef);\n    window.location.reloat();\n}\n...\n\n&lt;button onClick={deleteFruit}&gt;Delete&lt;/button&gt;\n</code></pre>","tags":["JavaScript","JavaScript/React","React"]},{"location":"topics/JavaScript/React/RoutingReact/","title":"Routing in React","text":"<p>In the <code>main.tsx</code> first import <code>createBrowserRouter</code> from <code>react-router-dom</code>.</p> <p>Then we create a <code>router</code> object <code>createRouter = createBrowserRouter([])</code></p> <p>So we exchange the <code>App.tsx</code> with our router.</p> <pre><code>import {RouterProvider} from 'react-router-dom'\n\n...\n\n&lt;RouterProvider router={router}/&gt;\n</code></pre> <p>This deffer the entry point to the application to react router.</p> <p>Next step is to create a route in the Browser router</p> <pre><code>const router = createBrowserRouter([\n    {\n        path:'/',//Index path of our application\n        element:&lt;HomePage/&gt;,\n        errorElement:&lt;NotFoundPage/&gt;\n    },\n    {\n        path:'/profiles',\n        element:&lt;ProfilesPage/&gt;\n    }\n])\n</code></pre> <p>You also can add an Error element which leads to a default error site when the address is not available - like 404</p> <p>In React Router there is a specific way to handle links. You use the <code>Link</code> component. <code>&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;</code></p> <p>Info from other tutorial <code>npm install react-router-dom</code></p> <p><code>import {BrowserRouter as Router,Route,Routes} from \"react-router-dom\"</code></p> <pre><code>&lt;Router&gt;\n&lt;Routes&gt;\n    &lt;Route path=\"/\" element={&lt;Write/&gt;}&gt;\n    &lt;Route path=\"/write\" element={&lt;Write/&gt;}&gt;\n&lt;/Routes&gt;\n&lt;/Router&gt;\n</code></pre> <p>We then can use on the other sides <pre><code>import {useNavigate} from 'react-router-dom'\n...\n\nconst navigate = useNavigate();\n...\n&lt;button onClick={()=&gt;navigate(\"/\")}&gt;Go Homepage&lt;/button&gt;\n</code></pre></p>","tags":["Typescript","ReactNative","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/","title":"Setup Three.JS in React","text":"<p><code>npm install three</code></p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#basic-scene","title":"Basic Scene","text":"<p>All we need to show a three.js scene is a <code>&lt;canvas id=\"threeJSCanvas\"&gt;&lt;/canvas&gt;</code> element.</p> <p>You want to run and setup your Three js once the canvas has loaded fully. For that we use <code>useEffect()</code></p> <pre><code>import * as THREE from 'three'\n\nuseEffect(() =&gt; {\n    //1. setup scene\n    const scene = new THREE.Scene();\n\n    //2. setup camera\n    const camera = new THREE.PerspectiveCamera(\n        50,\n        window.innerWidth/window,innerHeight,\n        1,\n        1000\n    )\n    camera.position.z = 96;\n\n    //3. initialise Renderer\n    const canvas = document.getElementByID('myThreeJSCanvas');\n    const renderer = new THREE.WEBGLRenderer({\n        canvas,\n        antialias:true,\n    })\n    renderer.setSize(window.innerWidth,window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    //4. Lighting - color, intensity\n    const ambientLight = new THREE.AmbientLight(0xfffffdf,0.5);\n    ambientLight.castShadow = true;\n    scene.add(ambientLight);\n\n    const spotLight = new Three.SpotLight(0xffffff,1);\n    spotLight.castShadow = true;\n    spotLight.position.set(0,64,32);\n    scene.add(spotLight);\n\n\n    //5. Animation\n    const animate = () =&gt; {\n        //Run this every frame\n        renderer.render(scene,camera);\n        window.requestAnimationFrame(animate);\n    };\n    animate();\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#add-basic-cube","title":"Add basic cube","text":"<pre><code>...\nconst boxGeo = new THREE.BoxGeometry(16,16,16);\nconst boxMaterial = new THREE.MeshNormalMaterial();\nconst boxMesh = new THREE.Mesh(boxGeometry,boxMaterial);\nscene.add(boxMesh);\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#animate-shape","title":"Animate Shape","text":"<pre><code>const animate = () =&gt; {\n    boxMesh.rotation.x += 0.01;\n    boxMesh.rotation.y += 0.01;\n\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#orbit-control","title":"Orbit control","text":"<pre><code>import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\n...\nconst controls = new OrbitControls(camera,renderer.domElement);\n\n...\nconst animate = () =&gt; {\n    controls.update();\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#stats","title":"Stats","text":"<pre><code>import Stats from 'three/examples/jsm/libs/stats.module'\n\n...\nconst stats = Stats();\ndocument.body.appendChild(stats.dom);\n\n\nconst animate = () =&gt; {\n    stats.update()\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#refactor-code-into-class","title":"Refactor Code into Class","text":"","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/SetupThreeJSReact/#resize-canvas-when-window-size-changes","title":"Resize canvas when window size changes","text":"<p><code>window.addEventListener('resize', ()=&gt; onWindowResize(),false)</code></p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/","title":"Basics","text":"<p>React is a JS library for building dynamic and interactive user-interfaces.</p> <p>With React we describe a webpage with small reusuable components and react will take care of creating efficient DOM elements.</p> <p>Components help us write reusuable, modular and better organized code.</p> <p>We build components individually and then combine them to build the page.</p> <p>React app is a tree of components with the <code>App.js</code> bringing all together.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#setup-development-environment","title":"Setup development environment","text":"<p>You need node 16 or higher. <code>node -v</code> to check your version.</p> <p>Prettier Code format extension for formatting code. Then preferences settings - format on save</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#create-a-react-app","title":"Create a React App","text":"<p>We can use Create React APP (CRA) or Vite Vite has the advantage of being faster and smaller bundle sizes.</p> <p>To use Vite <code>npm create vite@latest</code> or when you want a specific version <code>npm create vite@4.1.0</code></p> <p>Then select the framework - choose React and JS or Typescript</p> <p>Then move into folder and install <code>npm install</code> all dependencies and run the development server <code>npm run dev</code></p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#project-structure","title":"Project structure","text":"<p>node_modules folder - where all the third party libraries are installed</p> <p>public folder - where public assets lie - videos, images etc.</p> <p>src folder - source code of application</p> <p>app.tsx is the app component.</p> <p>index.html - html template contains div with container for application.</p> <p>main.tsx - entry point to application</p> <p>package.json - info about the application</p> <p>tsconfig.json - typescript configuration file - telling the compiler how to compile code to JS.</p> <p>vite-config.ts - configuration file for vite</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#create-a-react-component","title":"Create a React Component","text":"<p>Extention of typescript files should ether be <code>.ts</code> or <code>.tsx</code> <code>.ts</code> for plain typescript files <code>.tsx</code> for react components.</p> <p>There are two ways to create a component. As a JS class or as a function. Today many use functions based components because they are easier to write.</p> <p>We declare a function with <code>PascalCasing</code> because React expects it.</p> <pre><code>function Message(){\n//what does the UI look like\n//JSX: Javascript XML\nreturn &lt;h1&gt;Hello World&lt;/h1&gt;\n\n//To use the component somewhere else you need to export it\nexport default Message;\n}\n</code></pre> <p>At babeljs.io you can see how the code gets converted to JS.</p> <p>If you now want to use the component in your <code>App.tsx</code> you need to import it.</p> <pre><code>import Message from './Message'\n\nfunction App(){\n    return &lt;div&gt;&lt;Message/&gt;&lt;/div&gt;\n}\nexport default App\n</code></pre> <p>To implement values or functions in to the code</p> <pre><code>function Message(){\n    const Name = 'myName'\n    if (name)\n        return &lt;h1&gt;{Name}&lt;/h1&gt;\n    return &lt;h1&gt;Hello world&lt;/h1&gt;\nexport default Message;\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#how-react-works","title":"How React works","text":"<p>The App component is the Root component of the app and the message as a child. When the application starts React takes the components tree and builds a JS data structure called the Virtual DOM which is a lightweight in memory representation of the component tree which each node represents a component and its properties.</p> <p>When the state or data of a component changes React updates the corresponding node in the virtual DOM to reflect the new state then compares the current version of the virtual DOM with the previous version to identify what nodes need to be updated. It will then update those nodes in the actual DOM. The updating of the DOM gets done by <code>react-dom</code> library.</p> <p>In <code>main.tsx</code> we use <code>ReactDOM</code> to render the component tree inside of an element with the id root.</p> <p><code>React.StrictMode</code> is a component that doesn't get rendered and it is used to identify potential problems.</p> <p>So we render the structure via the <code>ReactDom.createRoot</code>. We also could render it via <code>React Native</code> for mobile phones etc.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#library-vs-framework","title":"Library vs Framework","text":"<p>A Library is a tool that provides specific functionality. A Framework is a set of tools and guidelines for building apps</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#routing","title":"Routing","text":"<p>Navigation from one page to another.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#importing-other-libraries-and-frameworks","title":"Importing other libraries and frameworks","text":"<p>We can for example import other libraries like Bootstrap to make the styling of the website easier.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#create-a-list-group-component","title":"Create a List group component","text":"<p>Inside the components folder we can create a new file <code>ListGroup.tsx</code> and borrow some code from Bootstrap</p> <pre><code>function ListGroup(){\n\n    return (\n        &lt;h1&gt;List&lt;/h1&gt;//React.createElement(\"h1\")\n        &lt;ul className = \"list-group\"&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n\n        &lt;/ul&gt;\n    )\n};\nexport default ListGroup\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#fragments","title":"Fragments","text":"<p>In React a component can't return more than one element that means we need to wrap all the elements inside one element that the component can return. We could use a <code>&lt;div&gt;</code> but that creates an extra element in the DOM which we try to avoid. For that there are React <code>Fragment</code>. They also wrap the JSX content but don't create an extra DOM element.</p> <pre><code>import {Fragment} from 'react';\nfunction ListGroup(){\n    return(\n        &lt;Fragment&gt;\n        &lt;h1&gt;List&lt;/h1&gt;\n        &lt;ul className = \"list-group\"&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n\n        &lt;/ul&gt;\n        &lt;/Fragment&gt;\n    )\n}\n</code></pre> <p>But there is even a shorter version of that to tell React without needing to import <code>Fragment</code>. We can use <code>&lt;&gt;</code> brackets</p> <pre><code>function ListGroup(){\n    return(\n        &lt;&gt;\n        &lt;h1&gt;List&lt;/h1&gt;\n        &lt;ul className = \"list-group\"&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n            &lt;li className=\"list-group-item\"&gt;An item&lt;/li&gt;\n\n        &lt;/ul&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#render-list-dynamically","title":"Render List dynamically","text":"<p>In React we don't have a for loop to for example go through all elements of data and show it on the screen. But we can use the JS Array function <code>.map()</code> that is used to convert each item into an item of a different type.</p> <p>So we can take each item of our data and convert it into a JSX <code>&lt;li&gt;</code>element. It is important that we map each item with a specific <code>key</code> property that uniquely identifies that item. React needs it to keep track of all the items.</p> <pre><code>function ListGroup(){\n    const data = [\"London\",\"Paris\",\"Milan\",\"Madrid\"]\n    return (\n        &lt;&gt;\n        &lt;ul className = \"list-group\"&gt;\n            {data.map((item)=&gt;(\n                &lt;li key={item}&gt;{item}&lt;/li&gt;\n            ))}\n        &lt;/ul&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>In JSX we only can use HTML elements or other React components. We can't just write expressions inside a JSX markup. We need to wrap it with <code>{}</code>.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#conditional-rendering","title":"Conditional Rendering","text":"<p>In JSX we can't write if statements to for example show things dynamically. So we again can wrap components and parts of our code in <code>{}</code> to create expressions inside to decide what gets rendered. To also not fill up out JSX we can save it in a variable outside of it and just reference it. We are using ternary expression so we can return null (item is not gonna get shown) if a condition is not true. Or we also can move the logic inside a function. This allows us to use parameters and show different messages depending on the parameter. If you don't use any parameters just use the const variable.</p> <pre><code>function ListGroup(){\n    const data ...\n    const message = items.length === 0 ? &lt;p&gt; No item found&lt;/p&gt; : null\n    // const getMessage = () =&gt; {\n    //     items.length === 0 ? &lt;p&gt; No item found&lt;/p&gt; : null\n    // }\n    return(\n        &lt;&gt;\n        &lt;h1&gt;List&lt;/h1&gt;\n        {message}\n        &lt;ul className=\"list-group\"&gt;\n            {items.map((item,index)=&gt;(\n                &lt;li className=\"list-group-item\" key={item}&gt;{item + ` `+index}&lt;/li&gt;\n            ))}\n\n        &lt;/ul&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>There is a better way to write the code so we don't have to write the <code>: null</code> at the end. So we take the condition but instead of using the ternary operator <code>?</code> we use a logical <code>&amp;&amp;</code> and the element we want to return if this condition is true. <code>{items.length === 0 &amp;&amp; &lt;p&gt;No items found&lt;/p&gt;}</code></p> <p>So it works because if the first expression is true the result of the whole expression will be the second part.</p> <p><code>true &amp;&amp; 'hallo' -&gt; hallo</code></p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#check-if-element-is-not-empty","title":"Check if element is not empty","text":"<pre><code>&lt;div className=\"Link-button\"&gt;\n  {project.url &amp;&amp; (\n    &lt;a href={project.url}&gt;Link&lt;/a&gt;\n  )}\n&lt;/div&gt;\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#handling-events","title":"Handling events","text":"<p>In React each element has a prop(erty) <code>onClick={}</code> we can ether write an expression inside of that or we reference a function.</p> <pre><code>...\n{items.map((item,index)=&gt;(\n    &lt;li key ={item} className=\"list-group-item\" onClick={()=&gt;console.log(item,index)}&gt;\n    {item}\n    &lt;/li&gt;\n))}\n</code></pre> <p>The arrow function <code>()=&gt;</code> can have a parameter that represents the browser event with <code>e</code> or <code>event</code> <code>(e)=&gt; console.log(event)</code> With that we get properties of the object which contain for example the clicked <code>target</code> object or the position where we clicked.</p> <p>To leave the code more easier to grasp we should move the logic into it's own function.</p> <pre><code>...\nconst handleClick = (event) =&gt; {\n    console.log(event)\n}\n</code></pre> <p>But this code would give us an error in typescript. <code>Parameter ``event`` implicitly has an ``any`` type</code>. That meets the Typescript compiler doesn't know the type of this parameter. So we need to specify the type of our parameter to get type safety and also autocompletion for parameters.</p> <p>We can hover over the parameter in the JSX Version to see the type of the event</p> <pre><code>&lt;li onClick={(event)=&gt;console.log(event)}&gt;\n</code></pre> <p>We then see that event is <code>React.MouseEvent</code> type. So to avoid the error in our function we need to first import the Reference into our component <code>import {MouseEvent} from 'react'</code>. And then specify the <code>event:MouseEvent</code> so typescript knows the type. This is called Type annotation in React.</p> <p>We then reference the function in the <code>onClick={handleClick}</code> property.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#managing-state","title":"Managing State","text":"<p>If we have a variable that keeps track of a selected index it makes sense to initialize it with the index <code>-1</code> <code>let selectedIndex = -1</code></p> <p>We then can use it for example render elements with different classes. For example active class or non active class</p> <pre><code>...\n{items.map((item,index)=&gt;(\n    &lt;li\n    className={selectedIndex === index ? \"list-group-item active\":\"list-group-item\"}&gt;...&lt;/li&gt;\n))}\n</code></pre> <p>When we click on an item, we then can change the index of the selected item.</p> <p>The variables that you declare in your component is local to that component. That means that React is not aware of it. So to make the variable available and be usable by React we tell it that this component has data or state that are changing over time. To do that we use a build in function from React <code>useState()</code>. The <code>useState()</code> function is a Hook which are functions that allow us to access build-in React functionality.</p> <p>To declare that variable we can set the initial value in the round brackets. <code>useState</code> returns an array with two elements:</p> <pre><code>const arr = useState(-1);\narr[0]//variable(selectedIndex)\narr[1]//updater Function to update the variable state\n\n//we destructure the array into two elements\nconst [selectedIndex,setSelectedIndex] = useState(-1);\n</code></pre> <p>When we use the updater function React will be notified and it knows that the state of our component has changed which leads to rerendering that component which also causes the DOM to be updated.</p> <p>Generally about state - each component has its own state. So if we for example have two of the components in your App() each of the component has it's own state.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#passing-data-via-props","title":"Passing Data via Props","text":"<p>To make a component reusable we use Props so we can insert information into an component. So for example we should be able to pass the data into our component so we can use the same component for different data.</p> <p>First we need to decide the structure of the input that we want to pass into the component. For example we want to pass and object with two properties <code>{items:[],heading:string}</code> We can use a Typescript feature <code>interface</code></p> <pre><code>interface Props{\n    items:string[];\n    heading:string;\n}\n\nfunction ListGroup(props:Props){\n    ...\n    {props.items.length ...}\n}\n\n// To avoid the props keyword we also can decontruct it in the function declaration\n\nfunction ListGroup({items,heading}:Props){\n    items....\n\n}\n\n\n// in the Parent component\n\nfunction App(){\n\n    return(\n        &lt;div&gt;\n        &lt;ListGroup items={items} heading=\"Cities\"&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#passing-functions-via-props","title":"Passing Functions via Props","text":"<p>Often in projects we want something to happen after for example an item gets selected. Because we want a reusable component we don't want to handle that behavior inside the component but outside of the component.</p> <p>So we need a mechanism to notify the consumer/parent of the component that an item is selected. We can implement a function in the Props interface that notifies the parent that something happened. So when an item gets selected we call the function and then the App component will get notified.</p> <pre><code>interface Props{\n    items:string[];\n    heading:string;\n    onSelectItem: (item:string)=&gt; void;\n}\nfunction ListGroup({items,heading,onSelectItem}){\n    &lt;li\n\n    onClick={()=&gt; {\n        setSelectedIndex(index);\n        onSelectItem(item);\n    }}\n    &gt;\n}\n...\nfunction App(){\n    data ...\n\n    const handleSelectItem = (item:string) =&gt; {\n        console.log(item)\n    }\n    return(\n        &lt;div&gt;\n        &lt;ListGroup items={data} heading={\"cities\"} onSelectItem={handleSelectItem}&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#trigger-something-in-the-parent-when-the-child-is-clicked","title":"Trigger something in the parent when the child is clicked","text":"<p>To trigger something in the parent component when a button is clicked in your child component, you need to pass down a callback function as a prop. Here's how to implement this for your animated filter buttons:</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#state-vs-props","title":"State vs. Props","text":"Props State Input passed to a component, Similar to function args Data managed by a component, Similar to local variables Treat them as immutable(Read only) Mutable - data that changes over time Everytime they change it will causes re-render of the DOM","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#passing-children","title":"Passing Children","text":"<p>Sometimes we want to pass children to a component.</p> <p>When you have the ES7+ extension installed in VSCode you can use <code>rafce</code> to create the basic structure. It stands for \"React Arrow function component export\".</p> <p>Sometimes we want to pass html code or just text as a children to a component. For that we add <code>children</code> to the Props interface. We ether can specifically assign like string for the children type. But if we want to be able to pass Html we should use <code>ReactNode</code>.</p> <pre><code>import {ReactNode} from 'react';\n\ninterface Props {\n    children:ReactNode\n}\n\nconst Alert = ({children:Props}) =&gt; {\n    return (\n        &lt;div className=\"alert alert-primary\"&gt;{children}&lt;/div&gt;\n    )\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#inspect-components-with-react-developer-tools","title":"Inspect components with React Developer tools","text":"<p>React Developer Tools is an use extension for the browser.</p>","tags":["Javascript","React"]},{"location":"topics/JavaScript/React/basics/#giving-props-default-value","title":"Giving Props default value","text":"<p>If we want to give one of our props a default value we can set it in the component parameter field</p> <pre><code>interface Props{\n    color?:string;\n\n}\n\nconst Button = ({color = 'primary'}:Props){\n\n}\n</code></pre> <p>To avoid that we have to specify the default value in the component we can set it as optional with the <code>?</code> after color</p> <p><code>&lt;Button ...&gt;</code> no color specification necessary.</p> <p>To define which values a certain property can take we define in the interface the possible values.</p> <pre><code>interface Props{\n    color?: 'Primary'|'secondary'|'danger'\n}\n</code></pre>","tags":["Javascript","React"]},{"location":"topics/JavaScript/ReactNative/Basics/","title":"Basics","text":"<p>React Native allows you to build mobile apps for android and iOS.</p> <p>It allows you to use native components which allows better performance and more seamless UX.</p> <p>Hot reloading lets you see the changes you make in real-time.</p> <p>Expo allows you to build React Native apps. Expo Router uses file based routing system.</p> <p>In React Native instead of rendering HTML elements you render native mobile components.</p> <p>Basic RN component example:</p> <pre><code>import React from 'react'\nimport {View, Text} from 'react-native'\n\nconst App = () = {\n    return (\n        &lt;View &gt;\n            &lt;Text\n            style ={{fontSize:24,color:'blue'}}\n            &gt; Hallo World!&lt;/Text&gt;\n    )\n}\n\nexport default App;\n</code></pre> <p>RN also offers stylesheet utility We can create styles by creating JS objects</p> <pre><code>const styles = StyleSheet.create({\n    text: {\n        fontSize:24,\n        color: \"blue\",\n        fontWeight: \"bold\",\n    }\n});\n</code></pre> <p>NativeWind allows you to write tailwind like styles in your app.</p> <pre><code>import {Text} from \"react-native\";\n\nconst App = () =&gt; {\n    return &lt;Text className =\"text-[24px] text blue font-bold\"&gt;Hello, world!&lt;/Text&gt;;\n};\nexport default App;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#component","title":"component <p>Think of the <code>&lt;View&gt;</code> component like a box or a container that holds other components. Similar to a <code>&lt;div&gt;</code> in html but with added functionality specific to mobile apps.</p> <p>It is used to create layout structures for other components. It uses flexbox layout by default. So you can use flexbox properties like <code>justify-content</code> or <code>align-items</code></p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#interactivity","title":"Interactivity","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#touchableopacity","title":"TouchableOpacity","text":"<p>Is like a button with more customisations.</p> <ul> <li>It reduces it's opacity when pressed, creating a fade effect.</li> <li>Lighter visual impact</li> <li>Better for smaller elements and icons.</li> <li>Default choice for most cases.</li> </ul> <pre><code>import React from 'react';\nimport {TouchableOpacity,Text} from 'react-native';\n\nfunction MyButton(props) {\n    return (\n        &lt;TouchableOpacity onPress={props.onPress}&gt;\n            &lt;Text&gt;{props.label}&lt;/Text&gt;\n        &lt;/TouchableOpacity&gt;\n    )\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#touchablehightlight","title":"TouchableHightlight","text":"<ul> <li>Adds an underlay color when pressed</li> <li>More prominend feedback</li> <li>Better for larger elements like buttons</li> </ul> <pre><code>...\nimport {TouchableHightlight, Text} from 'react-native';\n\nfunction MyButton(props) {\n    return(\n        &lt;TouchableHighlight onPress={props.onPress}&gt;\n            &lt;Text&gt;{props.label}&lt;/Text&gt;\n        &lt;/TouchableHightlight&gt;\n    );\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#touchablewithoutfeedback","title":"TouchableWithoutFeedback","text":"<p>Most basic touchable component</p> <ul> <li>No visual feedback when pressed</li> <li>Just handles touch events(onPress, onLongPress)</li> <li>Minimal overhead</li> <li>Userful when you want custom feedback or no feedback</li> <li>Useful for links and images that don't require additional styling and visual feedback.</li> </ul> <pre><code>import {TouchableWithoutFeedback,Text} from 'react-native';\n\nfunction MyLink(props){\n    return (\n        &lt;TouchableWithoutFeedback onPress={props.onPress}&gt;\n        &lt;Text style = {{ textDecorationLine: 'underline'}}&gt;\n        {props.label}\n        &lt;/Text&gt;\n        &lt;/TouchableWithoutFeedback&gt;\n    )\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#activityindicator","title":"ActivityIndicator","text":"<p>Allows to show spiner animation or loading indicator</p> <pre><code>import {View, ActivityIndicator, StyleSheet} from 'react-native';\n\nconst App = () =&gt; {\n    return(\n        &lt;View style={styles.container}&gt;\n            &lt;ActivityIndicator size=\"large\" color=\"#0000ff\" /&gt;\n        &lt;/View&gt;\n    );\n};\n\nconst styles = StyleSheed.create({\n    container: {\n        flex:1,\n        justifyContent: 'center',\n        alignItems: 'center',\n\n    },\n}),\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#button","title":"Button","text":"<pre><code>import {View, Button,StyleSheet} from 'react-native';\n\nconst App = () =&gt; {\n    const handlePress = () =&gt; {\n        console.log('Button Pressed!');\n    };\n\n    return (\n        &lt;View style={styles.container}&gt;\n        &lt;Button title=\"Press me\" onPress = {handlePress}/&gt;\n        &lt;/View&gt;\n    );\n};\n\nexport default App;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#flatlist","title":"Flatlist","text":"<p>Rendering a long list of items that need to be scrolled efficiently. Like the <code>map</code> function in React. Flatlist has optimized scroll performance and item seperation. If you want to create larger lists with smooth scrolling you should use Flatlist. For smaller list you can use <code>map</code> function from React.</p> <pre><code>import { View, FlatList, Text, StyleSheet} from 'react-native';\n\nconst App = () =&gt; {\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;FlatList\n            data={DATA}\n            renderItem={({ item }) =&gt; (\n            &lt;View style={styles.item}&gt;\n                &lt;Text style={styles.title}&gt;{item.title}&lt;/Text&gt;\n            &lt;/View&gt;\n        )}\n          keyExtractor={item =&gt; item.id}\n         /&gt;\n         &lt;/View&gt;\n    );\n};\n...\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#scrollview","title":"Scrollview","text":"<p>Can hold multiple components and views, providing a scroll container for them. We can use it for a large list of items or large amount content in general so users can easily explore all content. It requires a bounded height.</p> <pre><code>import {View, ScrollView, Text, StyleSheet} from 'react-native';\n\nconst App = () =&gt; {\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;ScrollView contentContainerStyle={styles.scrollViewContent}&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n                &lt;Text style={styles.text}&gt;Text 1&lt;/Text&gt;\n            &lt;/ScrollView&gt;\n        &lt;/View&gt;\n    );\n};\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#default-saveareaview","title":"Default SaveAreaView","text":"<p>Provides a save area to render the content without getting covered by the devices hardware features like notch etc. This falls short for some users so there is another react-native-safe-area-context in the npm. <code>npm install react-native-safe-area-context</code></p> <pre><code>import {SaveAreaView} from 'react-native-safe-area-context';\n\nfunction SomeComponent(){\n    return(\n        &lt;SaveAreaView style={{ flex:1, backgroundColor:'red'}}&gt;\n            &lt;View style= {{flex:1,backgroundColor: 'blue'}}/&gt;\n        &lt;/SaveAreaView&gt;\n\n    );\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#image","title":"Image <p>Used to display standalone images.</p> <pre><code>import{View, Image, StyleSheed} from 'react-native';\n\nconst App = () =&gt; {\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;Image\n                source={{uri:'https://via.placeholder.com/200'}}\n                style = {styles.image}\n            /&gt;\n        &lt;/View&gt;\n    );\n};\n\nexport default App;\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#imagebackground","title":"ImageBackground <p>To create an image as background there is a special component <code>ImageBackground</code></p> <pre><code>import{View,ImageBackground,Text,StyleSheet} from 'react-native';\nconst App = () =&gt; {\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;ImageBackground\n                source={{uri: 'https://via.placeholder.com/400'}}\n                style={styles.imageBackground}\n            &gt;\n            &lt;Text style={styles.text}&gt;Hello, Image Background!&lt;/Text&gt;\n        &lt;/ImageBackground&gt;\n    &lt;/View&gt;\n    );\n};\n...\n</code></pre> <p>Both components can handle .png,.jpg,.gif,.webp,.jif no svgs though. you can use svg directly within expo with third party package <code>react-native-svg</code></p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#modal","title":"Modal <p>Modals are like popups that get animated in from the bottom.</p> <pre><code>import {View,Modal, Text} from 'react-native';\n\nconst App = () =&gt; (\n    &lt;Modal\n        visible={true}\n        animationType=\"slide\"\n        onRequestClose={()=&gt; console.log('Modal closed')}\n    &gt;\n    &lt;View style={{flex:1,justifyContent: 'center',alignItems:'center'}}&gt;\n        &lt;Text&gt; This is a modal&lt;/Text&gt;\n    &lt;/View&gt;\n&lt;/Modal&gt;\n);\n\nexport default App\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#alert","title":"Alert <p>Two/three button Alert</p> <pre><code>import {Alert} from 'react-native';\n\nconst App = () =&gt; {\n    return(\n        Alert.alert(\n            'Alert Title',\n            'My alert message',\n            [\n                {text: 'Cancel', onPress:()=&gt; console.log('Cancel pressed'),\n                style: 'cancel'},\n                {text:'OK', onPress: () =&gt; console.log('OK pressed')}\n            ]\n        );\n    );\n};\n\nexport default App;\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#toggle","title":"Toggle <p>If you want to create a toggle we can use a <code>Switch</code> component</p> <pre><code>import {Switch, View} from 'react-native';\n\nconst App = () =&gt; {\n    return (\n        &lt;View&gt;\n        &lt;Switch\n            trackColor={{false: '#767577', true:'#81b0ff'}}\n            thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\n            onValueChange={toggleSwitch}\n            value={isEnabled}\n        /&gt;\n        &lt;/View&gt;\n    );\n\n};\nexport default App;\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#statusbar","title":"StatusBar <p>With <code>StatusBar</code> can we control how the statusbar on the phone should look like.</p> <pre><code>import React from 'react';\nimport {Text, View} from 'react-native';\nimport {StatusBar} from 'expo-status-bar';\n\nexport default function App(){\n    return (\n        &lt;View style={styles.container}&gt;\n            &lt;Text style={{color:'#fff'}}&gt; Notice that the status bar has light text!&lt;/Text&gt;\n            &lt;StatusBar style=\"light\"/&gt;\n        &lt;/View&gt;\n    );\n}\n</code></pre> <p>More components here</p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#routing-in-expo","title":"Routing in Expo <p>Expo-Router is a file-based navigation library that is build specificly for React Native Projects that are build with Expo.</p> <p>You set up a folder <code>App</code> and based on your folder structure and the files within that folder that is how your navigation is gonna look in your Application.</p> <p>To learn how expo router works it makes sense to do the Manual Installation. If you know how everything works you can do the quickstart. Link to Documentation</p> <p>After installing all the dependencies the next step is to setup up the entry point in the <code>package.json</code>file. This make the entry point of the application going directly to Expo Router</p> <pre><code>{\n    \"main\":\"expo-router/entry\"\n}\n</code></pre> <p>Then you want to modify the project configuration in <code>app.json</code></p> <pre><code>{\n    \"scheme\":\"your-app-scheme\"\n}\n</code></pre> <p>Then in the <code>babel.config.js</code>:</p> <pre><code>module.exports = function(api){\n    api.cache(true);\n    return {\n        presets: ['babel-preset-expo']\n        plugins:['expo-router/babel'],\n    }\n}\n</code></pre> <p>So everything is based on the folder structure of the <code>app</code> folder. So the entry file of your app is gonna be <code>index.tsx</code>. So when you create a subfolder like <code>Station</code> you already enable the <code>/station</code> url endpoint you then can navigate to.</p> <p>You can create dynamic route with <code>url</code>parameter. For that you name the file <code>[id].tsx</code>. This allows us to show whatever we pass through <code>/station/id</code> gonna render that <code>[id].tsx</code> component. Id can be a number, string.</p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#navigation-to-router","title":"Navigation to router","text":"<p>There are two ways to navigate the pages in the subfolder. The first way is to create the native <code>&lt;Link&gt;</code> component from expo router and then create link to navigate to the specific page. <code>&lt;Link href=\"{/station/1}\"&gt;Go to Station 1&lt;/Link&gt;</code>. This automatically create a button you can click.</p> <p>It is important that the names in the links have to match the file names in the folder structure.</p> <p>Or you do it programmatically by importing router object from expo router and calling the <code>.push</code> or <code>.navigate()</code>method on it. For that we use a <code>Pressable</code> from react native</p> <pre><code>&lt;Pressable onPress={()=&gt;router.push(\"/users/2\")}&gt;&lt;/Pressable&gt;\n</code></pre> <p>So when you need the specific functionality of Link like press and hold you should use <code>&lt;Link&gt;</code>. Sometimes you want to link programmatically for example when you want to navigate the user to a new side when the user fills out a form and hits onSubmit.</p> <p>Also if you want to no just pass the route via a link it can make sense to make it with the pressable</p> <pre><code>&lt;Pressable\n    onPress={()=&gt; router.push({\n        pathname:\"/station/[id]\",\n        params: {id :2},\n    })}&gt;\n&lt;/Pressable&gt;\n</code></pre> <p>To then get the <code>id</code> on the linked component we can use the hook from expo router called <code>useLocalSearchParams()</code></p> <pre><code>import {useLocalSearchParams} from \"expo-router\"\n...\nconst {id} = useLocalSearchParams();\n//const {id} = useLocalSearchParams&lt;{id:string}&gt;(); // typed version\nreturn (\n    &lt;View&gt;\n        &lt;Text&gt;User {id}&lt;/Text&gt;\n    &lt;/View&gt;\n)\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#navigating-back-to-index","title":"Navigating back to index","text":"<p>We can make use of <code>Stacks</code> from expo router which directly wraps these stacks that you have in React Navigation.</p> <p>So you create a new file called <code>_layout.tsx</code>. These layout files define the layout for the group/folder they are laying in. Each <code>_layout.tsx</code> overwrite the other from the folder above it.</p> <p>Inside the file you call the component RootLayout. You then import <code>Stack</code> and define the Screens you want to link to.</p> <pre><code>import {Stack} from `expo-router`\n\nconst RootLayout = () =&gt; {\n    return(\n        &lt;Stack&gt;\n        &lt;Stack.Screen name=\"index\" options={\n        headerTitle: \"Home\",\n        headerStyle: {\n            backgroundColor: \"red\",\n        }\n        }/&gt;\n        &lt;Stack.Screen name=\"station/[id]\" options={\n            headerTitle: \"Station\"\n        } /&gt;\n        &lt;/Stack&gt;\n    )\n}\n</code></pre> <p>This gives you a header on top of your screen which shows the name of the page. You also get animation and a back button back to the start side. We then further customize is as you can see above with <code>options</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#create-button-tabs","title":"Create button tabs","text":"<p>You can create folders inside the <code>app</code> that are not affecting the url. It is called grouping. So you can group certain parts together. For example when you want to create tags for your navigation you can create a <code>(tabs)</code> folder.</p> <p>You then can move <code>index</code> und the <code>station</code> folder inside of <code>tabs</code>. For the tabs you can create an own <code>_layout.tsx</code> file to define the tabs layout.</p> <pre><code>const TabsLayout = () =&gt; {\n    return (\n        &lt;Tabs&gt;\n        &lt;Tabs.Screen name=\"index\" options={\n            title:\"Station\"}\n            /&gt;\n        &lt;Tabs.Screen name= \"users/[id]\"/&gt;\n        &lt;/Tabs&gt;\n    );\n};\n</code></pre> <p>We then can change the <code>_layout.tsx</code> from the folder above the tabs group and change it to</p> <pre><code>import {Stack} from \"expo-router\"\n\nconst RootLayout = () =&gt; {\n    return (\n        &lt;Stack&gt;\n        &lt;Stack.Screen name=\"(tabs)\"\n        options={{\n            headerShown:false,\n        }}\n        /&gt;\n        &lt;/Stack&gt;\n    );\n};\nexport default RootLayout;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#create-a-new-component","title":"Create a new component <p>In an empty file we can create a new component Structure with <code>rjsfc</code></p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#uninstall-a-package","title":"Uninstall a package <p><code>npm un packagename</code></p>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#for-each-datapoint-show-an-element-in-the-views","title":"For each datapoint show an element in the views <p>First import the data `import data from './data.json'</p> <p>then you can ether use Flatlist</p> <pre><code>import data from '....'\n\n&lt;FlatList\n    data={data}\n    keyExtractor={(item) =&gt; item.id.toString()\n        renderItem={({item})=&gt; (\n            &lt;Text style={styles.text}&gt;{item.name}&lt;/Text&gt;\n        )}\n    }/&gt;\n</code></pre> <p>Or you use the <code>.map()</code> function</p> <pre><code>import data from ...\n\n{data.map((item) =&gt; (\n        &lt;Text key={item.id} style={styles.text}&gt;\n          {item.name}\n        &lt;/Text&gt;\n      ))}\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#pass-data-via-link","title":"Pass Data via Link <pre><code>//Screen 1\n      &lt;Link\n        style={GlobalStyles.button}\n        href={{\n          pathname: \"/movement\",\n          params: { interval: selectedInterval },\n        }}\n      &gt;\n        Start Notifications\n      &lt;/Link&gt;\n\n//Screen 2\nimport {useLocalSearchParams} from 'expo-router'\nconst { interval } = useLocalSearchParams();\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/Basics/#expo-notifications","title":"Expo notifications <p><code>npx expo install expo-notifications expo-device expo-constants</code></p> <p>New file <code>usePushNotifications.ts</code></p> <pre><code>import {useState,useEffect, useRef} from 'react'\nimport * as Device from 'expo-device'\nimport * as Notifications from 'expo-notifications'\n\nimport Constants from 'expo-constants'\nimport {Platform} from 'react-native'\n\nexport interface PushNotificationState {\n    notification?: Notification.Notification;\n    expoPushToken?:Notification.ExpoPushToken;\n}\n\nexport const usePushNotification = ():PushNotifcationState =&gt; {\n    Notifications.setNotificationHandler({\n        handleNotification: async()=&gt; ({\n            shouldPlaySound:false,\n            shouldShowAlert:true,\n            shouldSetBadge:false\n        })\n    })\n\n    const [expoPushToken,setExpoPushToken] = useState&lt;\n    Notification.ExpoPushToken | undefined&gt;();\n\n    const [notification,setNotification] = useState&lt;\n    Notification.Notification | undefined&gt;();\n\n    const notificationListener = useRef&lt;Notifications:Subscription&gt;();\n    const responseListener = useRef&lt;Notifications:Subscription&gt;();\n\n    async function registerForPushNotificationsAsync(){\n        let token;\n\n        if(Device.isDevice){\n            const {status:existingStatus} = async Notifications.getPermissionAsync();\n\n            let finalStatus = existingStatus;\n\n            if(existingStatus !== \"granted\"){\n                const {status} = await Notifications.requestPermissionsAsync();\n                finalStatus = status;\n            }\n            if(finalStatus !== \"granted\"){\n                alert(\"Failed to get push token\")\n            }\n\n            token = await Notifications.getExpoPushTokenAsync({\n                projectId:Constants.expoConfig?.extra?.eas?.projectId;\n            })\n\n            if(Platform.OS === 'android'){\n                Notifications.setNotificationsChannelAsync(\"default\", {\n                    name:\"default\",\n                    importance:Notifications.AndroidImportance.MAX;\n                    vibrationPattern:[0,250,250,250],\n                    lightColor:\"#FF231F7C\",\n                })\n            }\n\n            return token;\n\n\n        }else {\n            console.log(\"Error please use a physical device\");\n        }\n    }\n    useEffect(()=&gt; {\n        registerForPushNotificationsAsync().then((token)=&gt;{setExpoPushToken(token)});\n\n        notificationlistener.current =Notifications.addNotificationReceiveListener((notification)=&gt; {\n            setNotification(notification);k\n        });\n\n        responseListener.current = Notifications.addNotificationResponseListener((response) =&gt; {\n            console.log(reponse);\n        }\n\n        return () =&gt; {\n            Notifications.removeNotificationSubscription(\n                notificationListener.current!\n            )\n\n            Notifications.removeNotificationSubscription(\n                responseListener.current!);\n\n        }\n    },[])\n\n    return {\n        expoPushToken,\n        notification\n    }\n}\n\n\n//App.tsx\n\nexport default function App(){\n    const {expoPushNotification,notification}= usePushNotification();\n\n    const data = JSON.stringify(notification,undefined,2);\n    ...\n    return(\n        &lt;View&gt;\n            &lt;Text&gt;Token:{expoPushToken?.data?? \"\"}&lt;/Text&gt;\n            &lt;Text&gt;{data}&lt;/Text&gt;\n        &lt;/View&gt;\n    )\n}\n</code></pre>","text":"","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/","title":"Creating a project with Expo","text":"<ol> <li>Create an expo project    <code>npx create-expo-app ./</code>    or    <code>npx create-expo-app@latest</code>    Downloads and installs the bases for deact native projects    If you want an empty project not with the default template you can use.    <code>npx create-expo-app MyApp --template blank</code></li> </ol> <p>Then navigate into the new project folder with <code>cd</code></p> <ol> <li>Install dependencies    <code>npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar</code>    All these packages are necessary</li> </ol> <p>In the <code>package.json</code> dependencies we see everything that got installed</p> <ol> <li> <p>Setup entry point    Overwrite the main in your package.json with    <code>\"main\": \"expo-router/entry\",</code> Now we cann use Filebase routing.</p> </li> <li> <p>Copy content from App.js    Copy content from App.js file and and add it into a <code>_layout.jsx</code> file that is in a new folder <code>app</code>    This will be the starting point of the application</p> </li> <li> <p>Modify project configuration    Add a deep linking <code>scheme</code> with your app name in your <code>app.json</code> config</p> </li> </ol> <pre><code>{\n    \"scheme\":\"your-app-scheme\"\n}\n</code></pre> <p>Its used to deep-link expo and react native applications. Allows you app to be open within a specific screen directly from the url outside the app.</p> <p>In the <code>app.json</code> under <code>\"name\"</code> you can change the value to your app name. The <code>slug</code> which is an url friendly name of the app you can also change it to your app name.</p> <p>File with many configuration to improve your app.</p> <ol> <li> <p>Start the app    <code>-c</code> clears the cache.    <code>npx expo start -c</code></p> </li> <li> <p>Expo    If you want to directly test the app on your device you can use the Expo go app on your device. And scan the qr code.    You need to be connected to the same network.    In iOS</p> </li> <li> <p>turn the VPN Status Off</p> </li> <li> <p>Local Network on.</p> </li> <li> <p>index.jsx    index.jsx is often used as the entry point or main component of the application, similar to an index.html    Routes define then different screens/pages in the app.    *Routing determines how users moves between different parts of the application.    And the <code>_layout.jsx</code> will be present in all files</p> </li> </ol> <p>So there we would set the navbar or header for that we can use a special snipped <code>rnfes</code> But you have to have ex7+ react snippets extention in vscode installed.</p> <p>Then rename the object to <code>RootLayout</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#apply-style","title":"Apply style","text":"<p>Assign to the element <code>style={styles.contentname}</code></p> <p>To center the container element on the screen.</p> <pre><code>const styles = StyleSheed.create({\n    container:{\n        display:'flex',\n        flex:1,\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    text:{\n        color:'white',\n        textSize:42,\n        fontWeight: 'bold',\n        textAlign: 'center'\n\n    }\n\n})\n</code></pre> <p>To apply directly a style you can use double braces <code>style={{marginHorizontal:'auto'}}</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#slot","title":"Slot","text":"<p>When you want to render your <code>index.jsx</code> on your home screen we can modify the layout.jsx to render different screens and specified default ones or we can use the <code>&lt;Slot/&gt;</code> property from expo router</p> <pre><code>...\nimport {Slot} from 'expo-router'\n\nconst RootLayout = () =&gt; {\n    return &lt;Slot/&gt;\n}\nexport default RootLayout\n</code></pre> <p>if you want to wrap it with other components like header or footer you can write</p> <pre><code>...\nconst RootLayout = () =&gt; {\n    return(\n        &lt;&gt;\n        &lt;Text&gt;header&lt;/Text&gt;\n        &lt;Slot/&gt;\n        &lt;Text&gt;Footer&lt;/Text&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>And we don't need the styles anymore.</p> <p>The <code>&lt;Slot&gt;</code> renders the current child route.</p> <p>Another way to do navigation is to use a <code>Stack</code> of different screens. There you add all the screens via <code>&lt;Stack.Screen name=\"screenname\"options=.../&gt;</code></p> <pre><code>...\nimport{Stack} from 'expo-router'\n\nconst RootLayout = {} =&gt; {\n    return(\n        &lt;Stack&gt;\n        &lt;Stack.Screen name=\"index\" options={{headerShown:false}}/&gt;\n        &lt;Stack.Screen name=\"explore\" options={{title:\"Home\"}}/&gt;\n        &lt;/Stack&gt;\n    )\n}\n</code></pre> <p>So now if you want to create a new route you have to create a new file <code>filename.jsx</code> inside <code>app</code> folder for the route create the <code>rnfes</code>, build your structure and then link it to the index stack.</p> <p>To navigate to the new screen we need a <code>Link</code> component from <code>expo-router</code> in the <code>index.js</code></p> <pre><code>import {Link} from 'expo-router'\n...\nexport default function App(){\n    return(\n        ...\n\n        &lt;Link href=\"/profile\" style ={{color:'blue'}}&gt; Go to profile&lt;/Link&gt;\n    )\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#styling-application","title":"Styling application","text":"<p>To style your application you can use a framework like NativeWind.</p> <p></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#adding-images","title":"Adding images","text":"<p>You can put the images in the <code>assets</code> directory in the project folder</p> <p>To show a background image you need to import in the <code>import {View,Text,StyleSheet,ImageBackground} from 'react-native'</code> and also import the image reference <code>import imgName from '@/assets/images/imageName.png'</code></p> <p>Then you can use</p> <pre><code>&lt;ImageBackground\n    source={imgName},\n    resizeMode=\"cover\",\n    style={styles.bgimage}\n&gt;\n//!!!! Needs to be inbetween the open and clos of imagebackground\n&lt;Text style={styles.text}&gt;Hello Text&lt;/Text&gt;\n\n&lt;/ImageBackground&gt;\n</code></pre> <p>If you want to cover the image the entire screen you can add the <code>resizeMode=\"cover\"</code> to</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#typescript-vs-javascript","title":"Typescript vs Javascript","text":"<p>If you use typescript you can leave the file endings to <code>index.tsx</code>. but if you use javascript you have to change it to <code>index.jsx</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#modify-the-splash-screen","title":"Modify the splash screen","text":"<p>Go into the <code>app.json</code> file and then to <code>\"splash\"</code>. There you can see the link to the splash screen img.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#modify-the-icon","title":"Modify the icon","text":"<p>Go into the <code>app.json</code>file and there you see the object <code>icon</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#navigation","title":"Navigation","text":"<p>So if you for example don't want to use tabs you can drag the <code>index.jsx</code> out of the <code>(tabs)</code> folder and delete the tabs folder. Then add <code>\"**/*.jsx\"</code> to the <code>tsconfig.json</code> so it doesn't add every file that you move.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#adding-links-to-other-pages","title":"Adding links to other pages","text":"<p>You need to import <code>Link</code> from expo-router <code>import {Link} from 'expo-router'</code></p> <p><code>&lt;Link href=\"/explore\"&gt;Export&lt;/Link&gt;</code></p> <p>When you style the link you can add <code>textDecorationLine: 'underline'</code> to create the link look.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#pressable","title":"Pressable","text":"<p>If you want more complex interactions or custom styling it can make to use <code>Link</code> and <code>Pressable</code> instead of Button because you can customise more.</p> <pre><code>import {Link} from 'expo-router'\nimport {Pressable} from 'react-native'\n\n...\n&lt;Link\nhref=\"/explore\" style={{marginHorizontal:'auto'}}\nasChild&gt;\n&lt;Pressable&gt;\n&lt;Text&gt; Explore&lt;/Text&gt;\n&lt;/Pressable&gt;\n&lt;/Link&gt;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#groups","title":"Groups","text":"<p>When you have a folder in <code>(categories)</code> that defines groups. Anytime you create a folder like this it needs its own <code>_layout.jxs</code> file.</p> <p>If we have a group we then can reference the group in the _layout file</p> <pre><code>...\n&lt;Stack.Screen name=\"(groupName)\" options={{headerShown:false}}/&gt;\n...\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#tabs","title":"Tabs","text":"<p>Tabs is a special directory. It tells expo to use the tab layout. <code>_layout.txs</code> defines how the tabbar and each tab behaves. Your files for the single pages need to be in the <code>(Tabs)</code> folder.</p> <p>In the layout file you need to set the right links to your pages that you want to lead to with the tabs.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#define-the-tabbar-activeinactive-colors","title":"Define the tabbar active/inactive colors","text":"<p>In the <code>&lt;Tabs screenOptions={{...tabBarActiveTintColor}}&gt;</code> can we define the colors for the active tab. If you want to define the inactive color you can use <code>tabBarInactiveTintColor:</code></p> <p>You can assign a color object</p> <pre><code>import {Colors} from '@/constants/Colors';\n...\nconst colorScheme = useColorScheme();\n&lt;Tabs\n    screenOptions={{\n        tabBarActiveTintColor:Colors[colorScheme ?? 'light'].tint,\n    }}&gt;\n    ...\n</code></pre> <p><code>colorScheme ?? 'light'</code> is null coalescing operator <code>if color is null or undefined</code> it is setting it to 'light'</p> <p>in the <code>constants/Colors.ts</code> file can we set the basic colors or define which colors we want in dark and light mode for our app so we easily can reference it through the whole app.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#modify-the-header","title":"Modify the header","text":"<p>We can assign the alignment of the header with <code>headerTitleAlign:\"center\"</code> in the <code>&lt;Tabs screenOptions={{...}}&gt;</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#icons-in-expo","title":"Icons in Expo","text":"<p>Under <code>https://icons.expo.fyi</code> you can see what icons you can use in expo.</p> <p>Be aware who supplies the icons and that you import the right icons e.g. icons from Ionicons <code>import Ionicons from '@expo/vector-icons/Ionicons';</code></p> <pre><code>...\nimport Ionicons from '@expo/vector-icons/Ionicons';\n...\n\n&lt;Tabs.Screen\nname=\"contact\"\noptions={{\n    title:'Contact us',\n    tabBarIcon:({color,focused}) =&gt; (\n        &lt;TabBarIcon name ={focused ? 'people-circle' : 'people-circle-outline'} color={color}/&gt;\n        ...\n    )\n}}&gt;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#themed-text","title":"Themed Text","text":"<p>Themed text contains already the colorscheme</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#import-fonts","title":"Import fonts","text":"<p>If you want to use your own fonts in your project you have to use a special hook to load your fonts. For that we use <code>useFonts</code>.</p> <pre><code>...\nimport {useFonts} from 'expo-font'\n</code></pre> <p>Once imported we have to load the fonts in in the Layout using the <code>useFont</code> hook. We pass in an object of all the fonts we want to use</p> <pre><code>import {useFonts} from 'expo-font'\n...\n\nconst [fontsLoaded,error] useFonts({\n    \"Fontname\": require(\"../assets/fonts/linktofont.ttf\")\n})\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#constants-folder","title":"Constants folder","text":"<p>You can create a constants folder to save the links to certain assets and assign them to constant names so it is easier to import them later</p> <pre><code>import bookmark from '../assets/icons/name.png'\n...\n\nexport default {\n    bookmark\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/CreatingProject/#perform-an-action-while-the-page-is-loading","title":"Perform an action while the page is loading","text":"<p><code>useEffect</code> is a hook from react that is used to perform side effects in application. Side effects are things that happen as a consequences as something else. Something happens in our application, something gets triggered and as a side effect we have something else that happens. Side effects are mostly gonna be a result of a state change. We can use an <code>useEffect</code> to execute behaviour white the page is loading.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/","title":"Developing React Native Mapbox App","text":""},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#installation","title":"Installation","text":"<p>Install the react native cli Create a new react native project <code>npx react-native init MyProjectName --template react-native-template-typescript</code></p> <p>or an expo project.</p> <p>Install react native project with <code>npm install @rnmapbox/maps</code> or in expo <code>npx expo install @rnmapbox/maps</code> More info on Mapbox Github</p> <p>In Expo you have to configue the <code>app.json</code>. You need to add your DownloadToken. <pre><code>{\n  \"expo\": {\n    \"plugins\": [ex\n      [\n        \"@rnmapbox/maps\",\n        {\n          \"RNMapboxMapsDownloadToken\": \"sk.ey..\"\n        }\n// highlight-end\n      ]\n    ]\n  }\n}\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#get-downloadtoken-mapbox","title":"Get DownloadToken Mapbox","text":"<ul> <li>Go to mapbox account site and to tokens. </li> <li>Create a new token</li> <li>Give it a name</li> <li>You just need the <code>DOWNLOADS:READ</code> permission.</li> <li>Then create token and copy it into the <code>app.json</code></li> </ul> <p>It is important to know. You cannot use Mapbox Maps in Expo Go App. So you should use EAS Builds.</p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#eas-builds","title":"EAS Builds","text":"<ul> <li>Install lates EAS CLI. You can also use this to check for new versions. <code>npm install -g eas-cli</code></li> <li>Login into your Expo account <code>eas login</code></li> <li>Configue project <code>eas build:configure</code></li> </ul> <p>Take in mind that you have you devices be added properly.</p> <p>Infos</p> <p>Build it for iOS and Android.  After did configure project you have an <code>eas.json</code> file in your project folder. If you have set it up you then can build it <code>eas build --profile development --platform ios</code> or use android.</p> <p>You then have to add some info in the terminal.</p> <p>When the build is completed you have to install it on the phone. Scan the code from the terminal. This installs the equivalent for the expo app.</p> <p>Then you call <code>expo start --dev-client</code> to start the server.</p> <p>Scan again the new QR code.</p> <p>If you test on android or apple you have to do some basic steps: Android Install Apple Install</p> <p>Infos from Expo EAS and Mapbox React Native Youtube</p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#install-es7","title":"Install ES7+","text":"<p>To get React and React Native snippets you should install the ES7+ extention in VSCode.</p> <p>Then you can add a basic structure with <code>rnfe + tab</code>.</p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#adding-basic-component-structure","title":"Adding Basic Component structure","text":"<p>First import the Mapbox library into the component and add your public key from the mapbox website.</p> <p><pre><code>import MapboxGL from '@rnmapbox/maps'\nMapboxGL.setAccessToken(\"ADD PUBLIC KEY FROM MAPBOX SITE HERE\")\n\nconst App = () =&gt; {\n    return(\n        &lt;View style={styles.page}&gt;\n            &lt;View style={styles.container}&gt;\n            &lt;MapboxGL.MapView style={styles.map}&gt;\n            &lt;/View&gt;\n\n        &lt;/View&gt;\n    );\n}\n\nexport default App;\n\nconst styles = StyleSheet.create({\n    page:{\n        flex:1,\n        justifyContent: 'center',\n        alignItems:'center',\n    },\n    container:{\n        height:'100%',\n        width:'100%,\n    },\n    map:{\n        flex:1\n    }\n    }\n})\n</code></pre> To add a basic mapview we use the <code>&lt;MapboxGL.MapView&gt;</code> component. <pre><code>    &lt;View style={styles.container}&gt;\n          &lt;MapboxGL.MapView\n      style={styles.map}\n      zoomEnabled={true}\n      styleURL='mapbox://styles/mapbox/streets-v12'\n      rotateEnabled={true}\n      &gt;\n        &lt;/MapboxGL.MapView&gt;\n    &lt;/View&gt;\n</code></pre></p> <p>We also need to set the camera with <code>&lt;MapboxGL.Camera/&gt;</code> inside the <code>&lt;MapboxGL.MapView&gt;</code> <pre><code>...\n&lt;MapboxGL.MapView\n...\n&gt;\n&lt;MapboxGL.Camera\n        zoomLevel={15}\n        centerCoordinate={[10.181667,36.806389]}\n        pitch={60}//The rotation of camera. 0 from 90 degree. 70 lower angle\n        animationMode={'flyTo'}\n        animationDuration={6000}\n        /&gt;\n\n&lt;/MapboxGl.MapView&gt;\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#display-a-marker","title":"Display a marker","text":"<p>To display a marker we can use <code>MapBoxGL.PointAnnotation&gt;</code>. <pre><code>      &lt;MapboxGL.PointAnnotation\n      id=\"marker\"\n      style={styles.marker}\n      coordinate={[10.181667,36.806389]}\n      &gt;\n        &lt;View style={styles.markerContainer}&gt;\n          &lt;View style={styles.marker}/&gt;\n        &lt;/View&gt;\n      &lt;/MapboxGL.PointAnnotation&gt;\n...\nconst styles = StyleSheet.create({\n...\n  markerContainer:{\n    width:20,\n    height:20\n\n  },\n  marker:{\n    width:20,\n    height:20,\n    borderRadius:10,\n    backgroundColor :'red',\n    borderWidth:2,\n    borderColor:'white'\n\n  }\n})\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#catching-error","title":"Catching error","text":"<p>We can catch errors with <pre><code>Logger.setLogCallback(log =&gt;{\n  const {message} = log;\n  if(message.match('....'))\n  {\n    //Do this\n\n  }\n})\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#placing-icons","title":"Placing Icons","text":"<p>Install the React Native vector icons lib with <code>npm i react-native-vector-icons</code> Then you can import the icon set by name <code>import {Fontisto} from '@expo/vector-icons'</code></p> <p>We can place an Icon for our marker by putting the component into a <code>View</code> in the <code>PointAnnotation</code> <pre><code>...\n&lt;MapboxGL.PointAnnotation\n/*... settings marker*/&gt;\n&lt;View style={styles.markerContainer}&gt;\n&lt;Fontisto name=\"shopping-store\" size={20} color=\"#82BD61\"/&gt;\n&lt;/View&gt;\n&lt;/MapboxGL.PointAnnotation&gt;\n\n//Defintion of stlye of the elements\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#trigger-a-modal","title":"Trigger a Modal","text":"<p>First we need to define the state <code>modalVisible</code>. Then we write two functions <code>triggerModal()</code> and <code>closeModal()</code> <pre><code>const [modalVisible,setModalVisible] = useState&lt;boolean&gt;(false)\n\nconst onMarkerPress = ()=&gt;{\n  setModalVisible(true)\n}\n\nconst closeModal = ()=&gt; {\n  setModalVisible(false)\n}\n\n&lt;Modal visible={modalVisible} animationType=\"none\" transparent&gt;\n  &lt;View style={styles.modalContainer}&gt;\n  &lt;View stlye={styles.modalContent}&gt;\n\n    &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;\n    &lt;Text&gt;X&lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n    &lt;Text&gt;City:Ariana&lt;/Text&gt;\n    &lt;Text&gt;Country:Ariana&lt;/Text&gt;\n\n  &lt;/View&gt;\n  &lt;/View&gt;\n&lt;/Modal&gt;\n...\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#button","title":"Button","text":"<p>In React Native we don't have a Button Component we have <code>TouchableOpacity</code> Component <pre><code>  &lt;TouchableOpacity onPress={closeModal} style={styles.closeButton}&gt;\n    &lt;Text style={styles.closeButtonTxt}&gt; Close&lt;/Text&gt;\n  &lt;/TouchableOpacity&gt;\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#reverse-geolocation","title":"Reverse Geolocation","text":"<p>In this example we use this Nominatim</p> <p>We can use the url from that side <code>const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&amp;lat=${36.806389}&amp;lon=${10.181667}`</code> and the implement the lat and long into it.</p> <p>So first we have to fetch the url with a <code>useEffect</code> hook. <pre><code>//We need a new locationdata state\nconst [locationData,setLocationData] = useState&lt;any&gt;(null)\n...\n\nuseEffect(()=&gt; {\n  fetch(url)\n  .then(response =&gt; response.json())\n  .then(data =&gt; setLocationData(data))\n  .catch(error =&gt; console.error('Error fetching reverse data',error))\n  console.log(locationData)\n},[])\n</code></pre></p> <p>Then we can assign the values from the response to the text in the modal. With the <code>?</code> we avoid that we get an error when locationData is null. <pre><code>...\n\n&lt;Modal&gt;\n  &lt;Text&gt; locationData?.address.city&lt;/Text&gt;\n  &lt;Text&gt; locationData?.address.country&lt;/Text&gt;\n&lt;/Modal&gt;\n</code></pre></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#routing-in-expo","title":"Routing in Expo","text":"<p>If you haven't already installed it you can install it with <code>npm expo install expo-router</code></p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#get-the-users-current-location-in-expo","title":"Get the Users current location in expo","text":"<p>To get the users current location we need to import the expo library <code>expo-location</code>. <code>npx expo install expo-location</code></p> <p>We then create a function to get request the permissions. </p> <pre><code>async function getPermissionLocation(){\n  let {status} = await Location.requestForegroundPermissionsAsync();\n\n  if(status !== 'granted'){\n    setErrorMsg('Permission to access location was denied')\n  }\n\n}\n\nuseEffect(() =&gt; {\n  getPermissionLocation();\n})\n</code></pre> <p>Next we fetch the initial location of the user  <pre><code>...\nconst [location,setLocation] = useState&lt;any&gt;(\n  {\n    coords:{\n      latitude:36.806,\n      longitude:10.181667\n    }\n  }\n)\n...\nasync function getInitialLocation(){\n  let initialLocation = await Location.getCurrentPositionAsync({});\n  setLocation(initialLocation)\n}\n...\nuseEffect(()=&gt;{\n  ...\n  getPermissionLocation();\n  getInitialLocation();\n})\n</code></pre> At the end to get a continuously the current user position we create a subscription to watch the position of the user.</p> <pre><code>const[locationSubscription,setLocationSubscription] = useState&lt;any&gt;(null);\nasync function setPositionSubscription(){\n  const subscription = await Location.watchPositionAsync(\n    {\n      accuracy:Location.Accuracy.BestForNavigation,//Highest accuracy which is suitable for navigation\n      timeInterval:1000,//Update every second\n      distanceInterval:10,//or when moved by 10 meteers\n    },\n    (newLocation) =&gt; {\n      setLocation(newLocation)\n    }\n  );\n  setLocationSubscription(subscription);\n}\n...\n\n\nuseEffect(()=&gt;{\n  ...\n  setLocationSubscription();\n},[])\n</code></pre> <p>Add a cleanup when the view is left</p>"},{"location":"topics/JavaScript/ReactNative/DevelopingRNMapboxApp/#calculate-the-route-to-a-location","title":"Calculate the Route to a location","text":"<p>We need to install <code>npm i @turf/helpers</code></p> <p>The Directions API from Mapbox allows you to create Routes to locations.</p>"},{"location":"topics/JavaScript/ReactNative/NativeWind/","title":"Native Wind","text":"<p>It uses Tailwind CSS as scripting language to create a universal style system for React Native.</p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/NativeWind/#installing","title":"Installing","text":"<p>Install Link for Native wind To install Native wind go to your project folder and run <code>npm install nativewind tailwindcss react-native-reanimated react-native-safe-area-context</code> After that you want to install the dev dependencies</p> <p>To setup tailwindcss we need to run <code>npx tailwind init</code> to create a <code>tailwind.config.js</code></p> <p>The next step is to copy this to input it into the <code>tailwind.config.js</code> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // NOTE: Update this to include the paths to all of your component files.\n  content: [\"./app/**/*.{js,jsx,ts,tsx}\"],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre></p> <p>The next step is to add the Babel plugin by modifying the <code>babel.config.js</code> and adding the native wind plugin.</p> <pre><code>module.exports = function (api) {\n    api.cache(true);\n    return {\n      presets: [\n        [\"babel-preset-expo\", { jsxImportSource: \"nativewind\" }],\n        \"nativewind/babel\",\n      ],\n    };\n  };\n  ```\nSo now we can replace the stylesheet with tailwind like classnames.\n\nSo you remove the stylesheed imports and the styles from the elements and just add the classnames from tailwind.\n\n\n## Adjusting elements in View\n```JS\n...\n//Adjust elements in View\n&lt;View className=\"flex-1 items-center justify-center bg-white\"&gt;\n...\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/NativeWind/#setting-text-size","title":"Setting Text size","text":"<pre><code>&lt;Text className=\"Text-3xl\"&gt;Welcome&lt;/Text&gt;\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/NativeWind/#building-a-theme","title":"Building a Theme","text":"<p>We can setup fonts and colors to build up a theme for our app so we don't have to rewrite a lot of code.  In the <code>tailwind.config.js</code> file we can set our settings for the theme. in <code>theme:</code></p>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/NativeWind/#colors","title":"Colors","text":"<pre><code>...\ntheme:{\n  extend:{\n    colors:{\n      primary:'#161622'\n    }\n  },\n},\nplugins:...\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/NativeWind/#fonts","title":"Fonts","text":"<p>To use your fonts you need to import them into the <code>assets/fonts</code> folder</p> <pre><code>...\ntheme:{\n  extent:{\n    colors:...\n    ,\n    fontFamily:{\n      pthin:[\"Poppins-Thin\",\"sans-serif\"]\n    }\n  }\n}\n</code></pre>","tags":["Javascript","ReactNative"]},{"location":"topics/JavaScript/ReactNative/SetupExpo/","title":"Setup Expo","text":"<p>Run <code>npx create-expo-app my-app</code> in terminal to setup the app</p> <p><code>cd my-app</code> For android <code>run android</code> For iOS <code>run ios</code> For web <code>run web</code></p>","tags":["Javascript","Expo"]},{"location":"topics/JavaScript/ReactNative/Topics/","title":"Topics","text":"<ul> <li>EAS Builds</li> </ul>"},{"location":"topics/JavaScript/ReactNative/Libraries/RN-Mapbox/","title":"Mapbox React Native","text":"","tags":["Javascript","ReactNative","ReactNative/Library"]},{"location":"topics/JavaScript/ReactNative/Libraries/RN-Mapbox/#installation","title":"Installation","text":"<p>Installing packages for expo <code>npm install @rnmapbox/maps</code></p>","tags":["Javascript","ReactNative","ReactNative/Library"]},{"location":"topics/JavaScript/ReactNative/Libraries/RN-Mapbox/#configuration","title":"Configuration","text":"<p>For iOS, Android and Expo there are different configurations you can find here Configurations Platforms</p> <p>For expo: Set <code>RNMapboxMapsDownloadToken</code> to your secret token. </p> <p>Add <code>RNMapboxMapsDownloadToken</code> to the <code>@rnmapbox/maps</code> config plugin in the plugs array of your app.</p> <p>Then add you key in the the config.js/app.js</p> <pre><code>{\n  \"expo\": {\n    \"plugins\": [\n      [\n// highlight-start\n        \"@rnmapbox/maps\",\n        {\n          \"RNMapboxMapsDownloadToken\": \"sk.ey..\"\n        }\n// highlight-end\n      ]\n    ]\n  }\n}\n</code></pre>","tags":["Javascript","ReactNative","ReactNative/Library"]},{"location":"topics/JavaScript/ReactNative/Libraries/RN-Mapbox/#rebuild-app","title":"Rebuild app`","text":"<p><code>expo prebuild --clean</code></p>","tags":["Javascript","ReactNative","ReactNative/Library"]},{"location":"topics/JavaScript/ReactNative/Libraries/RN-Mapbox/#configure-permissions-for-location-access","title":"Configure permissions for location access","text":"<p>To show the location puck on the map with the <code>LocationPuck</code> component you use the <code>expo-location</code> plugin to configure the requires <code>NSLocationWhenInUseUsageDescription</code> property.</p> <p>Install the plugin with <code>npx expo install expo-location</code> and add its config plugin to the plugins array <pre><code>{\n  \"expo\": {\n    \"plugins\": [\n// highlight-start\n      [\n        \"expo-location\",\n        {\n          \"locationWhenInUsePermission\": \"Show current location on map.\"\n        }\n      ]\n// highlight-end\n    ]\n  }\n}\n</code></pre></p> <p>Mapbox Github Link</p> <p>!!! In the App.js you use the public token or your secret token from mapbox and in the app.json file you use your download token. You can also set up your secret token in an env file</p>","tags":["Javascript","ReactNative","ReactNative/Library"]},{"location":"topics/JavaScript/ReactNative/Libraries/SetupEAS/","title":"Setup EAS","text":"<p>Install latest eas <code>npm install -g eas-cli</code></p> <p><code>eas login</code></p> <p><code>eas build:configure</code></p>","tags":["Javascript","Expo"]},{"location":"topics/JavaScript/ReactNative/Libraries/SetupEAS/#dev-builds","title":"Dev builds","text":"<p>npx expo install expo-dev-client</p> <p>eas build --platform ios --profile development</p> <p>npx expo start</p>","tags":["Javascript","Expo"]},{"location":"topics/JavaScript/ReactNative/Libraries/SetupEAS/#preview-build-on-device","title":"Preview Build on device","text":"<p>eas build --profile preview --platform ios</p>","tags":["Javascript","Expo"]},{"location":"topics/JavaScript/ThreeJS/","title":"Three.js","text":"<p>Basics Shader</p>"},{"location":"topics/JavaScript/ThreeJS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/JavaScript/ThreeJS/Basics/","title":"Basics","text":"<p>Three.JS is build on top of WebGL. You can download the examples from the Three.JS site here Github Examples</p> <p></p> <p>We create out of the single elements groups.</p> <p>We have the <code>Scene</code> which holds all the information about the actual experience and the objects in a hierarchal way. The <code>Camera</code> views the scene and tells the renderer what we looking at. The <code>Renderer</code> responsible to give the user the images we want to see.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#hierarchal-structure-of-scene","title":"Hierarchal structure of scene","text":"<p>We have a parent-child relationship in our scene and between the meshes. Children of a parent will inherit properties from the parent mesh. So if we group elements the children of the group will be transformed relatively from the parents values.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#setup","title":"Setup","text":"<p>To install three js in your project <code>npm install three</code></p> <p>To import the entire t3js library to our file <code>import * as THREE from 'three'</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-a-scene","title":"Add a Scene","text":"<p>The scene is like a container for objects, lights and particles etc.</p> <p>In THREE.JS you can have one or multiple scenes. You add the meshes that you create to the Scenes you want.</p> <pre><code>const scene = new THREE.Scene();\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-a-mesh","title":"Add a Mesh","text":"<p>A mesh is composed out of geometry(shape) and a material(surface color). We need to add both to the <code>Mesh</code> object. We then add the mesh to the scene.</p> <pre><code>const cubeGeo = new THREE.BoxGeometry(1, 1, 1);\n//We pass an object into the material containing all the options for that material\nconst cubeMaterial = new THREE.MeshBasicMaterial({ color: \"red\" });\n\nconst cubeMesh = new THREE.Mesh(cubeGeo, cubeMat);\n\nscene.add(cubeMesh);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#create-a-group","title":"Create a group","text":"<pre><code>const group = new THREE.Group();\ngroup.add(cubeMesh)\ngroup.add(cubeMesh);\n</code></pre> <p>By changing the transformations of the group we apply it to all the children of the group.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-a-camera","title":"Add a Camera","text":"<p>To see the elements in our scene we need to add a Camera</p> <pre><code>const camera = new THREE.PerspectiveCamera(\n  fieldOfView,\n  aspectRatio,/*window.innerWidth/window.innerHeight,*/\n  near /* everything closer thant this you wont see */\n  further /*anything further than this you wont see*/\n\n);\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth/window.innerHeight,\n  0.1,\n  30\n)\n// We need to move the camera back otherwise camera and object are both at (0,0,0)\ncamera.position.z = 5;\n\nscene.add(camera);\n</code></pre> <p>We need to pass a canvas html element to our website that shows our Three.JS scene. <code>canvas class=\"canvasClass\"&gt;&lt;/canvas&gt;</code> In the JS file we then grab that element and reference it to the renderer because it takes the canvas as an object as input. <code>const canvas = document.querySelector('canvas.canvasClass)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-renderer","title":"Add renderer","text":"<p>The renderer renders the scene from the camera point of view and draws it onto a canvas. We need to specify the <code>canvas</code> property corresponding to the HTML <code>&lt;canvas&gt;</code> element that we add to the page. For that we can use<code>document.querySelector(...)</code></p> <pre><code>//Because we gonna use the canvas often for multiple operations it makes sense to assign it to a variablle\nconst canvas = document.querySelector('canvasClassName')\nconst renderer = new THREE.WebGLRenderer({\n  canvas:canvas\n})\n//To specify how big it should be rendered\nrenderer.setSize(window.innerWidth,window.innerHeight)\nrenderer.render(scene,camera);\n</code></pre> <p>If we would just call <code>renderer.render(...)</code> it would just render the scene one time.</p> <p>In order to render the scene on every frame we create a function that executes at the speed of the browsers framerate. We then call the renderer in that function. At the end we need to call the function one time so it goes into the loop.</p> <pre><code>function animate() =&gt; {\n  renderer.render(scene,camera);\n  window.requestAnimationFrame(animate)\n}\nanimate();\n</code></pre> <p>So anytime we want to make changes to the scene we need to set it before we call the animate loop because renderer basically takes a snapshot of the current scene and shows it for that frame.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#change-background-of-scene","title":"Change background of Scene","text":"<p>We can change the background of our scene with <code>scene.background = new THREE.Color(0xffffff)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#make-the-background-of-our-scene-transparent-fox-elastic-scroll","title":"Make the Background of our Scene transparent / Fox elastic scroll","text":"<p>To make the background of our scene not black but transparent we can set <code>alpha:true</code> in the renderer</p> <pre><code>const renderer = new THREE.Renderer({\n  canvas:canvas,\n  alpha: true\n})\n</code></pre> <p>or you can use the <code>.setClearColor()</code> method to set a specific color or <code>.setClearAlpha(0)</code> for the clear Alpha.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#resizing-scenecanvas-depending-on-screen-size","title":"Resizing Scene/Canvas depending on screen size","text":"<p>To make the canvas fit our viewport we use <code>window.innerWidth/.innerHeight</code></p> <p>We also need to get rid of the default margins of the browsers</p> <pre><code>* {\n  margin: 0;\n  padding: 0;\n}\n</code></pre> <p>To fix the canvas at the top</p> <pre><code>.canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  outline: none; /*blue outline when drag and dropping*/\n}\n</code></pre> <p>To remove any kind of scrolling we can use</p> <pre><code>html,\nbody {\n  overflow: hidden;\n}\n</code></pre> <p>To handle resizing the canvas we need to know when the window gets resized. For that we listen to the <code>resize</code> event of the window. <code>window.addEventListener(\"resize\", () =&gt; {})</code></p> <p>When we do changes to the camera and the <code>camera.aspect</code> we need to call <code>camera.updateProjectionMatrix()</code>.</p> <pre><code>//(eventName, callback function)\nwindow.addEventListener('resize', () =&gt; {\n  camera.aspect = window.innerWidth/window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth/window.innerHeight);\n\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#handling-pixel-ratio","title":"Handling pixel ratio","text":"<p>Because different devices can have different pixel ratios we should adapt the <code>pixelRatio</code> of the renderer to the pixel ratio to the screen of our device. To avoid performance issues on devices with higher pixel ratios we set the maximum pixel ratio to 2 with the <code>Math.min()</code>.</p> <p><code>renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))</code></p> <p>We add this to the <code>window.addEventListener(\"resize\",()=&gt;{})</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#fullscreen","title":"Fullscreen","text":"<p>You first need to decide what interaction will trigger the fullscreen. You could use a HTML button or a double click for example. To toggle between fullscreen and no fullscreen every time we execute the action we check if window is already in fullscreen. The fullscreen method is linked with the html-element. So we need to define which element we want to show in fullscreen.</p> <pre><code>window.addEventListener(\"dblclick\",()=&gt; {\n  if(!document.fullscreenElement){\n    canvas.requestFullscreen()\n  } else {\n    document.exitFullscreen()\n  }\n})\n</code></pre> <p>To make sure this also works in other browser like Safari we need to extend this with <code>document.webkitFullscreen</code></p> <pre><code>window.addEventListener(\"dblclick\",()=&gt;{\n  const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement\n  if(!fullscreenElement){\n    if(canvas.requestFullscreen){\n      canvas.requestFullscreen()\n    } else if(canvas.webkitRequestFullscreen){\n      canvas.webkitRequestFullscreen();\n    }\n  } else {\n    if(document.exitFullscreen){\n      document.exitFullscreen();\n    } else if(document.webkitExitFullscreen){\n      document.webkitExitFullscreen();\n    }\n  }\n\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#antialiasing","title":"Antialiasing","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#get-the-device-pixel-ration-we-can-use","title":"Get the device pixel ration we can use","text":"<p><code>window.devicePixelRatio</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-the-pixel-ration","title":"Set the pixel ration","text":"<p><code>renderer.setPixelRatio(window.devicePixelRatio)</code></p> <p>Because of different devices and ultra high pixel ratios we want to limit the max pixel ratio so the code stays performant</p> <pre><code>const maxPixelRatio = Math.min(window.devicePixelRatio,2);\nrenderer.setPixelRatio(maxPixelRatio);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-antialisaing-to-renderer","title":"Add antialisaing to renderer","text":"<pre><code>const renderer = new THREE.renderer({\n  canvas:canvas,\n  antialias:true;\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#transforming-objects","title":"Transforming Objects","text":"<p>When we set the different parameters and transformations to our meshes we set the local rotation, scale, and transform.</p> <p>All classes that inherit from the <code>Object3D</code> class possess <code>position, scale, rotate, quaternion</code> properties.</p> <p>All these properties will internally be compiled to Matrices by Three.JS.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#to-see-the-axes-in-our-scene","title":"To see the axes in our scene","text":"<pre><code>const axesHelper = new THREE.AxesHelper(2);\nscene.add(axesHelper);\n</code></pre> <p>red = x green = y blue = z</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-positions","title":"Set Positions","text":"<p>To set the position we can set the single axes</p> <pre><code>cubeMesh.position.x = 1 //x right,left\ncubeMesh.position.z = 1 // backward/forward\ncueMesh.position.y = 1 // up and down\n</code></pre> <p>The unity of 1 is up to you. It can be 1 centimeter, 1 meter or even 1 kilometer. It makes sense to adapt the unit to the size of what you want to build.</p> <p>We also can use a <code>Vector3</code></p> <pre><code>cubeMesh.position = new Vector3(0.1,0.0,0.3);\n</code></pre> <p>or even copy a vector to set the position</p> <pre><code>const tempPosition = new Vector3(0.4,0.1,0.8);\ncubeMesh.position.copy(tempPosition);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-scale","title":"Set Scale","text":"<p>To set scale of single axis <code>cubeMesh.scale.y = 2</code></p> <p>or use <code>.set()</code> to set all three values at once <code>cubeMesh.scale.set(1,2,3)</code></p> <p>or <code>group.scale.setScalar(2)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-rotation","title":"Set Rotation","text":"<p>There are two ways of handling rotations in Three.JS. You can use the <code>rotation</code> properties, which are expressed in Euler angles in radians. To create like half a rotation you can use <code>Math.PI</code>.</p> <pre><code>const a = new THREE.Euler(0,1,1.57, 'XYZ');\n//Convert Vector 3 to euler\nconst b = new THREE.Vector3(1,0,1);\nb.applyEuler(a);\n</code></pre> <p>Rotate 90\u00b0 <code>cubeMesh.rotation.y = Math.PI/2</code></p> <p>There is also a Three.JS utility we can use to convert radians to degree <code>cubeMesh.rotation.y = THREE.MathUtils.degToRad(45)</code></p> <p>We also can use the <code>.quaternion</code> to set the rotation of an element. It is another way to express rotation.</p> <p>Three.JS by default will always apply the rotation by the order XYZ even when in the code the Y rotation comes before the x rotation.</p> <p>If you want to change the order how it applies the rotation we can use <code>cubeMesh.rotation.reorder('YXZ')</code>. this needs to be called before we are calling the rotations</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#look-at-object","title":"Look at object","text":"<p>The <code>.lookAt(new THREE.Vector3(0,-1,0))</code> method allows us to let an object look at a certain point,object or position. The object will automatically rote its <code>-z</code> axis towards the target.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#animations","title":"Animations","text":"<p>We want to execute a function that moves the objects and renders each frame regardless of the frame rate.</p> <p>For that we can use the JS function <code>window.requestAnimationFrame()</code>. It executes the function you provide it on the next frame.</p> <p>To get reference of the time we can initialize a clock.</p> <p><code>const clock = new THREE.Clock()</code></p> <p>With <code>clock.getElapsedTime()</code> we get the difference between when the method got called and when we first initialized the clock.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#get-delta-time","title":"Get delta time","text":"<pre><code>const clock = new THREE.Clock();\nlet previousTime = 0;\nconst renderLoop = () =&gt; {\n  const currentTime = clock.getElapsedTime();\n  const delta = currentTime - previousTime;\n\n  previousTime = currentTime;\n}\n</code></pre> <pre><code>let time = Date.now()\nconst renderLoop = () =&gt; {\n  const currentTime = Date.now()\n  const deltaTime = currentTime-time;\n  time = currentTime;\n\n  mesh.rotation.y += 0.01 *deltaTime\n}\n</code></pre> <p>With that <code>delta</code> we can create experiences that are independent of the speed of your device.</p> <pre><code>const clock = new THREE.Clock();\nlet previousTime = 0;\n\nconst renderLoop = () =&gt; {\n  let currenTime = clock.getElapsedTime();\n  const delta = currentTime-previousTime;\n\n  previousTime = currenTime;\n\n  cubeMesh.rotation.y += THREE.MathUtils.degToRad(1) * delta * 20;\n  renderer.render(scene,camera);\n  window.requestAnimationFrame(renderLoop)\n}\nrenderLoop()\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#rotate-object-in-circle","title":"Rotate object in circle","text":"<pre><code>const time = new THREE.Clock();\nconst renderLoop = () =&gt; {\n  const elapsedTime = time.getElapsedTime();\n\n  mesh.position.x = Math.cos(elapsedTime);\n  mesh.position.y = Math.sin(elapsedTime);\n}\nrenderLoop();\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#let-objectcamera-follow-path","title":"Let object/camera follow path","text":"<pre><code>const points = [\n  new THREE.Vector3(1,0,2),\n  new THREE.Vector3(0,0,2),\n  new THREE.Vector3(1,0,3),\n  new THREE.Vector3(1,2,2),\n\n]\n\n//To close the path add true as second parameter to function\nconst path = new THREE.CatmullRowCurve3(points);\nconst animate = () =&gt; {\n  const time = Date.now()\n  const t = (time/2000%6) /6;\n  const position = path.getPointAt(t);\n  cam.position.copy(position)\n  renderer.render()\n  requestAnimationFrame();\n}\n</code></pre> <p>To orient the object we need the normalised tanged vector of the position.</p> <pre><code>const tangent = path.getTangentAt(t).normalize();\ncam.lookAt(position.clone().add(tangent));\n</code></pre> <p>It gets interesting to use mouseScroll to move the animation.</p> <p>Scroll Interaction</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#animate-with-a-library","title":"Animate with a Library","text":"<p>To get specific animations it can make sense to use specific JS animation libraries like GSAP</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gsap","title":"GSAP","text":"<p>To add <code>GSAP</code> we need to at it to our project <code>npm install --save gsap@latest</code></p> <p><code>import gsap from 'gsap'</code></p> <p>In <code>GSAP</code> we can create a <code>Tween</code> which is an animation from A to B with <code>gsap.to(...)</code> Because <code>GSAP</code> has a built-in <code>requestAnimationFrame</code> you don't need to update the animation.</p> <pre><code>gsap.to(mesh.position,{duration:1,delay:1,x:2})\nconst renderLoop = () =&gt; {\n  renderer.render(scene,camera);\n  window.requestAnimationFrame(renderLoop)\n}\nrenderLoop()\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#geometries","title":"Geometries","text":"<p>In Three.js geometries are composed out of vertices - which are point coordinates in 3D space - and facets - which are triangles that join the vertices into surfaces.</p> <p>Geometries are used to create Meshes but also for particles.</p> <p>Three.js own geometries are called primitives.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#create-own-geometry","title":"Create own Geometry","text":"<p>If you want to create Geometry that is complex or with a precise shape it makes sense to create it in a 3D software. But for not to complex geometry we can use <code>new THREE.BufferGeometry();</code></p> <p>We start with instantiating a BufferGeometry <code>const buffGeo  = new THREE.BufferGeometry()</code></p> <p>To add vertices to the geometry we save them in a JS <code>Float32Array</code></p> <pre><code>const positionsArray = new Float32Array([\n    0, 0, 0, // First vertex\n    0, 1, 0, // Second vertex\n    1, 0, 0  // Third vertex\n])\n</code></pre> <p>Before you can pass the Array data into the BufferGeometry we need to transform it into a BufferAttribute.</p> <p><code>const positionAttribute = new THREE.BufferAttribute(positionsArray,3)</code> The <code>3</code> defines how many values define one vertex attribute.</p> <p>Finally we can this attribute to the BufferGeometry by using <code>.setAttribute(nameAttribute,value)</code> <code>geometry.setAttribute('position',positionAttribute)</code> The Three.js shader will look for the <code>position</code> name to assign the values to the position of the vertices. Then the faces will created depending of the order of the vertices in the array.</p> <p>Another example:</p> <pre><code>//Create geometry\nconst geometry = new THREE.BufferGeometry()\n// Create Array with vertices points\n//Float32 Array only allows to store Floats and the length of the array is fixed\n//you also can set the length of the array with new Float32Array(9)\nconst vertices = new Float32Array([\n  -1.0, -1.0, 1.0,//First vertex\n  1.0, -1.0, 1.0,//second vertex\n  1.0, 1.0, 1.0,//third vertex\n\n    1.0, 1.0, 1.0,\n  -1.0, 1.0, 1.0,\n  -1.0, -1.0, 1.0,\n]);\n// pass array into BufferAttribute to store information about the position of the vertices\ngeometry.setAttribute('position',new THREE.BufferAttribute(vertices,3));\n</code></pre> <p>in <code>.setAttribute()</code> we also can manipulate the <code>uv</code>position of the vertices, <code>normals</code> etc.</p> <p>The THREE.JS primitives also use <code>BufferGeometry</code> under the hood.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#create-random-triangles","title":"Create random triangles","text":"<pre><code>const geo = new THREE.BufferGeometry();\n//create 50 triangles = 450 values\nconst count = 50;\n//50 *3 *3 = 50 triangle with 3 vertex points which need 3 values\nconst ranTrianglePoints = new Float32Array(50*3*3);\n\nfor(let i = 0; i&lt; count*3*3;i++){\n  ranTrianglePoints[i] = (Math.random()-0.5) *4\n}\nconst positionAttribute = new THREE.BufferAttribute(ranTrianglePoints,3);\ngeo.setAttribute('position',positionAttribute);\n</code></pre>    See the Pen    T3.JS - Random Triangles BuffferGeometry by levoxtrip (@levoxtrip)   on CodePen.","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#threejs-primitives","title":"Three.js Primitives","text":"<p>All Three.js inherit from the <code>ButterGeometry</code> class. You can find all the primitive geometries from Three.JS in the documentation.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#boxgeometry","title":"BoxGeometry","text":"<pre><code>const box = new THREE.BoxGeometry({\n  width,\n  height,\n  depth,\n  widthSegments,\n  heightSegments,\n  depthSegments\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#planegeometry","title":"PlaneGeometry","text":"<pre><code>const plane = new THREE.PlaneGeometry({\n  width,height,widthSegments,heightSegments\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#circlegeometry","title":"CircleGeometry","text":"<p><code>const geometry = new THREE.CircleGeometry(radius,segments)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#spheregeometry","title":"SphereGeometry","text":"<pre><code>const sphereGeo = new THREE.SphereGeometry(0.5,32,32)\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#conegeometry","title":"ConeGeometry","text":"<p><code>const geometry = new THREE.ConeGeometry(radius,height,radialSegments)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#cylindergeometry","title":"CylinderGeometry","text":"<pre><code>const cylinderGeometry = new THREE.CylinderGeometry(0.5,0.5,1,32);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#ringgeometry","title":"RingGeometry","text":"<p>To create a flat ring or a portion of a flat ring <code>const ring = new THREE.RingGeometry(innerRadius,outerRadius,numSegments)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#torusgeometry","title":"TorusGeometry","text":"<p>To create a ring with thickness - like a donut <code>const torus = new THREE.TorusGeometry(radius,radiusTube,radialSegments,tubularSegments,arc)</code></p> <p>Other geometries are <code>DodecahedronGeometry</code> - 12 faces sphere <code>OctahedronGeometry</code> - 8 faces sphere <code>TetrahedronGeometry</code> - 4 faces sphere</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#shapegeometry","title":"ShapeGeometry","text":"<p>To create your own shapes</p> <pre><code>const x = 0, y = 0;\n\nconst heartShape = new THREE.Shape();\n\nheartShape.moveTo( x + 5, y + 5 );\nheartShape.bezierCurveTo( x + 5, y + 5, x + 4, y, x, y );\nheartShape.bezierCurveTo( x - 6, y, x - 6, y + 7,x - 6, y + 7 );\nheartShape.bezierCurveTo( x - 6, y + 11, x - 3, y + 15.4, x + 5, y + 19 );\nheartShape.bezierCurveTo( x + 12, y + 15.4, x + 16, y + 11, x + 16, y + 7 );\nheartShape.bezierCurveTo( x + 16, y + 7, x + 16, y, x + 10, y );\nheartShape.bezierCurveTo( x + 7, y, x + 5, y + 5, x + 5, y + 5 );\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#tubegeometry","title":"TubeGeometry","text":"<p>Creates a tube that extrudes a long a 3d curve</p> <p><code>const geometry = new THREE.TubeGeometry( path, 20, 2, 8, false );</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#extrudegeometry","title":"ExtrudeGeometry","text":"<p>Creates extrudes geometry from a path shape.</p> <pre><code>const length = 12, width = 8;\n\nconst shape = new THREE.Shape();\nshape.moveTo( 0,0 );\nshape.lineTo( 0, width );\nshape.lineTo( length, width );\nshape.lineTo( length, 0 );\nshape.lineTo( 0, 0 );\n\nconst extrudeSettings = {\n    steps: 2,\n    depth: 16,\n    bevelEnabled: true,\n    bevelThickness: 1,\n    bevelSize: 1,\n    bevelOffset: 0,\n    bevelSegments: 1\n};\n\nconst geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#lathegeometry","title":"LatheGeometry","text":"<p>Creates meshes with axial symmetry like vases. The lathe rotates around the Y Axis</p> <pre><code>const points = [];\nfor ( let i = 0; i &lt; 10; i ++ ) {\n    points.push( new THREE.Vector2( Math.sin( i * 0.2 ) * 10 + 5, ( i - 5 ) * 2 ) );\n}\nconst geometry = new THREE.LatheGeometry( points );\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#textgeometry","title":"TextGeometry","text":"<p>Because it is an add-on we need to import it <code>import {TextGeometry} from 'three/addons/geometries/TextGeometry.js'</code></p> <p>Three.js needs the font in a json format called typeface. We can convert a font here There are also fonts in the <code>/node_modules/three/examples/fonts/</code> which we can put in the <code>/static/</code> folder. Another way is to directly import the json file in your script <code>import typefaceFont from 'three/examples/fonts/helvetiker_regular.typeface.json</code></p> <p>To load a font we need the Three.js class <code>FontLoader</code></p> <pre><code>import {TextGeometry} from 'three/addons/geometries/TextGeometry.js'\n...\nconst loader = new FontLoader();\n\nloader.load( 'fonts/helvetiker_regular.typeface.json',  ( font ) =&gt; {\n\n    const geometry = new TextGeometry( 'Hello three.js!', {\n        font: font,\n        size: 80,\n        depth: 5,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 10,\n        bevelSize: 8,\n        bevelOffset: 0,\n        bevelSegments: 5\n    } );\n} );\n</code></pre> <p>To create 3D fonts is quite some work for Three.js because of the amount of segments and vertices. Try to reduce the <code>curveSegments</code> and <code>bevelSegments</code> as much as you can.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#center-the-text","title":"Center the text","text":"<p>In Three.js geometry has a bounding which gives how much space the geometry takes in the scene. It can be a sphere(Default) or a _ box_.</p> <p>We can use these boundings to position our text. For text it makes sense to use a box as the bounding so we have to tell three.js to calculate the box <code>textGeo.computeBoundingBox()</code> <code>console.log(textGeometry.boundingBox)</code></p> <p>We then look for the <code>.max</code> properties and move the geometry inside the mesh - so the mesh stays centered in the scene.</p> <pre><code>textGeo.translate(\n  -textGeo.boundingBox.max.x * 0.5,\n  -textGeo.boundingBox.max.y *0.5,\n  -textGeo.boundingBox.max.z * 0.5\n)\n</code></pre> <p>The bounding box has a bevel which we would need to subtract as well to be more precise.</p> <pre><code>textGeo.translate(\n  -textGeo.boundingBox.max.x * 0.5-0.02,\n  -textGeo.boundingBox.max.y *0.5-0.02,\n  -textGeo.boundingBox.max.z * 0.5-0.02\n)\n</code></pre> <p>Three.js has a function for this to make it easier <code>.center()</code> <code>textGeo.center()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-multiple-meshes-with-one-call","title":"Add multiple Meshes with one call","text":"<p><code>scene.add(plane,sphere,box)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#importing-geometries","title":"Importing geometries","text":"<p>GLTF is the popular standard for importing models into Three.js. It is very flexible and allows to have different sets of data. Not just for geometry and materials but also camera, light, animations etc. It also supports different file formats like binary, json and embed textures.</p> <p>If you just need a Geometry it also can make sense just to use a OBJ, FBX</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gltf","title":"GLTF","text":"<p>GLTF can have different file formats and the most important are:</p> <ul> <li>glTF</li> <li>glTF-Binary</li> <li>glTF-Draco</li> <li>glTF-Embedded</li> </ul> <p>To decide which format you gonna take depends on the use case how you want to handle the assets and its data.</p> <p>If you want to be able to change the data it makes sense to use the <code>glTF-default</code>. It also makes loading faster because the files get loaded separately. If you don't modify anything and you just want one file to handle it makes sense to use <code>glTF-binary</code>.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gltf_1","title":"glTF","text":"<p>The .gltf, the default format, is a json file that contains information about the scene like lights, cameras, objects transformations materials. It doesn't contain information about the geometries or the textures. These are stored in the a binary file <code>.bin</code>. This file also stores information like uvs, vertex colors and more. The textures are stored associated <code>.png</code> files.</p> <p>When we want to load our model from a <code>.gltf</code> we only load that file and it links to all the other corresponding files.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gltf-binary","title":"glTF-Binary","text":"<p>This format contains all the information in just one file. This makes it a bit lighter and easier to load. But also less flexible because you can't change it's data. For example you can't just change the compression of the texture because it is implemented in the binary.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gltf-draco","title":"glTF-Draco","text":"<p>Similar to the <code>gltf</code> default format but the buffer data is compressed with a different algorithm - the <code>Draco alogrithm</code>. It is also lighter as the default <code>gltf</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#gltf-embedded","title":"glTF-Embedded","text":"<p>Like the <code>glTF-Binary</code> just one file but it is JSON data. The benefit of this format is that you have one file which is easily editable.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#load-in-gltf-files-into-threejs","title":"Load in gltf files into THREE.JS","text":"<pre><code>import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js'\n\nconst loader = new GLTFLoader();\nloader.load('path',\n  (gltf) =&gt; {\n    console.log(\"success\")\n    console.log(gltf);\n  },\n  (progress) =&gt; {\n    console.log(\"progress\")\n    console.log(progress)\n  },\n  (error) =&gt; {\n    console.log(\"error\")\n    console.log(error)\n  }\n)\n</code></pre> <pre><code>import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nconst hand = null;\nconst loader = new GLTFLoader();\nloader.load(\"src/assets/hand.glb\",(gltf)=&gt; {\n  console.log(gltf.scene);\n  gltf.scene.rotation.y = ...\n  gltf.scene.position.y =\n  //When scaling it makes sense to scale the whole scene not just the single object\n  hand = gltf.scene\n  scene.add(gltf.scene);\n})\n</code></pre> <p>If you gltf contains of a whole scene with multiple objects or elements we can access the single children with</p> <pre><code>gltfLoader.load(\n  'path',\n  (gltf) =&gt; {\n    //find the right index of child with console.log\n    scene.add(gltf.scene.children[indexChild])\n  }\n)\n</code></pre> <p>When you move an object from one scene to another using: <code>scene.add(gltf.scene.children[0]);</code> you are simultaneously:</p> <ul> <li>Adding the first child of <code>gltf.scene</code> to <code>scene</code></li> <li>Removing that child from <code>gltf.scene</code></li> </ul> <p>This causes the <code>gltf.scene.children</code> array to change dynamically as we move the objects. If you loop through the array using a standard for loop or similar, you end up skipping elements because the array length and order change while iterating.</p> <p>To avoid this we can ether use a <code>while</code> loop:</p> <pre><code>while(gltf.scene.children.length){\n  scene.add(gltf.scene.children[0])\n}\n</code></pre> <p>or instead of adding the elements from the gltf.scene we clone the children and add the clones to our Three.js scene.</p> <pre><code>const children = [...gltf.scene.children]\nfor(const child of children){\n  scene.add(child);\n}\n</code></pre> <p>This way, you are iterating over a static list and moving each child without affecting the original array during the process.</p> <p>And another way is to add the whole <code>gltf.scene</code> <code>scene.add(gltf.scene)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#load-draco-gltf","title":"Load Draco gltf","text":"<p>To load gltf-draco files we need a special <code>DRACOLoader</code>. We also need to add the worker code into the our three.js project by copying the Draco decoder folder(folder is located in <code>/node_modules/three/examples/jsm/libs/</code>) into our <code>static</code> folder.</p> <p>We then add the path to our draco static folder <code>dracoLoader.setDecoderPath('/draco/')</code></p> <pre><code>import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'\nconst dracoLoader = new DracoLoader()\ndracoLoader.setDecoderPath('/draco/')\n\ngltfLoader.setDRACOLoader(dracoLoader)\n</code></pre> <p>To decide if you use Draco or not depends of the size of your project. If you just have a small geometry file we don't need Draco. But if you want to load bigger models and you can accept can freezes at the beginning you should consider Draco.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#access-childs-of-element","title":"Access Childs of element","text":"<pre><code>      firstFrameRoom = paintingG3.getObjectByName(\"firstFrameRoom\");\n      secondFrameRoom = paintingG3.getObjectByName(\"SecondFrameRoom\");\n      thirdFrameRoom = paintingG3.getObjectByName(\"ThirdFrameRoom\");\n\n      if (firstFrameRoom) {\n        console.log(\"First Frame Room Mesh:\", firstFrameRoom);\n        // You can manipulate the mesh here\n        firstFrameRoom.material.color.set(0xff0000); // Change color to red\n      }\n\n      if (secondFrameRoom) {\n        console.log(\"Second Frame Room Mesh:\", secondFrameRoom);\n        // Example of moving the mesh\n        secondFrameRoom.position.set(1, 0, 0);\n      }\n\n      if (thirdFrameRoom) {\n        console.log(\"Third Frame Room Mesh:\", thirdFrameRoom);\n        // Example of changing visibility\n        thirdFrameRoom.visible = false;\n      }\n\n      paintingG3.traverse((child) =&gt; {\n        console.log(child.name); // Log the name of each child\n        if (child.isMesh) {\n          console.log(\"Found a mesh:\", child);\n        }\n      });\n\n      // Accessing a specific child by name or index\n      const firstChild = paintingG3.children[0];\n      console.log(\"First child:\", firstChild);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#access-animations-of-gltf","title":"Access Animations of gltf","text":"<p>GLTF supports animations. The <code>gltf</code> object has an <code>animation</code> property which contains <code>AnimationClip</code> To play an <code>AnimationClip</code> we need to create an <code>AnimationMixer</code>. Each object that gets animated needs its own <code>AnimationClip</code>.</p> <pre><code>const mixer = null;\nconst loader = new GLTFLoader();\nloader.load(\"path\",(gltf)=&gt; {\n  ...\n  mixer = new THREE.AnimationMixer(gltf.scene);\n  //adding AnimationClips to mixer\n  const animationAction = mixer.clipAction(gltf.animations[0])\n  animationAction.play();\n})\n\n//mixer must update each frame\nconst tick = () =&gt; {\n  ...\n  if(mixer){\n    mixer.update(deltaTime);\n  }\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#particles","title":"Particles","text":"<p>With particles we can do dust, rain, snow, stars etc. Each particle is one plane build out of two triangles which is always facing the camera.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#geometry","title":"Geometry","text":"<p>For the <code>Geometry</code> in Particles we use <code>BufferGeometry</code> which exists for all the standard mesh geometries like <code>SphereBufferGeometry</code> etc. <code>BufferGeometry</code> is more performant so it is better to use for Particles. For every vertex on the <code>BufferGeometry</code> we gonna get one particle.</p> <p><code>const particleBaseShape = new THREE.SphereBufferMaterial(radius,widthSubdivision,heightSubdivision)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#material","title":"Material","text":"<p>For the <code>Material</code> we can use the <code>PointsMaterial</code> which is optimized for particles and has also specific properties like <code>size</code> and <code>sizeAttenuation</code>for particles. <code>size</code> control the size of all particles <code>sizeAttenuation</code> - should particles that are farther away be smaller than closer ones.</p> <p>To change the color of the particle you can use the <code>color</code> property. We need to use the <code>THREE.Color</code> class for that after we created already the material. <code>pointsMaterial.color = new THREE.Color('#ff88cc')</code></p> <p>Similar to the other materials we also can load and assign a Texture to the particles. <code>pointsMaterial.transparent = true</code></p> <p>If you only want to keep the alpha values of the texture you can use the <code>.alphaMap</code> <code>pointsMaterial.alphaMap = partTexture</code></p> <p>If you want to have the whole texture assign it to <code>.map</code></p> <p>The <code>color</code> property will affect the <code>Texture</code>.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#different-colors-for-each-particle","title":"Different Colors for each particle","text":"<p>To create varying colors for each of the particles we need to add a new <code>BufferAttribute</code> <code>color</code>. Then we can use the same for-loop to assign for example random colors and set the Attribute at the end.</p> <pre><code>//Again here 3 because we have r,g,b values\nconst positions = new Float32Array(count*3);\nconst colors = new Float32Array(count*3);\n\nfor(let i = 0; i&lt;count;i++){\n  colors[i] = Math.random();\n  positions[i] = (Math.random()-0.5)*10\n}\nparticles.setAttribute('position',new THREE.BufferAttribute(positions,3));\nparticles.setAttribute('color',new THREE.BufferAttribute(colors,3));\n\n//At the end we need to active vertex colors in the material\nparticlesMaterial.vertexColor = true\n\n//Deactivate particlesMaterial.color = new THREE.Color...\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#improving-order-of-displaying-particles","title":"Improving order of displaying particles","text":"<p>WebGL is drawing in the same order how the particles got created and it doesn't know which particle is front of the other.This can cause some render artifacts. We can use different ways to improve this.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#alpha-test","title":"Alpha Test","text":"<p>With the alpha test we test if a pixel gets rendered or not depending on it's transparency. The alpha test defines that every pixel under a threshold value is not gonna be rendered. The default threshold is 0 so every pixel will be rendered. By changing it to like 0.001 we exclude all the pixel from being rendered that have an alpha value from 0.</p> <p><code>pointMaterial.alphaTest = 0.001</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#depthtest","title":"DepthTest","text":"<p>When rendering Three.js test if that object that gets drawn is closer than other already drawn object. This is called <code>Depth testing</code>. <code>particlesMaterial.depthTest = false</code> to disable.</p> <p>Turning depthtesting of can create problems with other non particle objects in the scene.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#depthwrite","title":"DepthWrite","text":"<p>Three.js stores the depth of what is being drawn in a depth buffer. We can tell Three.js not to write the particles in the depth buffer. <code>particlesMaterial.depthWrite = false</code> Deactivating the <code>depthWrite</code> often can fix your problems.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#blending","title":"Blending","text":"<p>To create a nice effect when your particles overlap we can use <code>Blending</code>. <code>particlesMaterial.depthWrite = false</code> <code>particlesMaterial.blending = THREE.AdditiveBlending</code></p> <p>The downside of this is that it can affect the performance of you scene.</p> <p>You can find some particle textures here;</p> <p>Instead of creating an instance of <code>Mesh</code> we use <code>Points</code> instance. <code>const particles = new THREE.Points(particleGeo,particleMat)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#custom-geometry","title":"Custom Geometry","text":"<p>To create our own geometry we start with a <code>BufferGeometry</code>, set the positions in an <code>Float32Array</code> and then assign the values to the <code>position</code> attribute of the <code>BufferGeometry</code></p> <pre><code>const partGeo = new THREE.BufferGeometry();\n\nconst count = 500;\nconst positions = new Float32Array(count*3);\n\nfor(let i = 0; i&lt; count;i++){\n  positions[i] = (Math.random()-0.5) * 10;\n}\n\npartGeo.setAttribute('position',new THREE.BufferAttribute(positions,3));\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#animation","title":"Animation","text":"<p>There are multiple ways to animate particles.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#using-points-as-an-object","title":"Using Points as an object","text":"<p>You can move, scale, rotate the <code>Points</code> class like the other geometry.</p> <pre><code>const tick = () =&gt; {\n  const elapsedTime = clock.getElapsedTime()\n\n  particles.rotation.y = elapsedTime * 0.3;\n}\n</code></pre> <p>This will animate all the particles as a whole.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#changing-attributes-of-particles","title":"Changing Attributes of Particles","text":"<p>To move the individual particles/ update the vertex positions, we have to change the <code>position</code> attribute of the Particle system.</p> <p>The positions in the <code>Float32Array</code> are stored in an one dimensional array <code>[p0.x,p0.y,p0.z,p1.x,p1.y,p1.z,...]</code>. If you for example only want to change all the y positions of the vertex you need to loop through the array in certain steps.</p> <pre><code>const tick = () =&gt; {\n  // ... elapsed time\n  for(let i = 0; i&lt; count;i++){\n    const i3 = i*3;\n    //Move all the particles y position on Math.sin()\n    particlesGeometry.attributes.position.array[i3+1] = Math.sin(elapsedTime);\n\n  }\n    //We need to notify Three.js that the vertices changes\n    particlesGeometry.attributes.position.needsUpdate = true;\n}&gt;\n</code></pre> <p>To get now the individual y positions depending on the x positions on the sin wave we need to get the x position of the particle and add it to the <code>elapsedTime</code> in the <code>Math.sin</code></p> <pre><code>const tick = () =&gt; {\n  const elapsedTime = clock.elapsedTime()\nfor(let i = 0;i&lt;count;i++){\n  const i3 = count*3;\n  const x = particlesGeometry.attributes.position[i3];\n  particlesGeometry.attributes.positions[i3+1] = Math.sin(elapsedTime+x);\n\n}\nparticlesGeometry.attributes.position.needsUpdate = true;\n}\n</code></pre> <p>The problem with this technique is that is super costly on the performance because on every frame we are looping through the entire array</p> <p>It is more performant to create custom shaders.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#optimization","title":"Optimization","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#fog","title":"Fog","text":"<p>To create fog around the center <code>scene.fog = new THREE.Fog(0x000000,15,25);</code></p> <p>You then should also set the renderer clear color to the fog color <code>renderer.setClearColor('0x000000');</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#calculate-distance-camera-and-a-certain-mesh","title":"Calculate distance camera and a certain mesh","text":"<p>We can use the distanceTo function to calculate it.</p> <pre><code>cubeMesh.position.distanceTo(camera.position)\n</code></pre> <p>So we actually can trigger something if the camera reaches an object. If the distance is &lt; than show something</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#delete-margin-of-threejs-scene","title":"Delete Margin of Three.JS scene","text":"<p>Deletes the margin and the scrollbar</p> <pre><code>body {\n  margin: 0;\n  overflow: hidden;\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#controls","title":"Controls","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#controls_1","title":"Controls","text":"<p>Three.JS has a lot of different already pre-build controls integrated which you can use for interactions. </p> <p>DeviceOrientationControls: Retrieves the device orientation of your device allows it and it rotates the camera accordingly.</p> <p>FlyControls: Enables you to move the camera like if you were on a spaceship. You can rotate on all 3 axes, go forward and backward.</p> <p>FirstPersonControls: Like the FlyControls but just with a fixed up axis. Like a flying bird that can't do a barrel roll.</p> <p>PointerLockControls: Its a JS API that hides the cursor, centers it, keeps sending the movement in the <code>mousemove</code> event callback. It allows you to create FPS games. But it just handles the camera rotation. Your have to do the camera position yourself.</p> <p>OrbitControls: Allows you to rotate around a point with the left mouse btn and translate with the right mouse btn, and zoom in with the mouse wheel.</p> <p>TrackballControls: They are similar to OrbitControls but without any limits for the vertical angle which allows upside down rotations.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#orbit-controls","title":"Orbit Controls","text":"<p>To import OrbitCamera we need to import it into our sketch <code>import {OrbitControls} from 'three/addons/controls/OrbitControls.js'</code></p> <p>Then set it in the code</p> <pre><code>import {OrbitControls} from 'three/addons/controls/OrbitControls.js'\n\nconst controls = new OrbitControls(camera,canvas);\n\n//update controls in animate\nfunction animate () {\n  //required if controls.enableDamping or controls.autoRotate set to true\n  controls.update();\n}\n</code></pre> <p>By default the OrbitControls is looking at the center of the scene. With the <code>target</code> property we can change where it is looking. <code>controls.target.y = -2</code></p> <p>To smooth the animation of the <code>OrbitControls</code> we can use <code>.enableDamping</code> property and set it to <code>true</code> <code>controls.enableDamping = true</code> <code>controls.dampingFactor = 0.03;</code> To let the orbit controls automatically rotate we can set <code>controls.autoRotate = true;</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#map-controls","title":"Map controls","text":"<p>Map Controls</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#fly-controls","title":"Fly controls","text":"<p>Fly Controls The camera follows where the mouse is without clicking thing mouse</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#first-person-controls","title":"First Person controls","text":"<p>It goes under pointerlock in the examples.</p> <pre><code>const controls = new PointerLockControls(camera, document.body);\n\ncontrols.addEventListener('lock', function () {\n  menu.style.display = 'none';\n});\n\ncontrols.addEventListener('unlock', function () {\n  menu.style.display = 'block'\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#drag-controls","title":"Drag controls","text":"<p>Drag elements Trackball Controls</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#trackball-controls","title":"Trackball controls","text":"<p>Trackball Controls</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#camera","title":"Camera","text":"<p>By default, in Three.js the field of view is vertical meaning if you put objects at the top and bottom and then rescale your window you still see them at the top and bottom part - they don't disappear.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#perspectivecamera","title":"PerspectiveCamera","text":"<p>FOV: The field of view is how large your vision angle is. The bigger that angle the more you can see from the scene/experience but also the elements in that scene get smaller and more distorted. The smaller the angle the less you can see from the scene but the elements are gonna appear larger. </p> <p>In conventional photography a lot of people use 50\u00b0 or 35\u00b0 field of view. Play with values between <code>45</code> and <code>75</code></p> <p><code>const camera = new THREE.PerspectiveCamera()</code></p> <p>Aspect Ratio- In most cases the width of the canvas divided by the height.</p> <p>Near - Anything within the distance between your camera and the near property you won't be able to see. Stick with numbers like 0.1 or 0.3. Values can be imagined in meters Far - Anything after the distance between your camera and the far property you won'T be able to see. Stick numbers like 200.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#define-how-farclose-orbin-camera-can-move","title":"Define how far/close orbin camera can move","text":"<pre><code>const controls = new OrbitControls(camera,renderer,domElement);\ncontrols.minDistance = 5;\ncontrols.maxDistance=15;\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#look-at-specific-target-with-orbit-camera","title":"Look at specific target with orbit camera","text":"<p><code>controls.targer.set(0,0,0)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#orthographic-camera","title":"Orthographic camera","text":"<p>For orthographic renders without perspective. Elements will have the same size on the screen regardless of their distance from the camera. All the lines are parallel. The values that the camera asks are the distance between the center of the camera and the outer edges of the box. The orthografic camera requires: left:left edge right:right edge top:top edge bottom:bottom edge near: far:</p> <p>To not get a distortion of your elements we need to multiple the left and right values with the aspect <code>aspectRatio</code></p> <pre><code>const aspectRatio = window.innerWidth/window.innerHeight\n\nconst orthoCamera = new THREE.OrthographicCamera(\n  -1*aspectRatio,\n  1 * aspectRatio,\n  1,\n  -1,\n  0.1,\n  200\n)\ncamera.position.z = 5\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#change-the-aspect-of-the-camera","title":"Change the aspect of the camera","text":"<p><code>camera.aspect = 4</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#render-multiple-camera","title":"Render Multiple Camera","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#arraycamera","title":"ArrayCamera","text":"<p>To render multiple cameras performant for example for VR we can use <code>ArrayCamera</code></p> <p>Each camera will render a specific area o the canvas.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#stereocamera","title":"StereoCamera","text":"<p>The <code>StereoCamera</code> is used to render the scene through two camera that mimic the eyes in order to create a parallax effect. You need a VR headset or red and blue glasses to see the result.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#cubecamera","title":"CubeCamera","text":"<p>The <code>CubeCamera</code> is used to get a render facing each direction(forward, backward, leftward, rightward, upward, and downward) to create a render of the surrounding. You can use it to create an environmentmap for reflection or a shadow map.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#materials","title":"Materials","text":"<p>Materials are used to put color on each visible pixel of the geometry. We write the algorithms that decide which color gets displaced at which pixel in shaders.</p> <p></p> <p>We can use one material for multiple meshes.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#mesh-basic-material","title":"Mesh Basic Material","text":"<p><code>THREE.MeshBasicMaterial</code> is a material that doesn't react to light.</p> <pre><code>const material = new THREE.MeshBasicMaterial({\n  //We ether can assign colors by name or by hexadecimal color: 0xff0000, or even by an instance off the Color class\n  color: 'red',\n  transparent:true,\n  opacity:0.5,\n})\n\n// We also can change the properties after creating the Material\nconst material = new THREE.MeshBasicMaterial({\n  color:'red'\n})\nmaterial.transparent =false;\nmaterial.color = new THREE.Color(0xff00ff);\n</code></pre> <p>There are multiple ways to set the color:</p> <pre><code>material.color = new THREE.Color('#ff0000')\nmaterial.color = new THREE.Color('#ff00')\nmaterial.color = new THREE.Color('red')\nmaterial.color = new THREE.Color('rgb(255,0,0)')\nmaterial.color = new THREE.Color('0xff0000')\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-transparency-of-material","title":"Set transparency of material","text":"<pre><code>material.transparency = true;\nmaterial.opacity = 0.5;\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#control-transparency-with-texture","title":"Control transparency with texture","text":"<p>To be able to use an alpha mat on an object we need to enable transparency of the material</p> <pre><code>material.transparency = true\nmaterial.alphaMat = alphaTexture\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#changing-sites-of-material","title":"Changing sites of material","text":"<p>Three.JS by default has one side materials. So with a plane if you Rotate it 180\u00b0 you wouldn't see the backside of the shape.</p> <p>For that we can use <code>THREE.DoubleSide</code> <code>material.side = THREE.DoubleSide</code></p> <p><code>THREE.DoubleSide</code> is a Three.JS constant so we don't need to use <code>new</code> If not necessary try to avoid DoubleSide because it raises the number of triangles to render.</p> <p><code>THREE.BackSide</code> when you want to show the Backside instead.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#turn-ofon-if-material-reacts-to-fog","title":"Turn of/on if material reacts to fog","text":"<p>Materials react by default to fog. We can change that with <code>material.fog = false</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#changing-all-materials-of-scene-or-object","title":"Changing all materials of scene or object","text":"<pre><code>scene.traverse((child) =&gt; {\n  if(child instanceof THREE.Mesh &amp;&amp; child.material instanceof THREE.MeshStandardMaterial){\n    child.material.envMap = environmentMap;\n    ...\n\n  }\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#wireframe-material","title":"Wireframe Material","text":"<p>We set a property inside the Material <code>wireframe: true</code></p> <pre><code>const mat = new THREE.MeshBasicMaterial({color: \"red\", wireframe:true})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshlambert-material","title":"MeshLambert Material","text":"<p>The <code>MeshLambert</code> material is a really performant material but also has less realism and options. It requires information from light.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshphong-material","title":"MeshPhong Material","text":"<p>With a MeshPong Material we get a light reflection/shininess property. The higher the value the more shiny is the material. <code>material.shininess = 90</code></p> <p>To change the color of the reflection we can use the <code>.specular</code> property. <code>material.specular = new THREE.Color(\"0xff0000\")</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshstandardmaterial","title":"MeshStandardMaterial","text":"<p>The <code>MeshStandardMaterial</code> is based on Physically based rendering(PBR) and gets used a lot in Three.js. The material gets effected my light and allows to use properties like <code>roughness</code> and <code>metalness</code>.</p> <pre><code>const material = new THREE.MEshStandartMaterial();\nmaterial.color = new THREE.Color(\"blue\");\nmaterial.map = colorTexture;\nmaterial.roughness = 0.3;\nmaterial.metalness = 0.6;\n</code></pre> <p>The <code>MeshStandardMaterial</code> also allows to add ambient oclussion maps. These add shadows where the texture of the map is dark. So we create more contrast around the dark parts of the texture. The <code>aoMap</code> requires a second set of uvs.</p> <pre><code>myGeo.geometry.setAttribute('uv2',new THREE.BufferAttribute(myGeo.geometry.attributes.uv.array,2))\n\nmaterial.aoMap = ambientOcclusionTexture\nmaterial.aoMapIntensity = 1\n</code></pre> <p>In a <code>MeshStandardMaterial</code> we also can add a displacementMap to displace the vertices of the geometry. It is important that the geometry has enough vertices to work with otherwise it is gonna look weardly distorded.</p> <p><code>material.displacementMap = displaceTex</code> <code>material.displaementScale = 0.05</code></p> <p>For the <code>metalness</code> and the <code>roughness</code> we can assign maps <code>material.metallnessMap = metalNessTexture</code> <code>material.roughnessMap = roughnessTexture</code></p> <p>If the result doesn't look as expected reset the <code>metalness</code> and <code>roughness</code> properties <code>material.metalness = 0</code> <code>material.roughness = 1</code></p> <p>We also can add the material specific normal map to add details without having a high subdivision of the geometry <code>material.normalMap = normalTexture</code> <code>material.normalScale.set(0.2,0.2)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshphysicalmaterial","title":"MeshPhysicalMaterial","text":"<p>The <code>MeshPhysical</code> material has same properties like the <code>MeshStandard</code> but has more properties like <code>reflectivity</code> and <code>clearcoat</code></p> <p><code>reflectivity</code> allows you to have a reflective material which has a low <code>metalness</code> value.</p> <pre><code>const material = new THREE.PhysicalMaterial();\nmaterial.color = new THREE.Color(0xff33ff);\nmaterial.reflectivity = 0.3;\n</code></pre> <p><code>clearcoat</code> is like a reflective gloss or like a wax on the car.</p> <p><code>material.clearcoat = 0.9</code></p> <p></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshnormalmaterial","title":"MeshNormalMaterial","text":"<p>This materials shows the normals of the object. <code>const normalMat = new THREE.MeshNormalMaterial()</code></p> <p><code>MeshNormalMaterial</code> has also the property <code>.flatShading</code> which allows us to flatten the faces of the geometry - normals won't be interpolated between the vertices.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshtoonmaterial","title":"MeshToonMaterial","text":"<p>The <code>MeshToonMaterial</code> is similar to the <code>MeshLambertMaterial</code> but creates a more toon style. <code>material = new THREE.MeshToonMaterial()</code> It creates a coloration with two steps - one for light and one for shadow. With a gradient texture we can get more color steps. <code>material.gradientMap = gradientTexture</code></p> <p>When the gradient texture is small Three.JS is not automatically picking the nearest pixel on the texture but is interpolating the pixel colors. In the case of <code>MeshToonMaterial</code> we want to prevent that. To make it work we need to set <code>.minFilter</code>, <code>.magFilter</code> and deactivate the generation of mipmaps</p> <pre><code>gradientTexture.minFilter = THREE.NearestFilter\ngradientTexture.maxFilter = THREE.NearestFilter\ngradientTexture.generateMipMaps = false\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshmatcapmaterial","title":"MeshMatcapMaterial","text":"<p>The <code>MeshMatcapMaterial</code> can create a nice look while being very performant. It needs a texture that looks like a sphere</p> <p>The normal orientation relative to the camera decides which color the material is gonna pick for the vertex.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#meshdepthmaterial","title":"MeshDepthMaterial","text":"<p>The <code>MeshDepthMaterial</code> will color the parts of a material according to the closeness of the pixel to the camera.</p> <p>If can be useful if you want to create effects where you need to know how far the pixel is from the camera.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#pointsmaterial","title":"PointsMaterial","text":"<p>When you work with particles it makes sense to use the <code>PointsMaterial</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#shadermaterial","title":"ShaderMaterial","text":"<p>To create material for your geometries from shaders you can use <code>ShaderMaterial</code> and <code>RawShaderMaterial</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#environment-map","title":"Environment map","text":"<p>With environment maps we can add images of the surrounding scene. They create more realistic reflection or refraction for your materials and lighting. We can use environment maps as a background or on the objects as reflection and lightning.</p> <p>To add the environment map to our material we use the <code>.envMap</code> property.</p> <p>Three.js only supports cube environment maps. They contain 6 images each for one side of a environment.</p> <p>To load a cube environment map we use <code>CubeTextureLoader</code></p> <pre><code>const cubeTextureLoader = new THREE.CubeTextureLoader()\nconst environmentMapTexture = cubeTextureLoader.load([\n    '/textures/environmentMaps/px.jpg',\n    '/textures/environmentMaps/nx.jpg',\n    '/textures/environmentMaps/py.jpg',\n    '/textures/environmentMaps/ny.jpg',\n    '/textures/environmentMaps/pz.jpg',\n    '/textures/environmentMaps/nz.jpg'\n])\nmaterial.envMap = environmentMapTexture\n</code></pre> <p>You can find environment maps on Poly Haven But you need to convert the HDRI into a cubemap with HRDI to Cubemap. Maybe convert the <code>png</code> into <code>jpg</code></p> <p>To apply an environment map to the whole scene as a background we can assign the map to the <code>scene</code> itself <code>scene.background = envMap</code> <code>scene.environment = envMap</code></p> <p>To get a more realistic render it is essential to add an environment map to lighten the model itself.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#intensity","title":"Intensity","text":"<p>When the objects look to dark we can increase the <code>environmentintensity</code> property <code>scene.environmentIntensity = 3</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#bluriness","title":"Bluriness","text":"<p>To blur the background we can change <code>backgroundBlurriness</code> property.</p> <p><code>scene.backgroundBlurriness = 0.2</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#brightness","title":"Brightness","text":"<p>To alter the intensity of the background we can change <code>backgroundIntensity</code> <code>scene.backgroundIntensity = 4</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#rotation","title":"Rotation","text":"<p>If you want to change the rotation of your environment map you can change the <code>backgroundRotation</code> and the <code>environmentRotation</code> properties.</p> <p><code>scene.backgroundRotation.y = 2</code> <code>scene.backgroundRotation.y = 3</code></p> <p>Be aware of changing the <code>x</code> and <code>z</code> axis because normally you want the floor stay on the bottom</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#hdr","title":"HDR","text":"<p>\"High Dynamic Range Image\"(HDRI) have a higher range of color values stored in the image - for example luminosity.</p> <p>They are often <code>equirectangular</code> but don't have to be.</p> <p>To load HDRI we neet to import the <code>RGBELoader</code> <code>import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'</code></p> <p><code>RGBE</code> is the encoding for the HDRI images. The E stands for exponent which stores the brightness.</p> <pre><code>const rgbeLoader = new RGBELoader();\nrgbeloader.load('/environmentMaps/../name.hdr',(envMap) =&gt; {\n  console.log(envMap)\n  envtMap.mapping = THREE.EquirectangularReflectionMapping\n\n  scene.background = envMap;\n  scene.environment = envMap;\n})\n</code></pre> <p>The only problem with hrds is that they are more costly for the performance. Using lower resolutions and blurring the background can help to reduce the performance impact.</p> <p>To import <code>exr</code>files we need a different loader</p> <pre><code>import { EXRLoader } from 'three/addons/loaders/EXRLoader.js'\n\nconst exrLoader = new EXRLoader()\n\nexrLoader.load(\"path\",(envMap) =&gt; {\n  envMap.mapping = THREE.EquirectangularReflectionMapping\n  scene.background = environmentMap\n  scene.environment = environmentMap\n})\n</code></pre> <p>For <code>jpg</code> environment maps set the <code>colorSpace</code> for the environment map to <code>THREE.SRGBColorSpace</code> and maybe increase the <code>environmentIntensity</code> of the scene. <code>envMap.colorSpace = THREE.SRGBColorSpace</code> <code>scene.environmentIntensity = 2</code></p> <p>Also we need to load the texture with <code>THREE.TextureLoader()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#grounded-environment-map","title":"Grounded environment map","text":"<p>The problem with environment maps is that when we have an object in the center and we want to use the environment actually as a background texture than the object always seem to fly - the object is too far away from the floor. For that we can use <code>ground projected skybox</code></p> <p><code>import {GroundedSkybox} from 'three/addons/objects/GroundedSkybox.js'</code> We then initiate a <code>GroundedSkybox(envMap,15,70)</code> in the callback of the environmentmap loader.</p> <pre><code>rgbeLoader.load('path',(envMap)=&gt; {\n  //...\n  const skybox = new GroundedSkybox(envMap,15,70)\n  scene.add(skybox);\n})\n</code></pre> <p>This creates a sphere that is squished at the bottom so the center of the scene is closer to the bottom of the <code>GroundedSkybox</code> We then adapt the <code>y-position</code> of the sphere to match with the scener of the scene Setting the <code>skybox.material.wireframe</code> <code>true</code> makes the positioning easier.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#real-time-environment-map","title":"Real-time environment map","text":"<p>We also can render every frame of the scene, store the render in a <code>render target</code> and then apply it as a environmentmap to the scene. This allows us to have a real-time environmentmap.</p> <p>So we render the scene to a <code>THREE.WebGLCubeRenderTarget()</code> and assign that <code>texture</code> to the <code>scene.environment</code> <pre><code>const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(\n  256,//Resolution of each side\n  {\n    //Properties to set the render Target\n    type:THREE.FloatType//32 bits to save information\n    //type:THREE.HalfFloatType //16 bits to store information\n  }\n)\nscene.environment = cubeRenderTarget.texture\n</code></pre> Because of performance reasons try to set the smallest possible resolution.</p> <p>We then create a <code>CubeCamera</code> to render all 6 sides of the scene. <code>THREE.CubeCamera(near,far,WebGLCubeRenderTarget)</code> <code>const cubeCam = new THREE.CubeCamera(0.1,100,cubeRenderTarget)</code></p> <p>Then on every frame we render the camera with <code>cubeCamera.update(renderer,scene)</code></p> <pre><code>//loading base environmentmap\n...\n\nconst cubeRenderTarget = new THREE.WEbGLCubeRenderTarget(\n  256,\n  {\n    type:THREE.FloatType\n  }\n)\nscene.environment = cubeRenderTarget.texture\n\n//Creating a light donut\nconst lightDonut = new THREE.Mesh(\n  new THREE.TorusGeometry(8,0.5),\n  new THREE.MeshBasicMaterial({color: new THREE.Color(10,4,2)})//When you have a high-range texture you can use color values beyond 1\n)\nscene.add(lightDonut)\n\nconst clock = new THREE.Clock();\nconst tick = () =&gt; {\n  const elapsedTime = clock.getElapsedTime()\n\n  lightDonut.rotation.x = elapsedTime;\n  lightDonut.rotation.y = elapsedTime;\n  lightDonut.rotation.z = elapsedTime;\n\n}\n</code></pre> <p>To decide which objects get included in the rendering of the camera and which get's ignored we can create <code>Layers</code>. So by setting layers on a camera it will only show the objects that have the same Layer. By default all camera and object layers are set to <code>0</code>. </p> <p>To add a layer <code>object.layers.enable()</code> To remove a layer <code>object.layers.disable()</code> To only enable one layer and disable all others <code>object.layers.set()</code></p> <p>So if you want an real-time environmentmap with moving lightning you would <code>set</code> the lighning source and ignore all other objects. <code>cubeCamera.layers.set(1)</code> <code>lightDonut.layers.set(1)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#normals","title":"Normals","text":"<p>Normals contain information about the direction of the outside of the face on each vertex of the mesh. You can image normals as arrows coming out of the vertex of the geometry and pointing into a direction.</p> <p>The material will then pick colors on the texture according to the normal orientation relative to the camera. <code>material.matcap = matcapTexture</code></p> <p>You can find a big list of matcaps here</p> <p>To create your own matcap material you can render a sphere in front of a camera into a squared image.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#textures","title":"Textures","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#what-are-textures","title":"What are Textures?","text":"<p>Textures are images that will cover the surface of your geometry. There are different textures that create certain effects on the appearance of the object.</p> <p>Color/Albedo: It takes the pixel of the texture and applies it to the geometry</p> <p>Alpha: A grayscale image where the white parts define that the texture will be shown and the black parts won't.</p> <p>Height: A grayscale image that moves the vertices of the geometry to create a relief effect. For that your geometry needs certain subdivision to be able to create the relief.</p> <p>Normal: Adds details but doesn't actually changes the geometry. It basically fakes to the light source that some faces of the geometry are oriented in a certain direction. Good way to add details without subdividing your geometry.</p> <p>Ambient Occlusion: Grayscale image that fakes shadow on the surface of the geometry.</p> <p>Metalness: Grayscale image that specifies which parts of the geometry are metallic(white) and which parts are not(black)</p> <p>Roughness: Grayscale image that defines which parts of the surface are rough(white) or smooth(black)</p> <p>These textures we use to apply Physically Based Rendering(PBR) to our scene to create realistic renders.</p> <p>We can get good free materials at FreePBR.com</p> <p>To load the textures into THREE.JS we need to first initialize a loader that loads the textures.</p> <p>More information about PBR here and here</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#loading-textures","title":"Loading Textures","text":"<p>There are different ways to load textures.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#loading-with-native-js","title":"Loading with native JS","text":"<p>With JS we need to create an <code>Image</code> instance, listen to the <code>load</code> event and the assign it to the <code>src</code> of the Image.</p> <pre><code>const Image = new Image()\nconst texture = new THREE.Texture(image)\nImage.addEventListener('load',()=&gt; {\n  texture.needsUpdate = true\n})\nimage.src = 'textures/.../filename.png'\n// we then assign the texture to the map property of the material\nconst material = new THREE.MeshBasicMaterial({texture})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#using-texture-loader","title":"Using Texture Loader","text":"<pre><code>//Only create this once - even if you use the loader more often - its a utility class\nconst texLoader = new THREE.TextureLoader();\n\n// initialize the texture\nconst texture = textureLoader.load('path/to/file')\n\n// assign texture to map property of a material\nconst material = new THREE.MeshStandardMaterial();\nmaterial.map = texture;\nmaterial.roughnessMap = textureRoughness;\nmaterial.roughnessMap = 0.1 // won't effect parts of the texture that aren't rough we only apply this value to the parts that are specifies as roughness\nmaterial.metalnessMap = textureMetall;\nmaterial.normalMap = normal; // normalmap holds information about how to fake the way light bounces of of this material.\nmaterial.displacementMap = heightMap; //The heightmap actually displaces the vertices of the Mesh\nmaterial.displacementScale = 0.1;\n/*ambient occlusion is technique to add more depth and realism to the scene. it simulates how light is occluded or blocked where elements are close together or one elements throws shadows on another.\nthe ao map requires a second set of uvs. We can pass them from the actual geometry*/\n\nconst uv2 = new THREE.BufferAttribute(geometry.attribute.uv.array,2)//2 is for the item size x and y\ngeometry.setAttribute('uv2',uv2);\n)\nmaterial.aoMap = grassAo;\nmaterial.aoMapIntensity = 1\n</code></pre> <p>We also can call this directly in the material initiation</p> <pre><code>const loader = new THREE.TextureLoader();\nconst material = new THREE.MeshStandardMaterial({\n  map = loader.load(\"path\")\n})\n</code></pre> <p>If the loading of your functions not worked as you expected, in the <code>.load</code> function we can call three functions to control if the loading of the function worked properly.</p> <pre><code>textureLoader.load(\"path\",\n  () =&gt; {\n    console.log('loading finished')\n  },\n  () =&gt; {\n    console.log('loading progressing')\n  },\n  () =&gt; {\n    console.log('loading error')\n  }\n)\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#using-loading-manager","title":"Using Loading Manager","text":"<p>When you want to load multiple textures and be notified after the successful load we can also use the <code>LoadingManager</code>class and pass it into the <code>TextureLoader</code></p> <pre><code>const loadingManager = new THREE.LoadingManager();\nconst textureLoader = new THREE.TextureLoader(loadingManager)\n// you the can listen to the different events of the Loading manager\nloadingManager.onStart = () =&gt; {\n  console.log('loading started')\n}\nloadingManger.onLoaded = () =&gt; {\n  console.log('loading finished');\n}\nloadingManager.onProgress = () =&gt; {\n  console.log('loading progressing')\n}\nloadingManger.onError = () =&gt; {\n  console.log('loading error');\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#uv-unwrapping","title":"UV unwrapping","text":"<p>UV Unwrapping defines how the texture is wrapped around the surface of the geometry. Each vertex has a 2D coordinate on a flat square plane that defines which part of the texture will displaces at that vertex position.</p> <p>To see the uv coordinates you can use the <code>geometry.attributes.uv</code> property.</p> <p>Three.js creates these uv properties for it's primitives. But if you create your own geometry in a 3D software or you import geometry you need specify the uv coordinates and need to to the uv unwrapping yourself.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#uv-maps","title":"UV Maps","text":"<p>A UV Map tells THREE.js how to map a texture on an object. By default THREE.js maps textures differently than blender. Blender wraps a texture over all sides of an object. Three.js maps the whole texture on one face.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#transforming-the-texture","title":"Transforming the texture","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#repeat","title":"Repeat","text":"<p>Especially if you use texture on bigger surfaces it can make sense to change the repeat of the texture otherwise it gets streched a lot.</p> <p>Lets repeat this texture 10 times x and 10 times y <code>texture.repeat.x = 10</code> <code>texture.repeat.y = 10</code> <code>texture.repeat.set(10,10)</code> To make this work we need to set the <code>wrapS</code> and <code>wrapT</code> property of the texture.</p> <pre><code>grassTexture.wrapT = grassTexture.wrapS = THREE.RepeatWrapping\n</code></pre> <p>Another type of wrapping is <code>THREE.MirrorRepeatWrapping</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#offset","title":"Offset","text":"<p>We can offset the texture with the <code>offset</code> property. <code>texture.offset.x = 0.5</code> <code>texture.offset.y = 0.5</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#rotation_1","title":"Rotation","text":"<p>To rotate the texture we use the <code>rotation</code> property. <code>texture.rotation = Math.PI *0.25</code> The rotation occurs around the bottom left corner which is the <code>0,0</code> uv coordinate. To change the pivot point of the rotation you can use the <code>center</code> property</p> <pre><code>texture.rotation = Math.PI 0.25\ntexture.center.x = 0.5\ntexture.center.y = 0.5\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#filtering-and-mipmapping","title":"Filtering and Mipmapping","text":"<p>Mipmapping creates smaller versions of the texture - always halfed in size till 1x1. The GPU the picks the right texture for the render. Three.js and the GPU handle this and we can decide which algorithm to use for that. There are two types of filter alogrithms:</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#minification","title":"Minification","text":"<p>The minification filter happens when pixels of the texture are smaller than the pixels of the render or the texture is to big for the surface it covers. Different filter:</p> <pre><code>THREE.NearestFilter\nTHREE.LinearFilter\nTHREE.NearestMipmapNearestFilter\nTHREE.NearestMipmapLinearFilter\nTHREE.LinearMipmapNearestFilter\nTHREE.LinearMipmapLinearFilter//Default filter\n</code></pre> <p>To set the filter <code>texture.minFilter = THREE.NearestFilter</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#magnification-filter","title":"Magnification Filter","text":"<p>Magnification filter works when the pixels of the texture are bigger thant the renders pixel - the texture is too small for the surface. The texture gets then blurry because it gets stretched on the large surface. Filter: <code>THREE.NearestFilter</code> <code>THREE.LinearFilter//Default</code> <code>texture.magFilter = THREE.NearestFilter</code></p> <p>Generally <code>THREE.NearestFiler</code> is computationally cheaper than the other filter. Also only mipmaps for the <code>minFilter</code> property. If you are using <code>THREE.NearestFilter</code> you don't need mipmaps and you can deactivate them with <code>texture.generateMipmaps = false</code> <code>texture.minFilter = THREE.NearestFilter</code> This will creates less load for the GPU.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#texture-format-and-optimisation","title":"Texture Format and optimisation","text":"<p>Be aware of 3 factors when you prepare your textures: Weight Size/Resolution Data</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#weight","title":"Weight","text":"<p>The users that are going to your website are going to download the textures. Use <code>.jpg</code>(lossy compression but lighter) or <code>.png</code>(lossless compression but heavier) for your files.</p> <p>Try to get an acceptable image but as light as possible TinyPNG can help.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#size","title":"Size","text":"<p>Try to reduce the size of the images as much as possible because every pixel of the image needs to get stored on the GPU - and with mipmapping even more pixel.</p> <p>The size of your texture must have a power of 2 <code>512x512</code> <code>1024x1024</code> <code>512x2048</code></p> <p>or otherwise Three.js have to stretch the texture to the next power of two.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#data","title":"Data","text":"<p>For normal textures it makes sense to use <code>png</code> so you get a lossless compression.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#sources","title":"Sources","text":"<p>To get good textures you can go to Poliigon 3Dtextures.me</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#glsl-as-material","title":"GLSL as Material","text":"<pre><code>function createBackMaterial() {\n   let m = new THREE.MeshBasicMaterial({\n     color: 0x66775f,\n     side: THREE.BackSide,\n     onBeforeCompile: (shader) =&gt; {\n       shader.fragmentShader = `\n         ${shader.fragmentShader}\n       `.replace(\n         `vec4 diffuseColor = vec4( diffuse, opacity );`,\n         `\n         vec3 col = mix(diffuse, diffuse + vec3(0.75), smoothstep(0.5, 0.7, vUv.y));\n         vec4 diffuseColor = vec4( col, opacity );\n         `\n       );\n     console.log(shader.fragmentShader);\n     },\n   });\n   m.defines = { USE_UV: \"\" };\n   return m;\n };\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#displace-material-via-displacement-map","title":"Displace material via displacement map","text":"<pre><code>const textureLoader = new THREE.TextureLoader();\nconst displacementMap = textureLoader.load(`src/assets/img/height.png`)\ndisplacementMap.wrapS = displacementMap.wrapT = THREE.RepeatWrapping;\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#blending-materials","title":"Blending Materials","text":"<p>We can blend the materials of the different objects when we set  <code>blending:THREE.AdditiveBlending</code> for the materials.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#scene","title":"Scene","text":"<p>The <code>scene</code> object has <code>.children</code> property which allows us to access the children of the scene and more importantly loop through all the children of the scene.</p> <pre><code>scene.children.forEach((child) =&gt; {\n  //Test if child is actually a mesh\n  if(child instanceof THREE.Mesh){\n  child.rotation.x += 0.01;\n  }\n})\n</code></pre> <p>To be more performant because you don't want to loop through all the children on every frame you create a group add that to the scene and then loop through the children of the group. Now we only loop through the elements that we really want to.</p> <pre><code>...\nconst group = new THREE.Group();\ngroup.add(plane,sphere,cylinder);\nscene.add(group);\n\ngroup.children.forEach((child)=&gt; {\n  if(child instance of THREE.mesh){\n    child.rotation.x +=0.2;\n  }\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#group","title":"Group","text":"<p>If you have multiple objects that belong together and maybe need to be transformed together it can make sense to group them together with the <code>Group</code> class which inherits also from <code>Object3D</code>.</p> <pre><code>const group = new THREE.Group()\ngroup.scale.y = 2\nscene.add(group)\n</code></pre> <p>You then can add objects to the group</p> <pre><code>const boxGeo = new THREE.BoxGeometry(1,1,1);\nconst boxMat = new THREE.MeshBasicMaterial({color:0xff0000})\nconst mesh = new THREE.Mesh(boxGeo,boxMat);\ngroup.add(mesh)\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#frustum-culling","title":"Frustum Culling","text":"<p>Three.js calculates if the geometry is on the screen and if not the object won't be rendered.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#light","title":"Light","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#ambientlight","title":"AmbientLight","text":"<p>In reality light reflects of all the surface. To create some light even behind our objects we want to add an <code>AmbientLight</code> to the scene.</p> <pre><code>const ambLight = new THREE.AmbientLight(0xffffff,0.2);\nambLight.intensity = 0.5;\nscene.add(ambLight);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#point-light","title":"Point Light","text":"<p>A <code>Point Light</code> has a small light source and spreads uniformly in every direction <code>const pointLight = new THREE.PointLight(color,intensity)</code></p> <pre><code>const pointLight = new THREE.PointLight(0xffffff,1);\npointLight.position.set(5,5,5);\nscene.add(pointLight);\n</code></pre> <p>We also can control how the intensity of the light fades and how fast it is fading <code>const pointLight = new THREE.PointLight(color,intensity,distance,decay)</code> <code>const pointLight = new THREE.PointLight(0xff0000,0.5,8,5)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#directionallight","title":"DirectionalLight","text":"<p>If you want a light like the sun you can use a <code>THREE.DirectionalLight('color',intensity)</code></p> <p>To have it shine more from the side we move it <code>directionalLight.position.set(1,0.2,0.);</code></p> <p>We also can set the target of the directional light with the <code>target</code> property <code>directionalLight.target.position.set(0,5,0)</code> <code>directionalLight.target.updateWorldMatrix()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#hemispherelight","title":"HemisphereLight","text":"<p>The <code>HemisphereLight</code> is similar to the <code>AmbientLight</code> but it emits a different color from the ground than from the sky. <code>const hemLight = new THREE.HemisphereLight('colorSky','colorGround',intensity)</code></p> <p>You also can add <code>flatShading:true</code> as a parameter.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#rectarealight","title":"RectAreaLight","text":"<p>Works like a rectangle light. It mixes directional light with diffuse light. <code>const rectAreaLight = new THREE.ReactAreaLight(color,intensity,widthRect,height)</code> <code>const rectAreaLight = new THREE.RectAreaLight(0x0000ff, 2, 1, 1)</code></p> <p>This light only works with MeshStandardMaterial and MeshPhysicalMaterial</p> <pre><code>rectAreaLight.position.set(-2,0,1)\n// to look at center of the scene\nrectAreaLight.lookAt(new THREE.Vector3())\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#spotlight","title":"SpotLight","text":"<p>Works like a flashlight with a cone of light starting at a point and oriented in one direction. <code>distance</code> - At which distance drops intensity to 0 <code>angle</code> - How big is the beam <code>penumbra</code>- How diffused is contour of the beam <code>decay</code> - how fast does the light dim <code>const spotLight = new THREE.SpotLight(color,intensity,distance,angle,penumbra,decay)</code> <code>const spotLight = new THREE.SpotLight(0xff0022,0.5,10,Math.PI * 0.1,0.25,1)</code></p> <p>To rotate the <code>SpotLight</code> we have to add its <code>.target</code> to the scene</p> <pre><code>const spotLight = new THREE.SpotLight(0xff0022,0.5,10,Math.PI*0.1,0.25,1);\nspotLight.position.set(0,3,2);\nspotLight.target.position.x = -0.5;\nscene.add(spotLight.target);\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#performance-optimizations","title":"Performance optimizations","text":"<p>Try to add as few lights as possible and use the light that has the lowest performance cost because lights are intensive to compute.</p> <p>Minimal Cost:</p> <ul> <li>AmbientLight</li> <li>HemisphereLight   Moderate cost:</li> <li>DirectionalLight</li> <li>PointLight   High Cost</li> <li>SpotLight</li> <li>RectAreaLight</li> </ul>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#baking-lights","title":"Baking lights","text":"<p>Baking is a technique where we already can bake in the lightings of the scene into the material texture so we don't need real time lighting.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#light-helpers","title":"Light Helpers","text":"<p>We can use Three.js helpers to see how the lights are positioned</p> <pre><code>const hemisphereLightHelper = new THREE.HemisphereLightHelper(hemisphereLight,0.2);\nscene.add(hemisphereLight);\n\nconst directionalLightHelper = new THREE.DirectionalLightHelper(diretionalLight,0.2);\nscene.add(directionalLight);\n\nconst pointLightHelper = new THREE.PointLightHelper(pointLight,0.2);\nscene.add(pointLightHelper)\n\nconst spotLightHelper = new THREE.SpotLightHelper(spotLight);\nscene.add(spotLightHelper);\n//needs to be updated\nwindow.requestAnimationFrame(()=&gt; {\n  spotLightHelper.update();\n})\n</code></pre> <pre><code>import { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js'\n\nconst rectAreaLightHelper = new RectAreaLightHelper(reactAreaLight)\nscene.add(rectAreaLightHelper)\n//needs to be updated\nwindow.requestAnimationFrame(() =&gt;\n{\n    rectAreaLightHelper.position.copy(rectAreaLight.position)\n    rectAreaLightHelper.quaternion.copy(rectAreaLight.quaternion)\n    rectAreaLightHelper.update()\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#shadows","title":"Shadows","text":"<p>The goal with shadows is to draw realistic shadows with keeping a reasonable frame rate. How Three.js creates shadows is it first does a render for each light that is suppose to create shadows. These renders simulate what the light sees - similar to what a camera sees. It then creates a MeshDepthMaterial that replaces all meshes materials. The result is stored as a shadow maps texture. These are used on every material that is supposed to receive shadows.</p> <p></p> <p>To activate shadows we set them in the renderer <code>renderer.shadowMap.enabled = true</code></p> <p>We then decide for each object in the scene if it can cast shadows or not and set the property <code>castShadow</code> to true. <code>geo.castShadow = true</code></p> <p>At the end we also have to activate the shadows on the light sources. <code>directionalLight.castShadow = true</code></p> <p><code>PointLight,DirectionalLight,SpotLight</code> allow to activate shadows.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#optimization-of-shadow-maps","title":"Optimization of shadow maps","text":"<p>Generally one problem with shadow maps in Three.js is that it handles every shadow map for every object by itself so if you have multiple objects it doesn't merge the shadows of different objects.</p> <p>Beware of settings to many <code>PointLights</code> with shadows in your scene. Three.js creates a cube shadow map and has to render 6 shadow map textures for each side of the directions.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#size-of-render","title":"Size of Render","text":"<p>To improve the shadows we can access the <code>shadowMap</code> property to change the size of the shadowmap <code>directionalLight.shadowMap.mapSize.width = 1024</code> <code>directionalLight.shadowMap.mapSize.height = 1024</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#near-and-far","title":"Near and far","text":"<p>If you have a situation where your shadow is cropped or you can't see the shadow at all it can be a problem of <code>near</code> and <code>far</code>. Three.js uses Cameras to render the shadow map so the <code>near</code> and <code>far</code> values of these cameras can cut off the shadow.</p> <p>We can access the camera that is used for a shadow map with <code>light.shadow.camera</code> To see the <code>near</code> and <code>far</code> values it can be useful to use a <code>CameraHelper</code> <code>const lightCameraHelper = new THREE.CameraHelper(light.shadow.camera)</code> <code>scene.add(lightCameraHelper)</code></p> <p>We then can adjust the <code>near</code> and <code>far</code> values <code>light.shadow.camera.near = 1</code> <code>light.shadow.camera.far = 6</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#amplitude","title":"Amplitude","text":"<p>For DirectionalLight Three.js uses a OrthographicCamera. We can adjust and reduce the field of view to create more accurate shadows - the smaller the values the more accurate the shadows - but only reduce the values till you cut off your shadows.</p> <pre><code>directionalLight.shadow.camera.top = 2\ndirectionalLight.shadow.camera.right = 2\ndirectionalLight.shadow.camera.bottom = -2\ndirectionalLight.shadow.camera.left = -2\n</code></pre> <p>For SpotLight Three.js uses a Perspective Camera so have to set the field of view <code>.fov</code> property. <code>spotLight.shadow.camera.fov = 20</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#blur","title":"Blur","text":"<p>To reduce the sharp edges of your shadow if can make sense to add some <code>blur</code> to your shadows. <code>light.shadow.radius = 5</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#shadow-map-algorithm","title":"Shadow map algorithm","text":"<p>Three.js has different types of shadow map algorithms that we can use:</p> <ul> <li><code>THREE.BasicShadowMap</code> - Very performant but low quality</li> <li><code>THREE.PCFShadowMap</code> - Less performant with smoother edges</li> <li><code>THREE.PCFSoftShadowMap</code> - Less performant but edges are even smoother</li> <li><code>THREE.VSMShadowMap</code> - Less performant</li> </ul> <p>We can set the shadow map algorithm with <code>renderer.shadowMap.type = THREE.PCFSoftShadowMap</code> Three.js uses <code>PCFShadowMap</code> as the default.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#baking-shadows","title":"Baking shadows","text":"<p>A good alternative to using Three.js shadows is to bake the shadows similar to baking the lights. The problem is that they only work for non dynamic scenes where the objects don't change there position or rotation.</p> <p>Another more dynamic way is to bake a shadow and then set it as a material for a plane that lies a little bit over the ground plane. If the object then comes close to the ground we set the opacity of that material to high and if it far from ground we set it to low</p> <pre><code>const sphereShadow = new THREE.Mesh(\n    new THREE.PlaneGeometry(1.5, 1.5),\n    new THREE.MeshBasicMaterial({\n        color: 0x000000,\n        transparent: true,\n        alphaMap: simpleShadow\n    })\n)\n...\nsphereShadow.position.y = plane.position.y + 0.01\nsphereShadow.material.opacity = (1 - sphere.position.y) * 0.3\n</code></pre> <p>See more at the end of this Site</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#optimizations","title":"Optimizations","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#one-instance-of-material-and-geometry","title":"One Instance of material and geometry","text":"<p>Use one material and one geometry for multiple meshes. If you create a loop to create multiple meshes set the material and the geometry outside</p> <pre><code>const material = new THREE.MeshMatcapMaterial({matcap:matcapTexture});\n\nconst geo = new THREE.BoxGeometry(1,1,1);\n\nfor(let i = 0; i&lt;100;i++){\n  const mesh = new THREE.Mesh(geo,material);\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#disposing-unused-instances","title":"Disposing unused instances","text":"<p>To improve the performance and avoid memory leaks we should dispose unused Three.js library entities. Whenever we create an instance of a three.js type, certain amount of memory gets allocated.</p> <p>Free up our memory of unused instances of three.js types we can use the <code>.dispose()</code> method.</p> <p><code>myMaterial.dispose()</code> <code>myGeo.dispose()</code> <code>scene.remove(Mesh/Points)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#realistic-render","title":"Realistic Render","text":"<p>The goal is to render as realistic as possible.</p> <p>For environmentmap try to use the smallest possible texture - especially if you don't use it as a background.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#tone-mapping","title":"Tone mapping","text":"<p>Tone mapping is a technique where Three.js fakes the process of converting low dynamic range(LDR) values to high dynamic range(HDR) values. <code>renderer.toneMapping = THREE.NoToneMapping</code>(default) Possible values that we can use are: <code>THREE.LinearToneMapping</code> <code>THREE.ReinhardToneMapping</code> - settings similar to a camera with improper settings. <code>THREE.CineonToneMapping</code> <code>THREE.ACESFilmicToneMapping</code></p> <p>To influence the amount of light that we want to allow in the scene we can adjust the expose of the tone mapping. <code>renderer.toneMappingExposure = 3</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#antialiasing_1","title":"Antialiasing","text":"<p>Aliasing happens because the renderer tests what geometry is being rendered in that currently rendered pixel. Because the edges of the geometry are not aligned with the vertical and horizontal particle grid the geometry seems to be pixelated because every pixel just can have one color.</p> <p>One solution is to increase the resolution of the renderer and render the scene at a much higher resolution than needed and then shrinking it down. This is called Super Sampling Anti-Aliasing(SSAA). - Render everything at 2x the size - Resize it back down to normal size - Final image is smoother because each pixel is average of 4 higher-resolution pixels</p> <p>This leads to a better quality but also is heavy on the performance.</p> <p>Another way is Multi Sampling Anti-Alisaing which just applies the anti-aliasing to the edges of the object, where jaggedness is most visible. - Only samples multiple points on the geometry edges - Blends samples to produce smoother edges. Like only smoothing out the lines of a drawing without touching the inside or the background.</p> <p>This is much faster than SSAA but doesn't work well with certain effects like post-processing shaders or transparent objects.</p> <p>We can activate MSAA by setting <code>renderer.antialias:true</code> in the `WebGLRenderer.</p> <p>Because screens with a pixel ratio above 1 don't need antialiasing it can make sense to only allow antialiasing when the screen pixel ratio is below 2.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#shadow","title":"Shadow","text":"<p>To create realistic shadows when we are using environmentmap we need to add a light in the scene that is similar to the lighting of the environmentmap. Then activate shows in the renderer <code>renderer.shadowMap.enabled=true</code> <code>renderer.shadowMap.type = THREE.PCFSoftShadowMap</code> <code>directionalLight.castShadow = true</code></p> <p>When we enable shadows for a <code>directionalLight</code> Three.js uses an orthographic camera to render the shadow map - a black and white picture of what the light sees.  For that camera we also can set the <code>near</code> and <code>far</code> values - they define how close or far objects can be form the light to cast shadows. So we can reduce the default value of <code>far</code> <code>directionalLight.shadow.camera.far = 20</code></p> <p>So only object between 1 and 20 units away from the light should cast shadows.</p> <p>To increase the quality of the shadows we also can increase the shadow map to something like <code>1024x1024</code>. <code>directionalLight.shadow.mapSize.set(1024,1024)</code> Also play with smaller resolutions if you get good enough results and can improve your performance.</p> <p>To activate shadows in all materials of the loaded object we can create a function <code>updateAllMaterials</code> that activates the shadows in each material and call it when the model got loaded. <pre><code>const updateAllMaterials = () =&gt; {\n  //\n  scene.traverse((child) =&gt; {\n    if(child.isMesh){\n      child.castShadow = true\n      child.receiveShadow = true\n    }\n  })\n}\n</code></pre> <code>traverse()</code> is a build in Three.js function that loops through the entire hierachy of the scene and all objects in scene graph - including children, grandchildren etc.</p> <p>Especially when you use your own created models it can happen that you get <code>shadow acne</code>. It means the shape is casting a shadow on its own surface. It can happen when calculating if the surface is in the shadow or not. </p> <p>To fix that we have to change the <code>bias</code> and <code>normalBias</code> of the shadow. <code>bias</code> - helps for flat the surfaces <code>normalBias</code> - helps for rounded surfaces Play with the values and debug.ui to find the right values.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#textures-and-color-space","title":"Textures and color space","text":"<p>You can get good textures at Polyhaven Here are some exemplary settings: </p> <p><code>Color space</code> defines how color values are intepreted - especially brighness. But humans don't see brighness linearly - because we are more sensitive to darker tones than lighter ones. Often images are stored in a <code>non-linear color space</code> called <code>sRGB</code>.</p> <p>Three.js uses two color spaces: - <code>THREE.LinearSRGBColorSpace</code> - Default color space used for math,lighting,shaders etc - <code>THREE.SRGBColorSpace</code> - used for textures meant to be seen(albedo/diffuse/color maps)</p> <p>So we can split textures into two categories: - Visual textures   - Color textures -&gt; <code>texture.colorSpace = THREE.SRGBColorSpace</code> - Data textures -   - Non color information   - normal textures   - roughness texture -&gt; should stay in linear space   - ambientocculusion texture</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-gizmo-to-object","title":"Add Gizmo to object","text":"<p>With TransformControls you can add a gizmo to an object so you can move an object.</p> <p>DragControls allows you to move an object ona plane facing the camera by drag and drop them.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#interactions","title":"Interactions","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#raycaster","title":"Raycaster","text":"<p>A Raycaster shoots a ray in a specific direction and checks if it hits any objects or any object intersects with it. This allows us for example to detect if the camera/player is facing a specific object or something is currently under the mouse and more.</p> <p>Raycaster work on Meshes and on Groups because the raycaster checks by default the children and the children of children of the object.</p> <p>To create a raycaster we call <code>const raycaster = new THREE.Raycaster();</code></p> <p>With the <code>.set(postion,direction)</code> method we can set the position and direction of the Raycaster</p> <pre><code>const rayCaster = new THREE.Raycaster();\n\nconst rayOrigin = new THREE.Vector3(-3,0,0);\nconst rayDirection = new THREE.Vector3(10,0,0);\nrayDirection.normalize()\nrayCaster.set(rayOrigin,rayDirection);\n</code></pre> <p>To detect the objects that lay in the ray we can use<code>intersectObject()</code> and <code>intersectObjects()</code>.</p> <pre><code>const intersectObject = rayCaster.intersectObject(objectX)\nconst intersectObjects = rayCaster.intersectObjects([objectX,objectY,objectZ]);\n</code></pre> <p>By setting the second parameter to false we can set that the raycaster doesn't check for collisions with the children of the object. <code>const intersectObject = rayCaster.intersectObject(objectX,false)</code></p> <p>We always get back an Array as the result of the <code>intersectObject/s</code> functions because a ray can go through an object mulitple times. The information that we get returned are:</p> <ul> <li><code>distance</code> - distance between origin of ray and collision point</li> <li><code>face</code> - what face of the geometry got hit by the ray</li> <li><code>faceIndex</code> - index of face</li> <li><code>object</code> - what is object of the collision</li> <li><code>point</code> - <code>Vector3</code> of exact position in 3D space of the collision</li> <li><code>uv</code> - UV coordinates in the geometry</li> </ul> <p>To test if there is an object in front of the player we can use <code>distance</code>. To change the color of an object we can manipulate the <code>object</code>. To trigger an explosion at the impact point of the ray we can use <code>point</code>.</p> <p>To test if moving objects hit a raycast we need to execute the test every frame.</p> <pre><code>...\nconst clock = new THREE.Clock()\nconst tick = () =&gt; {\n  const elapsedTime = clock.getElapsedTime();\n\n  const rayOrigin = new THREE.Vector3(-3,0,0);\n  const rayDirection = new THREE.Vector(1,0,0);\n  rayDirection.normalize();\n  rayCaster.set(rayOrigin,rayDirection);\n  const objectsToTest = [object1,object2,object3]\n  const intersects = rayCaster.intersectObjects(objectsToTest);\n\n  for(const object of objectsToTest){\n    object.material.color.set('#00ff00')\n  }\n\n  for(const intersect of intersects){\n    intersect.object.material.color.set('#ff0022')\n  }\n\n  object1.position.y = Math.sin(elapsedTime *0.3) * 1.5;\n  object2.position.y = Math.sin(elapsedTime *0.6) * 1.5;\n  object3.position.y = Math.sin(elapsedTime *0.4) * 1.5;\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#raycaster-with-mouse","title":"Raycaster with mouse","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#hovering","title":"Hovering","text":"<p>To evaluate if the mouse is hovering an object we need to get the position of the mouse. We want the value range from <code>-1 to 1</code> on the vertical and the horizontal with the vertical value being postivie when the mouse is up.</p> <pre><code>(-1|1)                (1|1)\n\n            (0|0)\n\n(-1|-1)               (1|-1)\n</code></pre> <pre><code>const cursor = new THREE.Vector2();\n\nwindow.addEventListener(\"mousemove\",(event)=&gt; {\n  cursor.x = event.clientX/sizes.width * 2 -1;\n  cursor.y = -(event.clientY/sizes.height) * 2 +1;\n});\n\n// Recommended to cast the ray in the tick because in some browser casting in the eventlistener could trigger it multiple times\n\nconst tick = () =&gt; {\n  //To point the ray in the right direction\n  rayCaster.setFromCamera(mouse,camera);\n const objectsToIntersect = [object1,object2,object]\n\n  const intersects = rayCaster.intersectObjects(objectsToIntersect);\n\n  //Set object to blue\n  for(const intersect of intersects){\n    intersect.object.material.color.set('#0000ff')\n  }\n  //Set to red\n  for(const object of objectsToIntersect){\n\n    if(!intersects.find(intersect=&gt;intersect.object === object)){\n      object.material.color.set('#00ff00')\n    }\n  }\n\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#mouse-enter-mouse-leave","title":"Mouse Enter Mouse Leave","text":"<p>To see if the mouse enters or leaves an area or an object we can create a variable that tracks if the object still intersects or not. We then set and reset it in <code>tick()</code></p> <pre><code>let currIntersect = null;\n\nconst tick = () =&gt; {\n  raycaster.setFromCamera(mouse,camera);\n\n  const objectsToIntersect = [object1,object2,object3]\n  const intersects = raycaster.intersectObjects(objectsToIntersect)\n  //if intersects.length = 0 -&gt; false\n  if(intersects.length){\n    if(!currentIntersect){\n      console.log('mouse enter');\n    }\n    currIntersect = intersect[0]\n\n  } else {\n    if(currIntersect){\n      console.log('mouse leave')\n    }\n    currIntersect = null\n  }\n}\n\nwindow.addEventListener('click', () =&gt; {\n  if(currIntersect){\n    console.log(\"click\")\n    switch(currIntersect.object){\n      case object1:\n        console.log(\"obj 1\");\n        break;\n      case object2:\n        console.log(\"obj 2\");\n        break;\n      case object3:\n        console.log(\"obj 3\");\n        break;\n    }\n  }\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#mouse-movement","title":"Mouse Movement","text":"<p>We can use the mouse to set the position of our camera and let the camera always look at the object.</p> <p>To get the mouse position we listen to the JS event <code>mousemove</code> with the <code>addEventListener</code></p> <pre><code>const camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,100);\n\ncamera.position.z = 10\ncamera.lookAt(mesh.position);\nscene.add(camera);\n</code></pre>    See the Pen    T3.JS Look at Object Move Camera with Mouse by levoxtrip (@levoxtrip)   on CodePen.","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#doing-full-rotation-around-object","title":"Doing full rotation around object","text":"<p>By using <code>Math.PI</code> we can map the mouse position onto a specific angle on the circle. So we translate the camera on a circle shape around the object and let it look at the object.</p> <pre><code>const radius = 2;\ncamera.position.x = Math.sin(Math.PI * 2 *cursor.x)*radius;\ncamera.position.z = Math.cos(Math.PI *2 * cursor.x)*radius;\ncamera.position.y = cursor.x * 2;\ncamera.lookAt(mesh.position)\n</code></pre>    See the Pen    T3JS Camera rotate around obj by levoxtrip (@levoxtrip)   on CodePen.","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#scrolling","title":"Scrolling","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#scroll-along-a-path","title":"Scroll Along a Path","text":"<pre><code>    // First define your variables\n    let scrollTotal = 0;\n    const scrollSpeed = 0.1;\n    const scrollMin = 0;\n    const scrollMax = 500;\n    let scrollPathPos = 0;\n\n    // Define the function first\n    const handleWheel = (event) =&gt; {\n      event.preventDefault();\n      const deltaY = event.deltaY || event.detail || -event.wheelDelta;\n\n      // Update total scroll\n      scrollTotal += deltaY * scrollSpeed;\n      if (scrollTotal &lt; 0) scrollTotal = 0;\n      // Clamp the TOTAL scroll value\n      const clampedScroll = Math.max(\n        scrollMin,\n        Math.min(scrollMax, scrollTotal)\n      );\n\n      // Map from scroll range to 0-1 range\n      scrollPathPos = (clampedScroll - scrollMin) / (scrollMax - scrollMin);\n\n      const pathT = Math.min(1, Math.max(0, scrollPathPos));\n      console.log(pathT);\n\n      const camPos = path.getPointAt(pathT);\n      camera.position.copy(camPos);\n      const tangent = path.getTangentAt(pathT).normalize();\n      camera.lookAt(camPos.clone().add(tangent));\n    };\n\n    // Then add the event listener\n    const domElement = renderer.domElement;\n    domElement.addEventListener(\"wheel\", handleWheel, { passive: false });\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#scroll-elements-top-to-bottom","title":"Scroll Elements top to bottom","text":"<p>The idea is that we position of objects on different y axis in the scene and then make the camera scroll with the scroll event. For the html elements you need to wrap them in <code>&lt;section&gt;</code></p> <pre><code>//Position objects\nconst objectDistance = 4\nmesh1.position.y = - objectsDistance * 0\nmesh2.position.y = - objectsDistance * 1\nmesh3.position.y = - objectsDistance * 2\n</code></pre> <p>To get the scroll value we can get <code>window.scrollY</code>. This value contains the amount of pixels that have been scrolled. This number can get quite big. To show only one element per viewport section we can divide the scrolling value with the height of the viewport. <code>window.innerHeight</code></p> <pre><code>let scrollY = window.scrollY\n\nwindow.addEventListener('scroll',()=&gt; {\n  scrollY = window.scrollY\n})\n\nconst tick = () =&gt; {\n  // Scroll Y is positive when scrolling down so we need to invert it.\n  //If the user scrolls down one section, the camera moves down to the next object\n  camera.position.y = - scrollY/window.innerHeight * objectDistance\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#parallax","title":"Parallax","text":"<p>To make the experience more immersive and intresting we can add a parallax effect by additionally moving the objects according to the mouse.</p> <pre><code>const cursor = {}\ncursor.x = 0;\ncursor.y = 0;\n\nwindow.addEventListener(\"mousemove\",()=&gt;{\n  //Pixel position of the mouse\n  // Normalise these values so users with different viewports have the same experience\n  cursor.x = event.clientX/window.innerWidth - 0.5;\n  cursor.y = event.clientY/window.innerHeight - 0.5 ;\n})\n\nconst tick = ()=&gt; {\n  const paralaxX = cursor.x;\n  const paralaxY = - cursor.y;\n  camera.position.x = parallaxX;\n  camera.position.y = parallaxY;\n}\n</code></pre> <p>The problem is when we apply the mouse position to the camera the scroll effect doesn't work anymore. Because the scroll gets overwritten. To solve the problem we add the camera to a group and then apply the parallax effect to the group not the camera itself.</p> <pre><code>const camGroup = new THREE.Group();\nscene.add(camGroup)\nconst camera = new THREE.PerspectiveCamera(35,window.innerWidth/window.innerHeight,0.1,100);\ncamera.position.z = 6;\ncameraGroup.add(camera);\n...\n\nconst tick = () =&gt; {\n  // Animate camera\n    camera.position.y = - scrollY / sizes.height * objectsDistance\n\n  const paralaxX = cursor.x;\n  const paralaxY = -cursor.y;\n  camGroup.position.x = parallaxX;\n  camGroup.position.y = parallaxY;\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#easing","title":"Easing","text":"<p>To make the experience even smoother we should apply some easing. The idea is that on each frame instead of lineally moving straight to the target we move a fraction of the total distance like 1/20th closer to the target. So every frame the camera gets closer to the target and the fraction of the distance smaller so - so first the camera moves faster and the closer it gets to the target the slower it moves.</p> <p>To again assure this works on every device the same way we need to multiply it with the time between the current frame and the previous frame</p> <pre><code>const clock = new THREE.Clock();\nlet previousTime = 0;\nconst tick = () =&gt; {\n  const elapsedTimes = clock.getElapsedTime();\n  const deltaTime = elapsedTime - previousTime;\n  previousTime = elapsedTime;\n}\n\n//parallaxX -cameraGroup.postion calculates the distance\ncameraGroup.position.x += (parallaxX-cameraGroup.position.x)*deltaTime*5;\ncameraGroup.position.y += (parallaxY-cameraGroup.postion.y)*deltaTime*5;\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#trigger-animations","title":"Trigger animations","text":"<p>To trigger animations when we reach a section we can create a <code>currentSection</code> variable and set it to the <code>scrollY/window.innerHeight</code>. This create an index value with <code>Math.round()</code></p> <pre><code>let scrollY = window.scrollY\nlet currentSection = 0;\n\nwindow.addEventListener('scroll',()=&gt;{\n  scrollY = window.scrollY;\n  const newSection = Math.round(scrollY/window.innerHeight);\n  if(newsection != currentSection){\n    currentSection = newSection;\n\n    gsap.to(\n      sectionMeshes[currentSection].rotation,\n      {\n        duration:1.5,\n        ease:'power2.inOut',\n        x: '+=6',\n        y: '+=3'\n        z: '+=1.5'\n      }\n    )\n  }\n\n})\n\nconst tick = () =&gt; {\n  ...\n  for(const mesh of sectionMeshes){\n    mesh.rotation.x += deltaTime*0.1\n    mesh.rotation.y += deltaTime*0.12\n  }\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#physics","title":"Physics","text":"<p>Physics help to make the experience of your website more playful. To get realistic physics with tension, friction, bouncing etc it makes sense to use a library instead of writing all your own physics.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#theory","title":"Theory","text":"<p>To have physics in our Three.js scene we need to create a physics world where the laws of physics rule. But we can't see it. It is theoretical. We create our mesh in the Three.js scene and also create a version of that mesh in the physics world. On each frame before the rendering happens we tell the physics world to update itself. We then take the values from the objects in the phyics world and assign them to the Three.js objects.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#libraries","title":"Libraries","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#3d","title":"3D","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#ammojs","title":"Ammo.js","text":"<p>Website A can be quite heavy Still updated by community Mostly used. Three.js examples.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#cannonjs","title":"Cannon.js","text":"<p>Website Lighter than Ammo.js and easier to implement.</p> <p>To install cannon.js <code>npm install cannon</code> and then <code>import CANNON from 'cannon'</code></p> <p>There is also a library that is based on cannon but actually still get's updated. It is called <code>Cannon-es</code> <code>npm install cannon-es</code></p> <p>To create a physics world we use <code>new CANNON.Wolrd()</code> <code>const world = new CANNON.World()</code></p> <p>To add gravity we set a <code>Vec3</code> <code>cannon.gravity.set(0,-9.82,0)</code></p> <p>When we want to add shapes the the physics world we need to add <code>Body</code>. It is a an object that will fall and collide with other bodies. But before that we decide which shape the body should take</p> <pre><code>...\nconst sphreShape = new CANNON.Sphere(0.5)\n\nconst sphereBody = new CANNON.Body({\n  mass:1,\n  position: new CANNON.Vec3(0,3,0),\n  shape: sphereShape\n})\n//Adding body to the world\nworld.addBody(sphereBody)\n</code></pre> <p>To update the physics world we need to use the <code>step()</code>function. How it works gets described here:Timesteps. The <code>.step()</code> function expects a fixed time step. For 60 FPS we give it a value of <code>1/60</code>. For the number of iterations we can use a value like <code>3</code>. For delta time we use the clock and calculate the delta time with elapsedTime</p> <pre><code>const clock = new THREE.Clock();\nlet oldElapsedTime = 0\n\nconst tick = () =&gt; {\n  const elapsedTime = clock.getElapsedTime();\n  const deltaTime = elapsedTime-oldElapsedTime;\n  oldElapsedTime = elapsedTime;\n\n  world.setp(1/60,deltaTime,3);\n}\n</code></pre> <p>What is missing now is that we need to assign the values from the <code>sphereBody</code> to the shape in three.js</p> <pre><code>sphere.position.x = sphereBody.position.x\nsphere.position.y = sphereBody.position.y\nsphere.position.z = sphereBody.position.z\n</code></pre> <p>OR <code>sphere.position.copy(sphereBody.position);</code></p> <p>To make objects interact/react to each other all the object need to bodies in the physics world.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#adding-box","title":"Adding Box","text":"<p>A Box Body in Cannon has a different messure than in Three.js. It needs a <code>halfExtents</code> which is a <code>Vec3</code> and represents a segment from the center of the box to the box corners.</p> <pre><code>const boxShape = new CANNON.Box(new CANNON.Vec3(width*0.5,height*0.5,depth*0.5));\nconst boxBody = new CANNON.Body({\n  mass:1,\n  position:new CANNON.Vec3(0,1,0);\n  shape:boxShape,\n  material:defaultMaterial\n})\nworld.addBody(boxBody)\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#static-body","title":"Static Body","text":"<p>If you want an object to be static, so not affected by gravity we can set <code>mass =  0</code> You also can first create your <code>shape</code> and <code>body</code> and then assign the properties</p> <pre><code>const plane = CANNON.Plane()\nconst planeBody = CANNON.Body();\nplaneBody.mass = 0\nplaneBody.addShape(plane);\nworld.add(planeBody);\n// To rotate we use quaternion in CANNON\nplaneBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1,0,0),Math.PI*0.5);\n</code></pre> <p>In <code>Cannon</code> we can also create a <code>Body</code> and add multiple <code>Shapes</code> for example for complex but solid shapes.</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#contact-material","title":"Contact Material","text":"<p>To affect how different bodies react with each other we can set a <code>Cannon</code> <code>ContactMaterial</code> and <code>Material</code>. So we create a material for each type of material we have in our scene. The <code>default</code> material is <code>plastic</code>. We can write both <code>default</code> or <code>plastic</code> for that material. <code>const plasticMat = new CANNON.Material('plastic')</code></p> <p>For the interaction between the materials in the scene we also have to create a <code>ContactMaterial</code> that defines how these two materials react to each other.</p> <pre><code>const plasticMaterial = new CANNON.Material('plastic');\nconst concreteMaterial = new CANNON.Material('concrete');\n\nconst plasticConcreteContactMaterial = new CANNON.ContactMaterial(\n  concreteMaterial,\n  plasticMaterial,\n  {\n    friction:0.1,//How much does it rub - default value 0.3\n    restitution:0.7// how much does it bounce - default value 0.3\n  }\n)\nworld.addContactMaterial(plasticConcreteContactMaterial);\n</code></pre> <p>We also then have to assign these physics materials to the bodies</p> <pre><code>const sphereBody = new CANNON.Body({\n  ...\n  material:plasticMaterial\n})\n\nplaneBody.material = concreteMaterial;\n</code></pre> <p>or delete the assigning for each material and just set the contact material for the world <code>world.defaultContactMaterial = defaultContactMaterial</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#applying-forces","title":"Applying forces","text":"<p>There are multiple ways to apply different forces in CANNON:</p> <ul> <li><code>applyForce</code> to apply a force from specific point in space:</li> <li>wind</li> <li>small sudden push on domino</li> <li>greate sudden force like a jump</li> <li><code>applyImpulse</code> similar to <code>applyForce</code>applies directly to the velocity</li> <li> <p><code>applyLocalForce</code> same as <code>applyForce</code> but coordinates are local to the body <code>(0,0,0) center of the body</code></p> </li> <li> <p>to apply a small impulse     <code>sphereBody.applyLocalForce(new CANNON.Vec3(150,0,0), new CANNON.Vec3(0,0,0))</code></p> </li> <li> <p><code>applyLocalImpulse</code> is the same as <code>applyImpulse</code> but the coordinates are local to the Body.</p> </li> </ul>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#applying-wind","title":"Applying wind","text":"<p>Because the wind force is happening every frame we apply these force in <code>tick()</code></p> <pre><code>const tick = () =&gt; {\n  ...\n  sphereBodey.applyForce(new CANNON.Vec3(-0.5,0,0), sphereBody.position);\n  ...\n  world.step(1/60,deltaTime,3);\n  ...\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#multiple-objects","title":"Multiple Objects","text":"<p>When we handle multiple objects first it makes sense to create functions that handle the <code>THREE.js</code> mesh and the <code>CANNON.Body</code> creation in one function. Second we create an array where we add the created objects so we can change them later</p> <pre><code>const objectsToUpdate = [];\nconst createSphere = (position,radius) =&gt; {\n  const sphereMesh = new THREE.Mesh()\n  const sphereGeo = new THREE.SphereGeometry(radius,20,20);\n  const sphereMat = new THREE.MeshStandardMaterial({\n    metalness:0.3,\n    roughness:0.4,\n    envMap:environmentMapTexture,\n    envMapIntensity:0.5\n  })\n  sphereMesh.add(sphereGeo,sphereMat);\n  sphereMesh.castShadow = true;\n  sphereMesh.position.set(position);\n  scene.add(sphereMesh);\n\n\n  const sphereShape = new CANNON.Sphere(radius);\n  const sphereBody = new CANNON.Body({\n    mass:1,\n    position: position,\n    shape:sphreShape,\n    material:defaultMaterial\n    }\n  )\n   world.addBody(body);\n   objectsToUpdate.push({\n    mesh:sphereMesh,\n    body:sphereBody\n   })\n}\n\n\nconst tick = () =&gt; {\n  ...\n  world.step(1/60,deltaTime,3);\n  for(const obj in objectsToUpdate){\n    //Assign position of physics body to the threejs mesh\n    obj.mesh.position.copy(obj.body.position);\n    //Copy the rotation\n    obj.mesh.quaternion.copy(obj.body.quaternion);\n  }\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#events","title":"Events","text":"<p>We can listen and use events to execute some logic for our scene. Event we can listen to are <code>colide</code>, <code>sleep</code>,<code>wakeup</code></p> <pre><code>body.addEventListener('collide', playSound)\n\nconst playSound = (collision) =&gt; {\n  //Resetting time of sound so if another sound is playing it starts again from the start.\n  sound.currentTime = 0;\n  sound.play()\n}\n</code></pre> <p>We also get from the event the strength of the <code>collision</code> with <code>collision.contact.getImpactVelocityAlongNormal()</code> which we then can use to determine some logic.</p> <p>When you remove bodies from the scene don't forget to remove also the eventlistener <code>body.removeEventListener('collide',playSound)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#constrains","title":"Constrains","text":"<p>CANNON has different constrains to create certain behavior:</p> <ul> <li><code>HingeConstraint</code> Doorhinge behaviour</li> <li><code>DistanceConstraint</code> Bodies are forced to keep distance between each other</li> <li><code>LockContraint</code> mergin bodies</li> <li><code>PointToPointConstraint</code> gluying body to specifc point</li> </ul>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#performance","title":"Performance","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#removing-elements","title":"Removing Elements","text":"<p>To remove <code>Bodies</code> from the world we can use <code>world.removeBody(obj.body)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#broadphase","title":"Broadphase","text":"<p>To assure a good performance of your scene you don't want to calculcate every <code>Body</code> against all other <code>Bodies</code>. The goal is to just process the bodies that are actually close to each other and react with each other. For that CANNON has <code>Broadphase</code> with different algorithms to presorts the <code>Bodies</code> before it processes the calculations:</p> <ul> <li><code>NaiveBroadphase</code>: Actually tests all the <code>Bodies</code> against each other(default).</li> <li><code>GridBroadphase</code>: Splits up the world into girdcells and only tests the <code>Bodies</code> that are in the same or the neighbors gridcell.</li> <li><code>SAPBroadphase</code>: Test <code>Bodies</code> on arbitrary axes during multiple steps(recommendet).</li> </ul> <p><code>world.broadphase = new CANNON.SAPBroadphase(world);</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#sleep","title":"Sleep","text":"<p>Even if the <code>Body</code> stays still it gets tested by <code>Broadphase</code>. To avoid that we can put the object into <code>sleep</code> if the <code>Body's</code> velocity is really low until a force is applied to it or a collision happens. <code>world.allowSleep = true</code></p> <p>With <code>sleepSpeedLimit</code> and <code>sleepTimeLimit</code>we can define thresholds to the sleep behaviour</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#workers","title":"Workers","text":"<p>Workes allow you to put part of your code on a different thread to improve performance. But that code has to be seperated as you can see here Worker Example;</p> <p>Further information here</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#oimojs","title":"Oimo.js","text":"<p>Website Lighter than Ammo.js and also easier</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#rapier","title":"Rapier","text":"<p>Website Good performance Currently maintained</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#2d","title":"2D","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#matterjs","title":"Matter.js","text":"<p>Website Still kind of updated</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#p2js","title":"P2.js","text":"<p>[Website:] (https://schteppe.github.io/p2.js/) Hasn't been update for 2 years</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#planckjs","title":"Planck.js","text":"<p>Website:</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#box2djs","title":"Box2D.js","text":"<p>[Website:] (http://kripken.github.io/box2d.js/demo/webgl/box2d.html)</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#color-class","title":"Color class","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-color-of-a-material","title":"Set color of a material","text":"<p><code>object.material.color.set('#ff0000')</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#mix-colors","title":"Mix Colors","text":"<p>We can use the <code>color1.lerp(color2,alpha)</code> function to mix two colors</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#vector3-class","title":"Vector3 class","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-vector","title":"Set Vector","text":"<p><code>mesh.position.set(0.2,0.7,0.3)</code>3</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#get-the-length-of-the-position-vector","title":"Get the length of the position vector","text":"<p><code>mesh.position.length()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#get-the-distance-from-another-vector","title":"Get the distance from another Vector","text":"<p><code>mesh.position.distanceTo(camera.position)</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#normalize-length-of-vector","title":"Normalize Length of Vector","text":"<p><code>mesh.position.normalize()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#debug-ui","title":"Debug UI","text":"<p>There are multiple libraries to create some Debug UIs. The most popular like dat.GUI or control-panel controlkit guify oui</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#datgui","title":"Dat.GUI","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#implementation","title":"Implementation","text":"<p>Installation <code>npm install --save dat.gui</code> Import <code>import * as dat from 'dat.gui'</code> Instantiation <code>const gui = new dat.GUI</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#elements","title":"Elements","text":"<p><code>Range</code> - numbeers with minimum and maximum value <code>Color</code> - for various color formats <code>Text</code> - Simple Text <code>Checkbox</code> - for booleans <code>Select</code> - Choice from list of values <code>Button</code> - to trigger functions <code>Folder</code> - to organize panel with lot of elements</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#add-elements","title":"Add Elements","text":"<p>We add elements with <code>gui.add(object,property of object)</code> to add elements to the GUI.</p> <p><code>gui.add(mesh.position, 'y')</code></p> <p>Specifying ranges and steps <code>gui.add(mesh.position,'y',-3,3,0.01)</code> or use methods from dat.GUI. <code>gui.add(mesh.position,'y').min(-3).max(3).step(0.01).name('elevation')</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-element-visible-via-gui","title":"Set Element visible via GUI","text":"<p><code>gui.add(mesh,'visible')</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#drop-down","title":"Drop-down","text":"<p>To create a drop down we add an object with key value pairs to it <pre><code>gui.add(renderer,'toneMapping'){\n  key1:value1,\n  key2:value2,\n  key3:value3,\n  key4:value4,\n\n}\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#colors","title":"Colors","text":"<p>Define object with color as its property <code>const parameters = { color: 0xff0000}</code> Add object <code>gui.addColor(parameters,'color')</code></p> <p>Signaling changes of property in Dat.GUI properts and setting property in three.js</p> <pre><code>const parameters = {\n  color:0xff0000\n}\ngui.addColor(parameters,'color')\n.onChange(()=&gt; {\n  material.color.set(parameters.color)\n})\n\nconst material = new THREE.MeshBasicMaterial({color:parameters.color})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#update-values","title":"Update Values","text":"<p>If we want to show and update the values in our scene we have to call <code>.onChange()</code></p> <pre><code>gui.add(parameters,'materialColor')\n  .onChange(()=&gt;{\n    material.color.set(parameters.materialColor)\n  })\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#trigger-a-function","title":"Trigger a function","text":"<p>To trigger a function we have to add the function again like with colors to an object.</p> <pre><code>import gsap from 'gsap'\n...\nconst parameters = {\n  color,0xff0000,\n  spin: () =&gt; {\n    gsap.to(mesh.rotation,{duration:1, y:mesh.rotation.y +Math.PI*2})\n  }\n}\n\ngui.add(parameters, 'spin')\n</code></pre> <p>If you want to trigger a function which also needs parameters we can create an object for that</p> <pre><code>const gui = new GUI();\nconst debugObject = {}\ndebugObject.createSphere = () =&gt; {\n  createSphere(0.5,{x:0,y:2,x:1})\n}\ngui.add(debugObject,'createSphere')\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#hide-panel","title":"Hide Panel","text":"<p>We can press <code>H</code> to hide the panel or set it hidden from beginning <code>gui.hide()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#close-panel","title":"Close Panel","text":"<p>To have your GUI closed at the beginning <code>const gui = new dat.GUI({closed:true})</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#set-width-of-panel","title":"Set Width of Panel","text":"<p><code>const gui = new dat.GUI({width:400})</code></p> <p>More infos under dat.GUI API</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#show-window-to-control-and-change-properties-of-the-objects","title":"Show window to control and change properties of the objects","text":"<pre><code>const pane = new Pane()\npane.addInput(material, 'shininess',{\n  min:0,\n  max:100,\n  step:1\n})\n\n// passing two objects\npane.addInput(grassTexture, 'offset', {\n  x: {\n    min:0,\n    max:1,\n    step:0.001\n  },\n  y: {\n    min:0,\n    max:1,\n    step:0.001\n  }\n})\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#vite-config-file","title":"Vite Config file","text":"<pre><code>export default {\n    root: 'src/',//Where are we serving up our experience\n    publicDir: '../static/',//We are hosting our static assets in the static folder\n    base: './',\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#math-functions","title":"Math functions","text":"<p>PI: <code>Math.PI</code> SINE: <code>Math.sin()</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#create-random-angles","title":"create random angles","text":"<p><code>const angle = Math.Random() * Math.PI *2;</code></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#code-structure-for-bigger-projects","title":"Code Structure for bigger projects","text":"<p>== TO JAVASCRIPT BASICS LATER ==</p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#modules","title":"Modules","text":"<p>Modules allow us to seperate our code into multiple files and then import them when needed <code>import test from './test.js'</code></p> <p>Modules can export one or multiple things. <code>export default 'Hello World, this is my first module'</code></p> <p>In the other script  <pre><code>import test from './test.js'\nconsole.log(test)\n//Hello World, this is my first module\n</code></pre></p> <p>It's important that for our own modules we need to add <code>./</code> before the file otherwise JS tries to find it in the <code>node_modules</code></p> <p>Export a function To export a function <pre><code>export default () =&gt; {\n  console.log(\"Hallo\")\n}\n</code></pre> Export object <pre><code>const object = {\n  me:\"Hallo world\"\n}\n\nconst printMe = ()=&gt; {\n  console.log(\"me\")\n}\n//Export one object\nexport default object;\n//Or export multiple\nexport default {object,printMe}\n\nimport {object,printMe} from './test.js'\nconsole.log(object)\nprintMe()\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#classes","title":"Classes","text":"<p>Classes in JS allow to use Object-oriented Programming</p> <p>To create a class <code>class MyClass{}</code> By convention classes are written in PascalCase starting with a capital letter.</p> <p>Classes are blueprints to create an object. We then can use that blueprint to create multiple objects.</p> <p>To create an instance  of the the class <code>const classInstance = new MyClass()</code></p> <p>Functions inside a class <pre><code>class MyClass{\n  doThis(){\n    console.log(\"I'm doing this\")\n  }\n}\n\nclassInstance.doThis();\n</code></pre></p> <p>Classes have a <code>constructor</code> method that get's called when the class got instantiated <pre><code>class MyClass{\n  constructor(name,age){\n    this.name = name\n    this.age = age\n    console.log(`I'm ${this.name} and I'm alive`)\n    this.doThis();\n  }\n  doThis(){\n    console.log(`And now ${this.name} do this`)\n  }\n}\n\nconst classInstance = new MyClass(\"MyName\")\nconsole.log(classInstance.age)\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#inheritance","title":"Inheritance","text":"<p>Classes allow us to let a class inherit from a parent class. So we can create a <code>Parent</code> class and then let a <code>Child</code> class inherit behaviour and values from the <code>Parent</code></p> <pre><code>import ParentClass from './ParentClass.js'\nclass ChildClass extends ParentClass\n{\n  childBehaviour1(){\n    console.log(`${this.name} is hungry but can't make dinner on his own`)\n  }\n\n  //Methods in the Childclass with the same name like the parent will overwrite the parent class\n\n  doThis(){\n    console.log(`now a child does this`)\n  }\n\n}\n</code></pre> <p>If you want the <code>Child</code> class to have a different constructor or you want to extent the <code>Parent</code> constructor in the <code>Child</code> class we need to call<code>super()</code> <pre><code>import ParentClass from './ParentClass.js'\nclass ChildClass extends ParentClass{\n  constructor(name,age){\n    //super basically calls the constructor of the parent class\n    super(name,age);\n\n    this.canEat = false\n\n    //you could even call the method from the parent class but this can make the code complicated\n    super.doThis()\n  }\n}\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#structuring-code","title":"Structuring Code","text":"<p>So the idea is to seperate the code into different files and export in each file a class .</p> <p>A good practise is to put the whole three.js experience into its own <code>Experience</code> class. <pre><code>export default class Experience{\n  constructor(){\n    console.log(\"Welcome to my experience\")\n  }\n}\n\nimport Experience from './Experience.js'\nconst experience = new Experience();\n</code></pre></p> <p>It makes sense to send the canvas as a parameter into the class</p> <p><pre><code>export default class Experience {\n  constructor(canvas){\n    this.canvas = canvas;\n  }\n}\n...\nconst experience = new Experience(document.getSelector('canvas'))\n</code></pre> If you have only one experience and you want to access the window object you can write</p> <pre><code>export default class Experience {\n  constructor(canvas){\n    this.canvas = canvas;\n    //CAREFUL WITH MULTIPLE EXPERIENCES THIS OVERWRITES THEM\n    window.experience = this//This gives us the window object\n  }\n}\n</code></pre> <p>It always can make sense to have some Util classes saved that you can use in different projects. <pre><code>export default class Sizes {\n  constructor(){\n    this.width = window.innerWidth;\n    this.height=window.innerHeight;\n    this.pixelRatio = Math.min(window.devicePixelRatio,2);\n\n  window.addEventListener(\"resize\",()=&gt;{\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.pixelRatio = Math.min(window.devicePixelRatio,2);\n  })\n\n  }\n\n\n}\n...\nimport Sizes from './Utils/Sizes.js'\nexport default class Experience {\n  constructor(canvas){\n    this.sizes = new Sizes();\n    console.log(this.sizes.width)\n    console.log(this.sizes.height)\n    console.log(this.sizes.pixelRatio)\n  }\n}\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#event-emitter","title":"Event Emitter","text":"<p>To enable the class to emit events it needs to inherit from a <code>EventEmitter</code> class. <pre><code>// This class lets you create and manage custom events.\n// You can \"listen\" to events with `on()`, stop listening with `off()`, and \"trigger\" events with `trigger()`.\n\nexport default class EventEmitter {\n    constructor() {\n        // Create an object to store all the event listeners (callbacks)\n        this.callbacks = {}\n\n        // Add a default \"base\" namespace to organize events\n        this.callbacks.base = {}\n    }\n\n    /**\n     * Start listening to events.\n     * \n     * @param _eventNames - The name(s) of the events to listen for (e.g. 'click', 'hover.menu')\n     * @param callback - The function to run when the event is triggered\n     */\n    on(_eventNames, callback) {\n        // Check if event names or callback are missing\n        if (typeof _eventNames === 'undefined' || _eventNames === '') {\n            console.warn('wrong names')\n            return false\n        }\n\n        if (typeof callback === 'undefined') {\n            console.warn('wrong callback')\n            return false\n        }\n\n        // Clean up and split the string of event names into an array\n        const eventNames = this.resolveNames(_eventNames)\n\n        // Go through each event name in the list\n        eventNames.forEach((eventName) =&gt; {\n            // Separate the event name and namespace (e.g. 'hover.menu' \u2192 value: 'hover', namespace: 'menu')\n            const _eventName = this.resolveName(eventName)\n\n            // If the namespace doesn\u2019t exist yet, create it\n            if (!(this.callbacks[_eventName.namespace] instanceof Object))\n                this.callbacks[_eventName.namespace] = {}\n\n            // If this specific event name doesn\u2019t exist yet, create an empty list to store all the functions that listen to event\n            //If there is no list of callbacks yet for this specific event, create an empty one.\"\n            if (!(this.callbacks[_eventName.namespace][_eventName.value] instanceof Array))\n                this.callbacks[_eventName.namespace][_eventName.value] = []\n\n            // Add the callback function to this event\n            this.callbacks[_eventName.namespace][_eventName.value].push(callback)\n        })\n\n        // Allow method chaining (e.g. emitter.on(...).on(...))\n        return this\n    }\n\n    /**\n     * Stop listening to one or more events.\n     * \n     * @param eventNames - One or more event names to remove (e.g. 'click', 'hover.menu', 'menu.')\n     */\n    off(eventNames) {\n        // Check if input is missing\n        if (typeof eventNames === 'undefined' || eventNames === '') {\n            console.warn('wrong name')\n            return false\n        }\n\n        // Clean up and split the string of event names into an array\n        const _eventNames = this.resolveNames(eventNames)\n\n        // Go through each event name\n        _eventNames.forEach((eventName) =&gt; {\n            const _eventName = this.resolveName(eventName)\n\n            // If only a namespace was provided (e.g. 'menu.'), remove the entire namespace\n            if (_eventName.namespace !== 'base' &amp;&amp; _eventName.value === '') {\n                delete this.callbacks[_eventName.namespace]\n            }\n\n            // Otherwise, remove a specific event in one or all namespaces\n            else {\n                // If no namespace is specified, try to remove the event from every namespace\n                if (_eventName.namespace === 'base') {\n                    for (const namespace in this.callbacks) {\n                        if (\n                            this.callbacks[namespace] instanceof Object &amp;&amp;\n                            this.callbacks[namespace][_eventName.value] instanceof Array\n                        ) {\n                            // Delete this event from the namespace\n                            delete this.callbacks[namespace][_eventName.value]\n\n                            // If the namespace is now empty, delete it too\n                            if (Object.keys(this.callbacks[namespace]).length === 0)\n                                delete this.callbacks[namespace]\n                        }\n                    }\n                }\n\n                // If a specific namespace is given, remove only from that one\n                else if (\n                    this.callbacks[_eventName.namespace] instanceof Object &amp;&amp;\n                    this.callbacks[_eventName.namespace][_eventName.value] instanceof Array\n                ) {\n                    delete this.callbacks[_eventName.namespace][_eventName.value]\n\n                    // Remove namespace if empty\n                    if (Object.keys(this.callbacks[_eventName.namespace]).length === 0)\n                        delete this.callbacks[_eventName.namespace]\n                }\n            }\n        })\n\n        return this\n    }\n\n    /**\n     * Trigger (fire) an event so that all the functions listening to it will run.\n     * \n     * @param _eventName - The name of the event to trigger\n     * @param _args - Optional array of arguments to pass to the callback functions\n     */\n    trigger(_eventName, _args) {\n        // Check if name is missing\n        if (typeof _eventName === 'undefined' || _eventName === '') {\n            console.warn('wrong name')\n            return false\n        }\n\n        let finalResult = null\n        let result = null\n\n        // Make sure _args is an array, or use an empty array if none provided\n        const args = !(_args instanceof Array) ? [] : _args\n\n        // Clean and resolve the event name\n        let name = this.resolveNames(_eventName)\n        name = this.resolveName(name[0]) // Only take the first resolved name\n\n        // If no specific namespace is given\n        if (name.namespace === 'base') {\n            // Look for the event in every namespace\n            for (const namespace in this.callbacks) {\n                if (\n                    this.callbacks[namespace] instanceof Object &amp;&amp;\n                    this.callbacks[namespace][name.value] instanceof Array\n                ) {\n                    // Call every function attached to this event\n                    this.callbacks[namespace][name.value].forEach(function(callback) {\n                        result = callback.apply(this, args)\n\n                        // Store the first result returned\n                        if (typeof finalResult === 'undefined') {\n                            finalResult = result\n                        }\n                    })\n                }\n            }\n        }\n\n        // If a specific namespace is given\n        else if (this.callbacks[name.namespace] instanceof Object) {\n            if (name.value === '') {\n                console.warn('wrong name')\n                return this\n            }\n\n            // Call every function attached to this event in the given namespace\n            this.callbacks[name.namespace][name.value].forEach(function(callback) {\n                result = callback.apply(this, args)\n\n                // Store the first result\n                if (typeof finalResult === 'undefined')\n                    finalResult = result\n            })\n        }\n\n        return finalResult\n    }\n\n    /**\n     * Helper function that cleans and splits event name strings.\n     * \n     * Example: 'click, move.menu' \u2192 ['click', 'move.menu']\n     */\n    resolveNames(_eventNames) {\n        let names = _eventNames\n\n        // Remove weird characters except letters, numbers, commas, slashes, and dots\n        names = names.replace(/[^a-zA-Z0-9 ,/.]/g, '')\n\n        // Convert commas and slashes to spaces\n        names = names.replace(/[,/]+/g, ' ')\n\n        // Split by space into an array\n        names = names.split(' ')\n\n        return names\n    }\n\n    /**\n     * Helper function that splits a name like 'move.menu' into:\n     * {\n     *   original: 'move.menu',\n     *   value: 'move',\n     *   namespace: 'menu'\n     * }\n     */\n    resolveName(name) {\n        const newName = {}\n        const parts = name.split('.')\n\n        newName.original = name\n        newName.value = parts[0] // The event name (e.g. 'move')\n        newName.namespace = 'base' // Default to 'base' if no namespace is given\n\n        // If there's a namespace, use it\n        if (parts.length &gt; 1 &amp;&amp; parts[1] !== '') {\n            newName.namespace = parts[1]\n        }\n\n        return newName\n    }\n}\n</code></pre></p> <p>Now we can let the <code>Sizes</code> class inherit from the Event</p> <pre><code>import EventEmitter from '/EventEmitter.js'\nexport default class Sizes extends EventEmitter\n{\n  constructor(){\n    super()\n\n    window.addEventListener('resize',()=&gt; {\n      //we trigger from inside the Sizes class\n      this.trigger('resize')\n    })\n  }\n}\nimport Sizes from '/Utils/Sizes.js'\nexport default class Experience {\n  constructor(canvas){\n    window.experience = this;\n\n    this.canvas = canvas\n\n    this.sizes = new Sizes()\n\n    //Listen to the event from outside\n    this.sizes.on('resize',()=&gt;{\n      this.resize()\n    })\n  }\n\n\n  resize(){\n    console.log(\"Window resize happended\")\n  }\n}\n</code></pre>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#time","title":"Time","text":"<p>A <code>Time</code> class can be useful to store values like <code>currentTime</code>,<code>deltaTime</code></p> <p><pre><code>import EventEmitter from '/EventEmitter.js'\n\nexport default class Time extends EventEmitter\n{\n  constructor(){\n    super()\n    this.start = Date.now() // Starttime of experience\n    this.current = this.start // currenttimestand that changes each frame\n    this.elapsed = 0 // how much time was spent since start of experience\n    this.delta = 16 // how much time was spent since preivous frame - 16 is close to how many milliseconds there ibetween two frames at 60fps\n  //To avoid delta = 0 on first frame we call window.requestAnimation here\n  window.requestAnimationFrame(()=&gt; {\n    this.tick()\n  })\n  }\n\n  tick(){\n    const currentTime = Date.now()\n    this.delta = currenTime - this.current\n    this.current = currentTime;\n    this.elapsed = this.current - this.start\n\n\n    this.trigger('tick')\n    console.log('tick')\n    window.requestAnimationFrame(()=&gt;{\n      this.tick()\n    })\n  }\n\n}\n</code></pre> <pre><code>...\nimport Time from '/Utils/Time.js'\n\nexport default class Experience{\n  constructor(canvas){\n    ...\n    this.time.on('tick',()=&gt;{\n      this.update()\n    })\n  }\n\n  update(){\n\n  }\n}\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#import-threejs-with-cameraetc","title":"Import Three.js with Camera,etc","text":"<p>To handle the camera seprately we can create its own class for it</p> <pre><code>export default class Camera{\n  constructor(){\n\n  }\n}\n</code></pre> <p><pre><code>import * as THREE from 'three'\n...\nexport default class Experience{\n  constructor(canvas){\n    //...\n    this.sizes = new Sizes()\n    this.time = new Time()\n    this.scene = new THREE.Scene()\n    this.camera = new Camera()\n  }\n}\n</code></pre> In the <code>Camera</code> class we need to access properties from other classes like <code>Sizes</code> and maybe <code>Time</code>.  Ways to access values and properties from the <code>Experience</code> class from the camera - (1) Global variable - (2) Sending parameters - (3) using singleton</p> <p>(1)  With <code>window.experience = this</code> we add the experience as a global object to the window which makes <code>experience</code> accessible everywhere in the code.</p> <p><pre><code>export default class Camera\n{\n  constructor(){\n    this.experience = window.experience\n\n    console.log(this.experience)\n  }\n}\n</code></pre> This can make sense to use if you are 100% sure to use just one experience. (2) To pass the experience as a parameter <pre><code>export default class Experience{\n  constructor(canvas){\n    ...\n    //this == experience instance\n    this.camera = new Camera(this)\n    ...\n}\n}\nexport default class Camera\n{\n  constructor(experience){\n    this.experience = experience\n  }\n}\n</code></pre> (3) A singleton is a coding design pattern that assures that you only have <code>one</code> instance of something. And everytime we create a new instance of the same thing it references to the first created instance. <pre><code>let instance = null\n\nexport default class Experience \n{\n  constructor(canvas){\n    if(instance){\n      //if instance already contains something leave the function \n      return instance\n    }\n    //if instance is still null assign this instance experience to instance\n    instance = this\n  }\n\n\n  resize(){\n    this.camera.resize()\n  }\n}\nexport default class Camera\n{\n  constructor(){\n    this.experience = new Experience()\n    // from the experience class we get the sizes\n    this.sizes = this.experience.sizes\n    this.scene = this.experience.scene\n    this.canvas = this.experience.canvas\n\n    this.setCamInstance()\n    this.setOrbitInstance()\n  }\n  setCamInstance(){\n    this.camInstance = new THREE.PerspectiveCamera(35,this.sizes.width/this.sizes.height, 0.1,100)\n    this.camInstance.position.set(3,4,5)\n    this.scene.add(this.camInstance)\n  }\n  setOrbitInstance(){\n    this.controls = new OrbitControls(this.camInstance,this.canvas)\n    this.controls.enableDamping = true;\n  }\n\n  resize(){\n    this.camInstance.aspect = this.sizes.width/this.sizes.height\n    this.instance.updateProjectionMatrix()\n  }\n}\n</code></pre></p> <p>Similar to the camera we can create a class for the renderer <pre><code>import * as THREE from 'three'\nexport default class Renderer {\n  constructor(){\n    this.experience = new Experience();\n    this.canvas = this.experience.canvas;\n    this.sizes = this.experience.sizes;\n    this.szene = this.experience.scene;\n    this.camera= this.experience.camera;\n    this.setRendererInstance()\n  }\n\n  setRendererInstance(){\n    this.instance = new THREE.WebGLRenderer({\n      canvas:this.canvas,\n      antialias:true\n    })\n    this.instance.toneMapping = THREE.CineonToneMapping\n    this.instance.toneMappingExposure = 1.75\n    this.instance.shadowMap.enabled = true\n    this.instance.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.instance.setSize(this.sizes.width, this.sizes.height);\n    this.instance.setPixelRation(this.sizes.pixelRatio);\n\n  }\n  resize(){\n    this.instance.setSize(this.sizes.width,this.sizes.height);\n    this.instance.setPixelRatio(this.sizes.pixelRatio);\n  }\n  update(){\n    this.instance.render(this.scene,this.camera.camInstance);\n  }\n}\n\nimport Renderer from '/Renderer.js'\nexport default class Experience{\n  constructor(canvas){\n    ...\n    this.renderer = new Renderer()\n  }\n\n  resize(){\n    this.renderer.resize();\n    this.camera.resize();\n  }\n\n  update(){\n    this.camera.update()\n    this.renderer.update()\n  }\n}\n</code></pre></p> <p>And collect then all elements in a <code>World</code> class</p> <pre><code>export default class World{\n  constructor(){\n    this.experience = new Experience();\n    this.scene = this.experience.scene;\n  }\n}\n</code></pre> <p>For the world class we then can create classes like <code>Environment</code> with contain the lights, environmentmaps etc.</p> <p>What can make the code more structured is also a <code>ResourceLoader</code> class dedicated to loading the models <pre><code>import EventEmitter from '/EventEmitter.js'\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nexport default class ResourceLoader extends EventEmitter {\n  constructor(sources){\n    super()\n    this.sources = sources\n\n    this.items = {}\n    this.toLoad = this.sources.length;\n    this.loaded = 0;\n    this.setLoaders();\n    this.startLoading();\n  }\n  setLoaders(){\n    this.loaders = {}\n    this.loaders.gltfLoader = new GLTFLoader();\n    this.loaders.textureLoader = new THREE.TextureLoader();\n    this.loaders.cubeTextureLoader = new THREE.CubeTextureLoader();\n  }\n\n  startLoader(){\n    for(const src of this.sources){\n      if(src.type === 'gltfModel'){\n        this.loaders.gltfLoader.load(src.path,(file)=&gt;{\n          console.log(file,src);\n          this.sourceLoaded(src,file);\n        })\n      } else if(src.type=== 'texture'){\n        this.loaders.textureLoader.load(\n          src.path,(file)=&gt;{\n            console.log(file,src);\n            this.sourceLoaded(src,file);\n          }\n        )\n      } else if(src.type==='cubeTexture'){\n          this.loaders.cubeTextureLoader.load(\n            src.path,(file)=&gt;{\n              console.log(file,src);\n              this.sourceLoaded(src,file);\n            }\n          )\n      }\n    }\n  }\n\n  sourceLoaded(src,file){\n    items[src.name] = file;\n    this.loaded++;\n    if(this.loaded === this.toLoad){\n      this.trigger('allItemsLoaded')\n    }\n  }\n}\n</code></pre> For that we add an extra file where we store the sources and its paths as an array of objets <pre><code>//sources.js\nexport default [\n  {\n    name:'asset1',\n    type:'cubeTexture',\n    path:[\n      'text/px.jpg',\n      'text/nx.jpg',\n      ...\n    ]\n  }\n]\n</code></pre></p> <p>We then can listen to the <code>allItemsLoaded</code> event an execute further code <pre><code>export default class World{\n  ...\n  //wait till resources are loaded\n  this.resources.on('allItemsLoaded'), () =&gt; {\n    this.environment = new Environment()\n  }\n}\n</code></pre></p> <p>It also can be useful to create a own class for the <code>DebugUI</code> <pre><code>import GUI from 'lil-gui'\nexport default class Debug{\n  constructor(){\n    // this allows to only show the debug ui if acces the webisite with #debug at the end\n    //we check if debug is present with window.location.hash\n    this.active = window.location.hash === '#debug'\n\n    if(this.active){\n      this.ui = new GUI\n    }\n  }\n}\n</code></pre></p> <p>It is also important that when the Three.js experience is not used any more or some objects get distroyed that need to properly clean up. <pre><code>export default class Experience{\n  ...\n\n  destroy(){\n    //sizes and till still gonna listen to the native JS events so we need to handle to stop listen to them as well \n    this.sizes.off('resize')\n    this.time.off('tick')\n\n    this.scene.traverse((child) =&gt; {\n      if(child instanceof THREE.Mesh){\n        child.geometry.dispose();\n        //Loop through material properties\n        for(const key in child.material){\n          const value = child.material[key]\n\n          if(value &amp;&amp; typeof value.dispose === 'function')\n          {\n            value.dispose()\n          }\n        }\n      }\n    })\n    this.camera.instance.dispose()\n    this.renderer.instance.dispose()\n    if(this.debug.active){\n      this.debug.ui.destroy()\n    }\n\n  }\n}\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#own-hacks","title":"Own hacks","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#tile-effect","title":"Tile effect","text":"<p>This often makes sense for big floor materials <pre><code>const tex = textureLoader.load(...)\ntex.repeat.set(2,2)\ntex.wrapS = tex.wrapT = THREE.MirroredRepeatWrapping\n//tex.wrapS = tex.wrapT = THREE.RepeatWrapping\n</code></pre></p>","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#interesting-tools","title":"Interesting Tools","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#blender","title":"Blender","text":"","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Basics/#path-conversion","title":"Path conversion","text":"https://github.com/ClassOutside/Blender_Path_To_Three.JS  # Ideas  Animate the field of view of the camera from long small to big field of view ![Idea](https://github.com/PineappleBeer/Three.JS-journey/raw/master/07-cameras/files/video-1.gif)  Create a scene where you only see the baked shadows. Use that to tell a story  Physics - on collision switch materials  Animate elements and have a model with black texture on black background so it negates the animated objects  Let shapes unrotated and rotate environment map or background of scene to create intresting effects","tags":["Three.js","Javascript"]},{"location":"topics/JavaScript/ThreeJS/Shaders/","title":"Three.js Shader","text":"","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#basics","title":"Basics","text":"<p>A shader is a program written in GLSL that gets send to the GPU. Shaders are used to position each vertex of a geometry and to color each pixel of the geometry. People often use fragment because not each point in the render automatically matches each pixel on the screen.</p> <p>The shader receives a lot of data like vertices coordinates, mesh transformations, camera information like field of view, color information, textures, lights etc.  In the GPU this data gets processed according to the shader program written.</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#vertex-shader","title":"Vertex Shader","text":"<p>In the shader flow the vertex shader happens first. Vertex shader set the position of the vertices of a geometry. They receive information of the vertices coordinates, the camera and of mesh transformations.  In the shader these information get processes so the 3D shape gets projected onto 2D space - so we can see it as the render and on the canvas.</p> <p>We write one shader code that gets applied to every vertex of the geometry but also need the shader to behave differently for each vertex, according to the vertex's position. We have two types of data to achieve that: - Attributes: This data is different for each vertex     - position of vertex     - texture coordinates at vertex      - etc. - Uniforms: This data stays the same for all vertex     - position of whole object in space     - lightning information     - time of the animation</p> <p>When the vertices are placed the GPU knows what the visible geometry is and can pass that information to the fragment shader</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#fragment-shader","title":"Fragment Shader","text":"<p>The fragment shader assigns a color to each of the geometry's visible fragments. Similar to the vertex shader the fragment shader code get's applied to each fragment. With <code>uniforms</code> we can input data into the fragment shader. Furthermore we can pass information from the vertex shader into the fragment shader with uniforms - this data is called <code>varying</code>.</p> <p>More on fragment shader </p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#summary","title":"Summary","text":"<ul> <li><code>vertex shader</code> set's the vertice position of the geometry</li> <li><code>fragment shader</code> set's the color value for each visible fragment of the geometry</li> <li><code>fragment shader</code> get's executed after the <code>vertex shader</code></li> <li><code>Attributes</code> are data that is different for each vertex (just vertex shader)</li> <li><code>Uniforms</code> are data that is the same for each vertex and fragment (vertex and fragment shader)</li> <li><code>Varying</code> allow to pass data from vertex to fragment shader.</li> </ul>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#material","title":"Material","text":"<p>For shaders we use <code>ShaderMaterial</code> or <code>RawShaderMaterial</code> - <code>ShaderMaterial</code> - already has code automatically added to code - <code>RawShaderMaterial</code> - empty shader code.</p> <pre><code>const shaderMaterial = new THREE.RawShaderMaterial({\n    vertexShader:``,\n    fragmentShader:``\n})\n</code></pre> <p>Basic shader code is <pre><code>const material = new THREE.RawShaderMaterial({\n    vertexShader: `\n    uniform mat4 projectionMatrix;\n    uniform mat4 viewMatrix;\n    uniform mat4 modelMatrix;\n\n    attribute vec3 position;\n\n    void main(){\n        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position,1.0);\n    }\n    `,\n    fragmentShader: `\n    precision mediump float;\n\n    void main(){\n        gl_FragColor = vec4(0.0,1.0,0.0,1.0); \n    }\n    `\n})\n</code></pre></p> <p>For a cleaner file we should put the shader code in it's own files.  Create a file for the vertex and the fragment shader <code>vertex.glsl</code> <code>frag.glsl</code> When using VSCode make sure you have <code>Shader langauges support for VSCode</code> and maybe <code>GLSL Lint</code> Plugin installed.</p> <p>To handle glsl shader in <code>vite</code> projects we need to import ether <code>vite-plugin-glsl</code> or <code>vite-plugin-glslify</code> <code>npm install vite-plugin-glsl</code> and import it to the fragment and vertex shader files.</p> <pre><code>import glsl from 'vite-plugin-glsl'\n//...Shadercode\n\nexport default {\n    plugins:\n    [\n        restart({restart:['../static/**',]}),\n        glsl()\n    ]\n}\n\n\n\nimport vertexShader from './shaders/vertex.glsl'\nimport fragmentShader from './shaders/fragment.glsl'\n\nconst shaderMat = new THREE.RawShaderMaterial({\n    vertexShader:vertexShader,\n    fragmentShader:fragmentShader\n})\n</code></pre> <p>Similar to the properties of other materials we also can set properties like <code>wireframe,side,transparent,flatShading</code> in shader materials. Different properties like map, color or opacity wouldn't work because we are handling them ourself in the shader itself.</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#vertex-shader_1","title":"Vertex Shader","text":"<p>More to VertexShader</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#passing-threejs-values-into-shader","title":"Passing Three.js values into shader","text":"","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#attributes","title":"Attributes","text":"<p><pre><code>const count = geometry.attributes.position.count;\nconst randoms = new Float32Array(count);\n\nfor(let i = 0; i&lt;count;i++){\n    randoms[i] = Math.random();\n}\ngeometry.setAttribute('aRanVal', new THREE.BufferAttribute(randoms,1));\n</code></pre> <pre><code>attribute float aRanVal;\n\nvoid main(){\n    //...\n    modelPosition.z = aRanVal;\n}\n</code></pre></p> <p>If we want to use Attributes in the fragment shader we have to first send them to the vertex shader then pass them with <code>varying</code> into the fragment shader </p> <pre><code>//vertex\nattribute float aRanVal;\nvarying float vRandom;\n\nvoid main(){\n\n    vRandom = aRanVal;\n}\n\n//fragment\nprecision mediump float;\nvarying float vRandom;\nvoid main(){\n    gl_FragColor = vec4(0.5,vRandom,1.0,1.0);\n}\n</code></pre> <p>One thing to have in mind is that values between the vertices are interpolated</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#uniforms","title":"Uniforms","text":"<p>If we want to send values from JS into the fragment or vertex we can use uniforms. These allow us for example to use the same shader for multiple objects but set with different parameters.</p> <p><pre><code>const shaderMaterial = new THREE.RawShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms:\n    {\n        uFrequency: { value: new THREE.Vector2(10,5)}\n    }\n})\n</code></pre> <pre><code>uniform vec2 uFrequency;\n\nvoid main(){\n    modelPosition.z +=sin(uFrequency.x*modelPosition.x)*0.1;\n    modelPosition.z +=sin(uFrequency.y*modelPosition.y)*0.1;\n}\n\nuniform float uFrequency;\n\nvoid main(){\n    gl_FragColor = vec4(sin(uFrequency),0.0,0.0,1.0);\n}\n</code></pre></p> <p>Uniforms allow us also to send a time value into the shader and whit that we can drive animations inside the shaders.</p> <pre><code>const material = RawShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: {\n        uFrequency: {value: new THREE.Vector2(10,5)},\n        uTime: {value:0}\n\n}})\n\nconst tick = () =&gt; {\n    const elapsedTime = clock.getElapsedTime();\n\n    material.uniforms.uTime.value = elapsedTime;\n}\n\n\n//Shader\nuniform float uTime;\n...\nvoid main(){\n    modelPosition.z = sin(modelPosition.x * uFrequency.x + uTime)*0.1;\n    modelPostionn.z = sin(modelPostion.y*uFrequency.y +uTime) *0.1;\n}\n</code></pre> <p>We also can pass color and textures from Three.js as a uniform into the fragment shader. To display Texture properly on our geometry the <code>texture2D</code> function in the fragment shader needs <code>uv</code> coordinates to show every color at it's right position. Three.js is creating these <code>uv</code> coordinates for us. <code>console.log(geometry.attributes.uv)</code> We can get the attribute in the vertex shader and then pass it over to the fragment shader.</p> <pre><code>const texture = textureLoader.load('path')\n\nconst material = new THREE.RawShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader:fragmentShader,\n    uniforms: {\n        //...\n        uColor: {value: new THREE.Color('green')}\n        uTexture: {values: myTexture}\n    }\n})\n//glsl\n//vertex\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main(){\n    //...\n    vUv = uv;\n}\n\n//fragment\nvarying vec2 vUv;\nuniform vec3 uColor;\nuniform sampler2D uTexture;\nvoid main(){\n    vec4 textureColor = texture2D(uTexture,vUv);\n    gl_FragColor = textureColor;\n    gl_FragColor = vec4(uColor,1.0);\n}\n</code></pre>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#animation-particles","title":"Animation Particles","text":"<p>Shaders are also a good tool to animate the particles in the GPU instead of animating each vertex in the CPU.</p> <p>When we work with Particles in our shader we need to define <code>gl_PointSize</code> in the shader.</p> <p>Instead of a <code>PointMaterial</code> we use a <code>ShaderMaterial</code> with the fragment- and vertex-shader.</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#randomize-size","title":"Randomize Size","text":"<p>If you want to create random sizes for each particle we need to create a <code>BufferAttribute</code> then reference it in the shader.</p> <pre><code>const scales = new Float32Array(parameters.count);\n\nfor(let i = 0; i&lt;parameters.count;i++){\n    ...\n    scales[i] = Math.random()\n}\n...\ngeometry.setAttribute('aScale', new THREE.BufferAttribute(scales,1));\n</code></pre> <pre><code>attribute float aScale;\n\nvoid main(){\n    ...\n    gl_PointSize = uSize * aScale;\n}\n</code></pre> <p>To get the same particle sizes on each screen we should multiple the <code>gl_PointSize</code> with the pixel ratio. <pre><code>const material = new THREE.ShaderMaterial({\n    ...\n    uniforms:{\n        uSize: {value:8 * renderer.getPixelRatio()}\n    }\n\n})\n</code></pre> Just be aware that <code>renderer</code> has to be initialized before.</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#size-attenuation","title":"Size attenuation","text":"<p>To avoid that all particles have the same size and the ones that are further away are smaller than the ones closer we have to do the size attenuation in the vertex shader <pre><code>void main(){\n    ...\n    gl_PointSize = uSize * aScale;\n    gl_PointSize *= (1.0 /viewPosition.z);\n}\n</code></pre></p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#uvs-in-fragment-shader","title":"UVs in Fragment Shader","text":"<pre><code>void main(){\n    gl_FragColor = vec4(gl_PointCoord,1.0,1.0);\n}\n</code></pre>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#bring-time-into-shader","title":"Bring Time into shader","text":"<pre><code>const material = new THREE.ShaderMaterial({\n    ...\n    uniforms:{\n        uTime: {value:0}\n    }\n})\n....\nconst clock = new THREE.Clock();\nconst tick = () =&gt; {\n    const elapsedTime = clock.getElapsedTime();\n    material.uniforms.uTime.value = elapsedTime;\n}\n</code></pre>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/ThreeJS/Shaders/#manipulate-threejs-build-in-materials","title":"Manipulate Three.js Build-in Materials","text":"<p>Sometimes you want to start from a build-in Three.js Material like <code>MeshStandardMaterial</code> and just adapt a specific part of the vertex shader but don't want to rewrite the whole fragment shader. Or the other way around where you only want to displace the colors but keep the vertex shader intact. </p> <p>We can use a Three.js hook that get's triggered before the shader is compiled. To modify a material we need access to it's shaders. <pre><code>material.onBeforeCompile = (shader) =&gt; {\n    console.log(shader)\n    console.log(shader.vertexShader)\n}\n//All the #include will inject code located specific in the Three.js dependency to not repeat writing to much code through the library\n/*\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n    varying vec3 vWorldPosition;\n#endif\n#include &lt;common&gt;\n#include &lt;batching_pars_vertex&gt;\n#include &lt;uv_pars_vertex&gt;\n#include &lt;displacementmap_pars_vertex&gt;\n#include &lt;color_pars_vertex&gt;\n#include &lt;fog_pars_vertex&gt;\n#include &lt;normal_pars_vertex&gt;\n#include &lt;morphtarget_pars_vertex&gt;\n#include &lt;skinning_pars_vertex&gt;\n#include &lt;shadowmap_pars_vertex&gt;\n#include &lt;logdepthbuf_pars_vertex&gt;\n#include &lt;clipping_planes_pars_vertex&gt;\nvoid main() {\n    #include &lt;uv_vertex&gt;\n    #include &lt;color_vertex&gt;\n    #include &lt;morphinstance_vertex&gt;\n    #include &lt;morphcolor_vertex&gt;\n    #include &lt;batching_vertex&gt;\n    #include &lt;beginnormal_vertex&gt;\n    #include &lt;morphnormal_vertex&gt;\n    #include &lt;skinbase_vertex&gt;\n    #include &lt;skinnormal_vertex&gt;\n    #include &lt;defaultnormal_vertex&gt;\n    #include &lt;normal_vertex&gt;\n    #include &lt;begin_vertex&gt;\n    #include &lt;morphtarget_vertex&gt;\n    #include &lt;skinning_vertex&gt;\n    #include &lt;displacementmap_vertex&gt;\n    #include &lt;project_vertex&gt;\n    #include &lt;logdepthbuf_vertex&gt;\n    #include &lt;clipping_planes_vertex&gt;\n    vViewPosition = - mvPosition.xyz;\n    #include &lt;worldpos_vertex&gt;\n    #include &lt;shadowmap_vertex&gt;\n    #include &lt;fog_vertex&gt;\n#ifdef USE_TRANSMISSION\n    vWorldPosition = worldPosition.xyz;\n#endif\n}\n*/\n</code></pre></p> <p>What we then can do is replace the parts that we want to change with a JS <code>.replace()</code> function. But to understand what the build in shader does it is useful to check it at <code>/node_modules/three/src/renderers/shaders/</code> and you can find the <code>#include</code> in ShaderChunk. In the Chunk you can see how it basically works. We then replace it with out own definition.</p> <pre><code>material.onBeforeCompile = (shader) =&gt; {\n    shader.vertexShader = shader.vertexShader.replace(\n        '#include &lt;begin_vertex&gt;',\n        ` \n            #include &lt;begin_vertex&gt;\n            transformed.y += 3.0\n        `\n    )\n}\n</code></pre> <p>In shader you would normally define your own functions or mathematical calculations before the <code>main()</code> function. Because we don't have direct access to that area we can use the <code>#include &lt;common&gt;</code> which lies outside of the <code>main()</code> function. It is also available in all shaders.</p> <pre><code>material.onBeforeCompile = (shader) =&gt; {\n    shader.vertexShader = shader.vertexShader.replace(\n        `#include &lt;common&gt;`,\n        `#include &lt;common&gt; \n\n        mat2 get2dRotateMatrix(float _angle){\n        return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n        }\n`\n    )\n\n     shader.vertexShader = shader.vertexShader.replace(\n        '#include &lt;begin_vertex&gt;',\n        ` \n            #include &lt;begin_vertex&gt;\n            float angle = 0.2;\n            mat2 rotationMatrix = get2dRotateMatrix(angle);\n            transformed.xz = rotationMatrix * transformed.xz;\n            `\n    )\n}\n</code></pre> <p>To use also <code>uniforms</code> in the material we also add them in <code>common</code> and assign them as usual</p> <p><pre><code>material.onBeforeCompile = (shader) =&gt; {\n    shader.uniforms.uTime = {value:0}\n\n    ...\n\n}\n</code></pre> <pre><code>#include common\n\nuniform float uTime;\n...\n</code></pre> <pre><code>#include &lt;begin_vertex&gt;\n\nfloat angle = (position.y +u_time)*0.9;\nmat2 rotMatrix = get2dRotateMatrix(angle);\ntransformed.xz = rotMatrix * transformed.xz;\n</code></pre></p> <p>We have the problem that we can't access the uniform in the shader in the <code>tick()</code> function because we can not just access the uniform of the material.</p> <p>What we can do is create our own <code>customUniform</code> and reference that to the <code>shader.uniform.uTime</code>.</p> <pre><code>const customUniform = {\n    uTime: {value:0}\n}\nmaterial.onBeforeCompile = (shader) =&gt; {\n    shader.uniforms.uTime = customUniform.uTime;\n    ...\n}\n\nconst clock = new THREE.Clock();\nconst tick = () =&gt; {\n    const elapsedTime = clock.getElapsedTime();\n\n    customUniforms.uTime.value = elapsedTime;\n}\n</code></pre> <p>The problem is now that when we twist our materials the material that Three.js uses to render the shadows doesn't get twist.</p> <p>The material that is used for the shadows of the scene is a <code>MeshDepthMaterial</code>. We can not access that material on an easy way directly but we can overwrite it with <code>customDepthMaterial</code> property on the mesh.</p> <p><pre><code>const depthMaterial = new THREE.MeshDepthMaterial({\n    depthPacking: THREE.RGBADepthPacking\n})\n</code></pre> <code>THREE.RGBADepthPacking</code> allows to efficiently store the depth with r,g,b,a values.</p> <p>When the model is loaded we apply our custom depth material and change <code>customDepthMaterial</code> property with our own depth material.</p> <p><pre><code>gltfLoader.load(\n    '/models/LeePerrySmith/LeePerrySmith.glb',\n    (gltf) =&gt; {\n        //...\n        mesh.material = material;\n        mesh.customDepthMaterial = depthMaterial\n    }\n)\n</code></pre> If you have a more complex model with multiple meshes you may need to traverse it and update all materials. Now we apply the changes that we used for the <code>MeshStandardMaterial</code> to the <code>depthMaterial</code></p> <pre><code>depthMaterial.onBeforeCompile = (shader) =&gt; {\n    shader.uniform.uTime = customUniform.uTime;\n\n    depthMaterial.vertexShader = depthMaterial.vertexShader.replace(\n        `#include &lt;common&gt;`,\n        `#include &lt;common&gt;\n\n        uniform float uTime;\n        mat2 get2dRotateMatrix(float _angle){\n        return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle))\n        }\n        `\n    )\n\n    depthMaterial.vertexShader = depthMaterial.vertexShader.replace(\n        `#include &lt;begin_vertex&gt;`,\n        `#include &lt;begin_vertex&gt;\n        float angle = (position.y +uTime)*0.9;\n        mat2 rotMatrix = get2dRotateMatrix(angle);\n        transformed.xz = rotMatrix * transformed.xz;\n        `\n    )\n}\n</code></pre> <p>Besides the shadows we probably also need to rotate the normals of the mesh. The chunk that handles the normals is <code>beginnormal_vertex</code>. We then replace that chunk for the <code>MeshStandardMaterial</code>. You can find the chunk here <code>/node_modules/three/src/renderers/shaders/ShaderChunks/beginnormal_vertex.glsl.js</code></p> <p>One think to be aware of that all the chunks at the end get added into on shader code. So we can't define the same variables in multiple chunks. We have to define the variable in the chunk that get's implemented first and then can use it in the following ones.</p> <p>Because <code>beginnormal_vertex</code> gets included first we define the variables there. The normal variable name is <code>objectNormal</code></p> <p><code>``JS material.onBeforeCompile = (shader) =&gt; {     shader.vertexShader = shader.vertexShader.replace(</code>#include <code>,</code>#include  <pre><code>    float angle = (position.y+uTime) *0.9;\n    mat2 rotMatrix = get2dRotateMAtrix(angle);\n    objectNormal.xz = rotMatrix * objectNormal.xz;\n`\n)\n\nshader.vertexShader = shader.vertexShader.replace(\n    `#include &lt;begin_vertex&gt;`\n    `#include &lt;begin_vertex&gt;\n\n    transformed.xz = rotMatrix * transformed.xz;\n    `\n)\n</code></pre> <p>}</p>","tags":["Three.js","Javascript","Shader"]},{"location":"topics/JavaScript/p5/","title":"P5.JS","text":""},{"location":"topics/JavaScript/p5/#latest-added","title":"Latest added","text":"<p>Data From Device</p>"},{"location":"topics/JavaScript/p5/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/JavaScript/p5/DataFromDevice/","title":"Data From Device","text":"","tags":["JS","P5"]},{"location":"topics/JavaScript/p5/DataFromDevice/#device-motion-orientation","title":"Device Motion &amp; Orientation","text":"<p>Acceleration <code>accelerationX,accelerationY,accelerationZ</code></p> <p>Rotation <code>rotationX,rotationY,rotationZ</code> <code>pRotationX,pRotationY,pRotationZ</code></p> <p>Device Orientation <code>deviceOrientation</code> LANDSCAPE/PORTRAIT</p>","tags":["JS","P5"]},{"location":"topics/Math/","title":"Math","text":""},{"location":"topics/Math/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Math/SolvingEquations/","title":"Solving Equations","text":"","tags":["Math"]},{"location":"topics/Math/SolvingEquations/#understanding-variables","title":"Understanding variables","text":"<p>The values from unknown in an equation can help us understand how different situations and scenarios work.</p> <p>A variable is a letter or a symbol that we use instead of an unknown value.</p>","tags":["Math"]},{"location":"topics/Math/SolvingEquations/#understanding-equations","title":"Understanding equations","text":"<p>An expression combines numbers and variables with operations like addition, subtraction, multiplication and division.</p> <p>Expressions help to describe combinations of known and unknown values in an equation.</p> <p>We find the value of the expression when the variables are equal to a specific number.</p> <p>An equation brings together two expressions. It shows how the variables relate to each other.</p> <p>An equation is a statement that two expressions have the same value.</p> <p>You can solve an equation by finding the values of the variables that make the equation true on both sides of it. Like both sides of a scale that is balanced.</p> <p>Both expressions of an equation stay equal when the same amount gets subtracted on both sides.</p>","tags":["Math"]},{"location":"topics/Networking/","title":"Networking","text":""},{"location":"topics/Networking/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Networking/LocalHttpServer/","title":"Setting up a local HTTP Server","text":"<p>If you want to test for example if your .html file is working properly you can setup a local HTTP Server</p> <p>Steps to do: - Install node.js - <code>npm install -g http-server</code> - Go to path - http server - Open Browser at <code>http://localhost:8888</code></p>","tags":["Networking"]},{"location":"topics/Python/","title":"Python","text":"<p>Welcome in Python Land!</p>"},{"location":"topics/Python/#last-added","title":"Last added","text":"<p>Limit length of List</p>"},{"location":"topics/Python/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Python/LimitLenghtList/","title":"Limit length of list","text":"<p>To limit the length of a list in Python we can shorten it with the <code>:</code>. <pre><code>myList = ['hallo','hallo1','hallo2','hallo3','hallo4','hallo5','hallo6']\nlistLength = 3\nshorterList = valueList[:listLength]\nprint(shorterList)\n</code></pre></p>","tags":["Python","List"]},{"location":"topics/Sensors/","title":"Sensors","text":""},{"location":"topics/Sensors/#latest-added","title":"Latest added","text":"<p>Overview Sensors</p>"},{"location":"topics/Sensors/OverviewSensors/","title":"Overview Sensors","text":"","tags":["Sensors"]},{"location":"topics/Sensors/OverviewSensors/#depth","title":"Depth","text":"<ul> <li>Kinect</li> <li>Orbecc Femto Mega</li> <li>Zed</li> <li>Realsense</li> <li>Iphone Lidar</li> </ul>","tags":["Sensors"]},{"location":"topics/Sensors/OverviewSensors/#multipurpose","title":"Multipurpose","text":"<ul> <li>Pipo</li> </ul>","tags":["Sensors"]},{"location":"topics/Shader/","title":"Shader","text":"<p>Fragment Shader</p>"},{"location":"topics/Shader/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Shader/ShaderSrc/","title":"Learning Sources","text":""},{"location":"topics/Shader/ShaderSrc/#lernquellen-reihenfolge","title":"Lernquellen Reihenfolge","text":"<ul> <li>[x] Learn GLSL Shaders From Scratch - https://www.udemy.com/course/learn-glsl-shaders-from-scratch/</li> <li>[x] https://www.youtube.com/watch?v=f4s1h2YETNY</li> <li>[ ] Notes to finish</li> <li>[ ] Dayone Notes </li> <li>[ ] Book of Shaders </li> <li> <p>[ ] PRACTISE PRACTISE PRACTISE - You need to try things out not just learn basic resources - otherwise you dont get better and just get stuck https://www.youtube.com/playlist?app=desktop&amp;list=PLgfxkm9xFocbc6wiO3A8vXalP4K57yUKo https://itp-xstory.github.io/p5js-shaders/#/./docs/examples/bookofshaders https://www.shadertoy.com/view/dl2yRK https://www.shadertoy.com/view/llsfDf https://editor.p5js.org/NicolasTilly/sketches/djpN2njcm https://aferriss.github.io/p5jsShaderExamples/4_image-effects/4-17_delay/ https://aferriss.github.io/p5jsShaderExamples/3_uniforms/3-2_texture2d/ https://aferriss.github.io/p5jsShaderExamples/4_image-effects/4-6_pixelate/ https://aferriss.github.io/p5jsShaderExamples/4_image-effects/4-5_stripes-from-image/ https://aferriss.github.io/p5jsShaderExamples/4_image-effects/4-3_sinewave-distort/ https://www.shadertoy.com/view/dl2XWG https://www.shadertoy.com/view/WtKcW3 https://www.shadertoy.com/view/4Xs3RB https://www.shadertoy.com/view/3lVGWG https://www.shadertoy.com/view/wlXSz7 https://www.shadertoy.com/view/Xs3GzH https://www.shadertoy.com/view/lsdBW2 https://www.shadertoy.com/view/XcfGD7 https://www.shadertoy.com/view/csfSRS https://www.shadertoy.com/view/DslSz7 https://www.shadertoy.com/view/3dBXRd https://www.shadertoy.com/view/WtSfW1 https://www.shadertoy.com/view/wdSXzt https://www.shadertoy.com/view/3dtczH https://www.shadertoy.com/view/llGXWm https://www.shadertoy.com/view/4tfcz4 https://www.shadertoy.com/results?query=bend&amp;sort=popular&amp;from=132&amp;num=12 https://itp-xstory.github.io/p5js-shaders/#/ https://www.shadertoy.com/view/XdXGDS https://www.shadertoy.com/view/4dsyWB https://www.shadertoy.com/view/wt2BWG https://www.shadertoy.com/view/MtXyD2 https://www.shadertoy.com/view/XllfzS https://www.shadertoy.com/view/Xd2BDm https://www.shadertoy.com/view/4ltXRr https://www.shadertoy.com/view/XlS3Wm https://www.shadertoy.com/view/wljyDz https://www.shadertoy.com/view/4dsSDB https://www.shadertoy.com/view/4sfBWj https://www.shadertoy.com/view/MdS3R3 https://www.shadertoy.com/view/Xts3D7 https://www.shadertoy.com/view/XsfSD4 https://www.shadertoy.com/view/Msd3W2 https://www.shadertoy.com/view/MlGGz3 https://www.shadertoy.com/view/3sfczf https://www.shadertoy.com/view/tdG3Rd https://www.shadertoy.com/view/4t3SzN https://www.shadertoy.com/view/wl2yRD https://www.shadertoy.com/view/XlXcDM https://www.shadertoy.com/view/lsySzw https://www.shadertoy.com/results?query=+warp&amp;sort=popular&amp;from=72&amp;num=12 https://www.shadertoy.com/view/dlfXRn https://www.shadertoy.com/view/MdjSDD https://www.shadertoy.com/view/ctfczB https://www.shadertoy.com/view/WssyRB https://www.shadertoy.com/view/MddBDS https://www.shadertoy.com/view/Xt2XRR https://thndl.com/the-art-of-repepetition.html https://thndl.com/continuously-discrete.html https://thndl.com/more-noise.html https://thndl.com/page/3/ https://thndl.com/ https://www.youtube.com/watch?v=mOEbXQWtP3M&amp;list=PLC80qbPkXBmw3IR6JVvh7jyKogIo5Bi-d https://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/ https://sive.rs/book/IsraelMMC https://editor.isf.video/shaders/5e7a80497c113618206dee83 https://editor.isf.video/shaders/5e7a7fcb7c113618206de476 https://www.youtube.com/@DanMoranGameDev https://www.youtube.com/@TheArtofCodeIsCool https://www.youtube.com/@curiouslyminded/videos https://www.youtube.com/@akella_ https://www.shadertoy.com/view/tdffDN https://x.com/lejeunerenard https://codepen.io/ilithya/details/KKqyKve https://www.youtube.com/watch?v=W5gR_Kww2k8&amp;t=265s https://gpfault.net/posts/perlin-noise.txt.html https://devsnap.me/three-js-examples https://discourse.threejs.org https://duckduckgo.com/?atb=v372-1&amp;ia=web&amp;q=Threejs+tree https://github.com/acrose99/Three-JS-Snippets/tree/170b1452a15e07115ee53d88c750ece514986564 https://codepen.io/cluzier/pen/KxWLjq https://www.codame.com https://charstiles.com https://shaderlabs.org/wiki/Complementary_Shaders https://www.curiouslyminded.xyz https://codepen.io/ilithya/details/zxOKmEM https://www.youtube.com/watch?v=Nu6oRlPthmE https://www.youtube.com/results?search_query=master+three.js+interaction https://wawasensei.dev/courses/react-three-fiber/lessons/theatre-js https://www.youtube.com/watch?v=UMqNHi1GDAE https://www.youtube.com/watch?v=ZqEa8fTxypQ https://codepen.io/ArbnorHajdini/pen/VjjBog https://thndl.com/raking-thru-embers.html https://www.shadertoy.com/view/lssSDH</p> </li> <li> <p>[ ] https://www.youtube.com/watch?v=0ifChJ0nJfM</p> </li> <li>[ ] https://www.youtube.com/watch?v=q-0rBJHaWH0&amp;list=PLyuV91SJJre73sW3p2zQFRH_yU1jObXLE&amp;index=1</li> <li>[ ] https://www.youtube.com/watch?v=kfM-yu0iQBk</li> <li>[ ] https://www.youtube.com/watch?v=ekQcLN5n6lc&amp;list=PLjcjAqAnHd1HD2Czzgp5GZtG9fnUkqLlV</li> <li>[ ] https://www.youtube.com/watch?v=hX3mazz8txo</li> <li>[ ] https://forum.unity.com/threads/share-some-experiences-for-those-who-want-to-learn-rendering-or-shaders.1297734/</li> <li>[ ] https://www.youtube.com/watch?v=3mfvZ-mdtZQ&amp;t=1070s</li> <li>[ ] https://niksgames.com/libs/MyShaderChunks.js</li> <li>[ ] https://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html</li> <li>[ ] Vertex Shader</li> <li>[ ] https://www.youtube.com/watch?v=kTVUvfp5og8</li> <li>[ ] https://ciphrd.com/2020/04/08/pixel-sorting-on-shader-using-well-crafted-sorting-filters-glsl/</li> <li>[ ] https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg</li> <li>[ ] https://www.lighthouse3d.com/tutorials/glsl-tutorial/</li> <li>[ ] https://www.youtube.com/watch?v=ixEPBzrhgTg&amp;list=PLTEbuqk52pICikiHfD-a52dxEav5UqMLy</li> <li>[ ] https://www.youtube.com/watch?v=8bbTkNZYdQ8</li> <li>[ ] https://iquilezles.org/articles/warp/</li> <li>[ ] https://glslsandbox.com/</li> <li>[ ] https://www.youtube.com/watch?v=hZj6jaYNKJo&amp;t=3480s</li> <li>[ ] https://github.com/patriciogonzalezvivo/glslViewer</li> <li>[ ] https://shaderfrog.com/app https://forum.unity.com/threads/basic-questions-about-shader-how-to-study.1306656/ https://catlikecoding.com/unity/tutorials/rendering/ https://www.youtube.com/watch?v=oKbCaj1J6EI https://www.amazon.de/Graphics-Shaders-Theory-Practice-English-ebook/dp/B00OD4FWKW/ref=sr_1_9?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=3H407IHNURP38&amp;keywords=GLSL+shader&amp;qid=1704367437&amp;sprefix=glsl+shader%2Caps%2C103&amp;sr=8-9</li> <li>[ ] Raymarching</li> </ul> <p>https://github.com/glslify/glsl-easings https://github.com/realazthat/glsl-gaussian https://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html https://interactiveimmersive.io/blog/glsl/glsl-data-tricks https://glsl.evos.studio/ https://www.geeks3d.com/20100909/shader-library-gaussian-blur-post-processing-filter-in-glsl/ https://hydra.ojack.xyz/docs/docs/learning/extending-hydra/glsl/ https://glslsandbox.com/ https://github.com/FarazzShaikh/glNoise https://www.youtube.com/watch?v=VOyZRRv7PNc https://github.com/aferriss/p5jsShaderExamples/?tab=readme-ov-file https://github.com/aferriss/p5jsShaderExamples/ https://www.youtube.com/playlist?list=PL5zzMHjnPWS03e_t7jik_-stynirBRrPc https://interactiveimmersive.io/blog/category/glsl https://aferriss.github.io/p5jsShaderExamples/2_texture-coordinates/2-6_checker/ https://thebookofshaders.com/edit.php https://www.youtube.com/watch?v=gDQBbDlAEKs https://github.com/leahoppe/p5js-shader-examples https://blog.pixelfreestudio.com/how-to-use-glsl-shaders-in-webgl-for-advanced-3d-effects https://stegu.github.io/webgl-noise/webdemo/cellular.html https://duckduckgo.com/?q=glsl+merging+3dshapes&amp;atb=v372-1&amp;ia=web https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders https://duckduckgo.com/?atb=v372-1&amp;ia=videos&amp;iai=https://www.youtube.com/watch?v=xZM8UJqN1eY&amp;iax=videos&amp;q=how+to+run+glsl+code+in+markdown https://www.youtube.com/watch?v=oKbCaj1J6EI https://lygia.xyz/ https://coursecentral.co.uk/course/learn-glsl-shaders-from-scratch#component=course https://douges.dev/blog/threejs-trees-1 https://www.youtube.com/watch?v=6MwWOm23WfI https://www.youtube.com/watch?v=uwzEqeMd7uQ https://www.youtube.com/watch?v=V1Pd4C-T3IQ https://waelyasmina.net/articles/glsl-and-shaders-tutorial-for-beginners-webgl-threejs/ https://www.youtube.com/watch?v=r-95jCflRSA https://grayarea.org/course/3d-graphics-for-web-glsl-shaders/ https://www.youtube.com/watch?v=pZ94V-YAo-8 https://www.youtube.com/watch?v=Chh7hwdP8YE https://interactiveimmersive.io/blog/glsl/datamoshing-in-touchdesigner-part-3 https://www.ronja-tutorials.com/post/035-2d-sdf-combination/ https://github.com/patriciogonzalezvivo/glslGallery https://github.com/patriciogonzalezvivo/glslGallery?tab=readme-ov-file</p>"},{"location":"topics/Shader/FRAGMENT/","title":"Fragment Shader","text":"<p>Basic Intro</p> <p>GLSL Language</p> <p>Algorithmic drawing</p>"},{"location":"topics/Shader/FRAGMENT/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Shader/FRAGMENT/01_BasicIntro/","title":"Basic Intro","text":"<p>Fragment shader is code that get's executed for every single pixel of the canvas we draw on. It determines how each pixel should be colored. The output of a shader is a color in rgba values from 0.0 to 1.0. So we assign to every pixel on the canvas a rgb color value between 0.0 and 1.0.</p> <p>The code must behave differently depending on the position of the currently processed pixel on the canvas .  For that the shader receives the position/coordinate of the respective pixel as an input and returns the color for the pixel as a result/output.</p> <p>Every single pixel gets processed independently from the others. There is no before or after it is always just the current pixel the needs to calculated now.</p> <p>With <code>gl_FragColor</code> the shader defines the final color value of the pixel that gets returned from the shader. <code>gl_FragColor</code> is <code>vec4</code> - a Vector that contains 4 values - <code>vec4(r,g,b,a)</code></p> <p></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/01_BasicIntro/#thinking-process-for-shaders","title":"Thinking process for shaders","text":"<p>Position-Based Thinking:</p> <p>Every shader starts by figuring out \"where am I?\" using the pixel coordinates. We normalize these coordinates to make them easier to work with All our shapes are defined relative to these coordinates</p> <p>Distance-Based Thinking:</p> <p>Most shapes are created by calculating the distance from the current pixel to some point or line Circle: Check distance from center point Rectangle: Check distance from edges Complex shapes: Combine multiple distance calculations</p> <p>Color-Based Thinking:</p> <p>Colors are vectors of numbers (RGB) Mixing colors is vector math Changing Alpha values</p> <p>Step-by-Step Approach:</p> <p>Get pixel position Convert to useful coordinate system Calculate distance to shape Convert distance to color Output final color</p> <p>Some intresting questions: Position-Based Questions:</p> <p>\"Where is this pixel on the screen?\"</p> <p>What are its raw coordinates? Is it in the top half or bottom half? Is it left or right of center?</p> <p>\"What coordinate system makes most sense for what I'm drawing?\"</p> <p>Do I want (0,0) in the center or corner? Should my coordinates go from -1 to 1, or 0 to 1? Do I need to account for screen aspect ratio?</p> <p>\"How can I transform my coordinates to make the math easier?\"</p> <p>Would rotating help? Should I scale the space? Would offsetting the coordinates make the shape easier to draw?</p> <p>Distance-Based Questions:</p> <p>\"What's the simplest way to describe this shape mathematically?\"</p> <p>Is it based on distance from a point? (like a circle) Is it based on distance from a line? (like a rectangle) Can I break it into simpler shapes?</p> <p>\"How do I know if a pixel is inside or outside my shape?\"</p> <p>What's the mathematical rule that defines the boundary? What happens at the edges? How can I make the edges smooth?</p> <p>\"How can I combine multiple shapes?\"</p> <p>Should they blend together? Should one cut out from another? Do I need smooth transitions between them?</p> <p>Problem-Solving Pattern:</p> <p>\"What's the absolute simplest version of what I'm trying to draw?\"</p> <p>Can I start with just a dot or line? What's the most basic math that could work?</p> <p>\"How can I test if my math is working?\"</p> <p>What color should I make successfully calculated areas? Can I visualize the distance field using color? What happens if I animate this value?</p> <p>\"How can I break this complex shape into simpler parts?\"</p> <p>Is it multiple circles? Is it a combination of basic shapes? Can I use boolean operations (AND, OR, NOT) with shapes?</p> <p>Debugging Questions:</p> <p>\"Why isn't this pixel the color I expect?\"</p> <p>What are its exact coordinates? What value is my distance function returning? Are my numbers in the range I expect?</p> <p>\"How can I visualize what's happening?\"</p> <p>Can I show the raw distance value as a color? What happens if I multiply/divide my values by 10? What if I display different components in different color channels?</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/01_BasicIntro/#coordinates-of-the-pixel","title":"Coordinates of the pixel","text":"<p><code>gl_FragCoord</code> is the GLSL variable that provides the coordinates of the pixel currently being processed by the shader.</p> <p><code>gl_FragCoord</code> is a vec4 with the <code>vec4(x,y,z,w)</code> value.</p> <p>The coordinate system of a shader is: </p> <p>Because the value range of a the final pixelcolor lies between 0.0 - 1.0 it makes sense to normalise the coordinates of the pixels in the screen. </p> <p>We can nomalise the these with by dividing the coordinates by the resolution. <code>gl_FragCoord.xy/u_resolution</code>.</p> <p>With that we can map the xy position of the pixel onto the value range from 0.0 - 1.0.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/01_BasicIntro/#parallel-processing","title":"Parallel Processing","text":"<p>The GPU of a computer enables that multiple small programms can be executed in parallel. It executes for each pixel the shader programm at the same time.</p> <p>Shader programm doesn't know anything about the values of the other pixels when a pixel gets painted.</p> <p>So every pixel and vertex is independent from the other.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/","title":"GLSL Language","text":"<p>In GLSL each variable declaration or value assignment must end with a semicolon <code>;</code></p> <p>GLSL is strictly typed programming language which means you can't combine different data types.</p> <p><code>int myvar = 1.0*3;</code> is not possible because you can't combine <code>float</code> with <code>int</code> datatype.</p> <p>You can combine these with type declaration <code>int myvar = int(1.0)*3;</code></p> <p>We can apply mathematical operations like <code>+,-,*,/*</code> to the variables <pre><code>float var1 = 0.2 + 0.3;\nfloat var2 = 0.2 * 0.3;\n...\n</code></pre></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#data-types","title":"Data types","text":"<p>Common data types in GLSL are <code>bool</code>,<code>int</code> and<code>float</code>.</p> <p>GLSL also has constants <code>const</code>. The difference is that these must be initialized and they can't be changed in the code.</p> <p>Vectors allow us to store multiple values in one variable. <pre><code>float vektoren = vec2(x,y), vec3(x,y,z), vec4(r,g,b,a) \nint vektoren = ivec2(), ivec3(),ivec4()\nbool vektoren = bvec2(),bvec3() ...\n</code></pre></p> <p>We also can define types inside a line of code <code>float a = 0.432 + float(4);</code></p> <p>with <code>v.x v.y v.z</code> we can access the components of the vectors. We also can use the array format <code>v[0]</code>. <pre><code>vec4 vector;\nvector[0] = vector.r = vector.x = vector.s;\nvector[1] = vector.g = vector.y = vector.t;\nvector[2] = vector.b = vector.z = vector.p;\nvector[3] = vector.a = vector.w = vector.q;\n</code></pre></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#swizzling","title":"Swizzling","text":"<p>Swizzling in GLSL is the possibility to reorder values from a vector. </p> <pre><code>vec4 color = vec4(1.0,0.5,0.0,0.25);\n\ncolor.argb -&gt; vec4(0.25,1.0,0.5,0.0);\n</code></pre> <p>Swizzling also allows to write shorter versions of the variables <code>fragCoord.xy &lt;=&gt; vec2(fragCoord.x,fragCoord.y);</code></p> <p>When the vectors have the same length writing the calculations between the vectors can be shortened <code>vec2(v1.x/v2.x,v1.y/v2.y) &lt;=&gt; v1/v2</code></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#varying","title":"Varying","text":"<p>A varying is a variable that gets passed from the vertex shader to the fragment shader.</p> <p>In the vertex shader varyings get defined with <code>out</code> and in the fragment shader they get defined with <code>in</code> </p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#if","title":"If","text":"<pre><code>if(condition){\n    //do\n} else {\n    //do that\n}\n</code></pre> <p>Other way to write an if condition</p> <pre><code>float func(... bool soften){\n    float edge = (soften) ? radius * 0.05 : 0.0;\n    // (soften) ? if soften\n    // 0.05 - true condition\n    // 0.0 - false condition\n}\n</code></pre>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#for-loop","title":"For-Loop","text":"<pre><code>const int count = 10\nfor(int i=0; i&lt;count;i++){\n    //do something\n}\n</code></pre>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#functions","title":"Functions","text":"<p>If you have functions that have the same name but they have different input parameters the get considered as different functions. <pre><code>bool inRect(vec2 pt, vec4 rect){\n    bool result = false;\n    //calculate\n    return bool;\n}\n\nbool inRect(float x, float y, vec4 rect){\n    bool result = false;\n    //calculate\n    return bool;\n}\n</code></pre></p> <p>The fragment and the vertex shader have a <code>void main()</code> function that automatically gets called.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#preprocessor-macros","title":"Preprocessor Macros","text":"<p>With preprocessor macros you can define values like constants for example.</p> <p>They get evaluated in the first step before the compiling of the shader.</p> <p><code>#define float TWO_PI = 3.1415926535</code></p> <p>You also can define conditional definitions with <pre><code>#ifdef\n\n#enddef\n</code></pre></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#float-defintion","title":"Float defintion","text":"<p>In shader float values and their accuracy play a big role. If the accuracy the values are less acurate but the shader is faster.</p> <p>We define the accuracy of these in a preprocessor macro <pre><code>#ifdef\nprecision mediump float\n#enddef\n</code></pre></p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#uniforms","title":"Uniforms","text":"<p>The GPU of a computer is executing a big amount of parallel tasks - called threads. Every thread calculates the color value for one pixel.</p> <p>GLSL uses <code>uniform</code> to pass Data from the control framework like P5.js, TouchDesigner, Three.js, etc. into the shader and the single threads so the data is available and can be processed by the shader. </p> <p><code>uniform</code> is the same for all threads and can just be read by the shader -&gt; so the shader can't change the value of the uniform.</p> <p>Uniforms can have all possible GLSL datatypes.</p> <p>So uniforms save values from outside the shader so they can used in the shader </p> <p>There are some standard uniforms: - <code>u_mouse</code> Coordinates of the mouse on the screen - <code>u_time</code> passed time in seconds since the program start - <code>u_resolution</code> size of canvas/window in pixels </p> <p>We define uniforms like <code>uniform datatype name</code>.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#precision","title":"Precision","text":"<p>We can decide how precise a <code>float</code> value can be in GLSL.  <code>highp</code> - can be expensive on the performance and also doesn't work on all devices <code>mediump</code> - can use for usual usage. <code>lowp</code> - can create bugs because of reduced precision.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/02_GLSLlanguage/#debugging","title":"Debugging","text":"<p>In shader there aren't many possibilities to debug. One option is to assign the currently calculated pixel extreme color values.</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/","title":"Algorithmic Drawing","text":"<p>To draw intresting and complex graphics in GLSL it is It is important to understand one-dimensional mathematical functions and especially their graph on the x-axis in order to be able to work better with them later. Learn and explain the behavior of mathematical functions. The behavior of math. functions can be used to draw shapes by changing the colors of the pixels.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#mathematical-functions","title":"Mathematical Functions","text":"<p>GLSL provides mathematical functions to set or calculate values in the shader.</p> <p>A basic questions to ask yourself when using these functions is: what shapes does the math. function create when I insert values like the pixelposition.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#trigonomic-functionsoscillation-periodicity","title":"Trigonomic Functions(Oscillation &amp; Periodicity)","text":"<p>To animate graphics it's a good start to use the trigonimic functions Sine <code>sin()</code> and Cosine <code>cos()</code>.</p> <p>If you insert the the uv.x values into the sin function you get a gradient from left to right.</p>    See the Pen    Simple Sin(uvx) by levoxtrip (@levoxtrip)   on CodePen.  <p>If you insert uv.y you get a gradient from top to buttom.</p> <p>If you multiply the uv.x inside the <code>sin(uv.x*10.)</code> you can change the frequency of the sin function and you get multiple peaks of the sin-wave.</p> <p>If you multiply the <code>sin(uv)*2.0</code> outside the function you modify the amplitude of the sin function.</p> <p>If you add/subtract values to the <code>uv</code> inside the function <code>sin(uv.x+time)</code> you move the graph along the x-axis.</p> <p>If you add/subtract values outside the <code>sin(uv.x)+0.5</code> you move the graph along the y-axis.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#basic-math-functions","title":"Basic Math Functions","text":"<p>With the <code>pow(base,n)</code> function we can calculate the power/exponentiation of a value, where we raise a base number to an exponent: base\u207f.</p> <p>The <code>exp(x)</code> computes <code>e</code> Eulers number raised to the given power e\u02e3.</p> <p>The <code>abs(x)</code> returns the absolute value of the input. So if the input value is 0.2 <code>abs(-0.2)</code> the function return 0.2.</p> <p>Try to insert <code>abs(sin(x))</code>. <code>abs()</code> basically mirrors/reflects the values from the y-axis.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#interpolation-transitions","title":"Interpolation &amp; Transitions","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#step","title":"step()","text":"<p>The <code>step()</code> function works as a binary threshold. You can use it to test if a value is smaller or bigger then a threshold value. It works similar to an <code>if()</code> function. <code>step(threshold,valueToTest)</code> <code>If value &gt; threshold -&gt; return 1.0</code> <code>If value &lt; threshold -&gt; return 0.0</code></p>    See the Pen    step(uv.x) by levoxtrip (@levoxtrip)   on CodePen.  <p>We use <code>step()</code> to create hard edges between colors for example when we want to mix to colors based on a threshold value.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#smoothstep","title":"smoothstep()","text":"<p>To create a smoother transition between two values we can use <code>smoothstep()</code>. <code>smoothstep(edge1,edge2,value)</code> <code>if value &lt;edge1 -&gt; return 0.0</code> <code>if value &gt;edge2 -&gt; return 1.0</code> <code>if value &gt; edge1 and value &lt; edge2 interpolate between edge1 and edge2 value</code> Smoothstep linearly interpolates between the two edge values.</p> <p>If we combine two smoothstep functions with each other we can create a smoothline. Uncomment the second statement to see that.</p>    See the Pen    smoothstep by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#mix","title":"mix()","text":"<p>Another function to create a linear interpolation is the <code>mix()</code> function.</p> <pre><code>vec3 color1 = vec3(1.0,0.0,0.0);\nvec3 color2 = vec3(0.0,0.0,1.0);\nvec3 color = mix(color1,color2,uv.x);\n\nfor uv.x = 0.0 is the color of the pixel color1\nfor uv.x = 1.0 the color of the pixel color2\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#fract","title":"fract()","text":"<p>The GLSL <code>fract()</code> function takes a decimal number as input and returns the decimal part.</p> <pre><code>fract(3.3) = 0.3\nfract(1.5) = 0.5\n</code></pre> <p>So <code>fract()</code> wraps any number that goes above 1 back into the range 0.0 to 1.0 no matter how large the number is before applying it. This creates a repeating pattern because the values that fract() returns for the pixel coordinates of 0.2 , 1.2, 2.2 are the same. So you break the range of uv (0 to 1) into smaller sections, repeatedly, based on the value of x.</p> <p>mod() - modulo</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#clamping-limiting","title":"Clamping &amp; Limiting","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#clamp","title":"clamp()","text":"<p>With the <code>clamp()</code> function we can restrain a value into a desired range.</p> <pre><code>clamp(val,min,max)\nclamp(2.0,0.0,1.0) = 1.0\nclamp(-0.5,0.0,1.0) = 0.0\nclamp(0.5,0.0,1.0) = 0.5\nclamp(uv.x,0.0,0.2) = 0.2 for all uv.x values &gt; 0.2\n</code></pre> <p>Using <code>clamp()</code> to our pixelcoords creates a <code>hold las pixel value</code> effect.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#min","title":"min()","text":"<p>The <code>min(thresh,value)</code> compares similar to <code>step()</code> a theshold value and the input value. <code>If value &lt; thresh -&gt; return value</code> <code>If value &gt; threh -&gt; return thresh</code> The value gets limitted at the thresh value. So we can use the <code>min()</code> to garanty that certain values never go over a desired threshold value.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#max","title":"max()","text":"<p>The <code>max(thresh,value)</code> is the opposite of the <code>min()</code> function. <code>If value &lt; thresh -&gt; return threshold</code> <code>If value &gt; thresh -&gt; return value</code> With <code>max()</code> we assure that values never get lower then our threshold value</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#floor","title":"floor()","text":"<p>The <code>floor(value)</code> function rounds up to the next integer value if the value is smaller/equal to <code>value</code></p>    See the Pen    Fract(uv.x*multiple) by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#ceil","title":"ceil()","text":"<p>The <code>ceil(value)</code> function rounds up to the next integer value if the value is bigger/equal to <code>value</code></p> <p>sign() - returns -1, 0, or 1</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#sign","title":"sign()","text":"<p>The <code>sign(value)</code> returns the sign of the <code>value</code>. <code>if value &lt; 0 -&gt; return -1</code> <code>if value == 0 -&gt; return 0</code> <code>if value &gt; 0 -&gt; return 1</code></p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#vector-functions","title":"Vector Functions","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#length","title":"length()","text":"<p>The <code>length(value)</code> takes an input vector and calculate the length of the vector/ the distance between the vector and it's origin.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#colors","title":"Colors","text":"<p>In GLSL colors get represented in <code>vec3(r,g,b)</code>.</p> <p>To mix colors we can use the <code>mix(color1,color2,value)</code> function. This function linearly interpolates between the two colors.</p> <pre><code>if a = 0.0 -&gt; color1\nif a = 1.0 -&gt; color2\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#gradient","title":"Gradient","text":"<p>To draw a gradient between two colors we can use <code>mix()</code> functions and map the colors depending on an interpolation value. For the interpolation value can for example use the pixel position on the screen. <code>mix(color1,color2,st.x)</code></p>    See the Pen    Mixing Colors Gradient by levoxtrip (@levoxtrip)   on CodePen.  <p>By manipulation the uv we can define show the colors are distributed <code>float uvs = abs(sin(u_time))</code></p> <p>We also can assing a vec3 for the interpolation value and manipulate the single channels.</p> <pre><code>vec3 pct = vec3(st.x);\npcr.r = smoothstep(0.1,0.9,st.x);\npcr.g = smoothstep(sin(st.x)*2.0);\npcr.b = pow(st.x,0.5);\n\ncolor = mix(color1,color2,pcr);\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#inspiration-easing-functions","title":"Inspiration Easing Functions","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#shaping-functions","title":"Shaping Functions","text":"<p>By combining <code>step()</code> and <code>smoothstep()</code> with other mathematical functions we can draw shapes.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#circle","title":"Circle","text":"<p>To define a circle we need a <code>center</code> and a <code>radius</code>. Then we define the distance between the <code>center</code> of the circle and the position of the pixel. If the <code>distance</code> is bigger than the radius then the pixel is outside of the circle and the function should return 0. If the distance is smaller then the pixel is inside the circle and the function should return 1.</p> <p>We can calculate the distance with the <code>float distance = length(uv)</code> function. It calculates the length of the pixel vector from it's origin.</p> <p>A vector doesn't represent a position in space but how you get from pos1 to pos2.</p> <p></p> <p>This visualises the distance of the pixel to the center of the canvas.</p>    See the Pen    Drawing Circle by levoxtrip (@levoxtrip)   on CodePen.  <p>We now use a <code>step()</code> function to define if the distance of the pixelposition is bigger than the raidus or smaller.</p> <p><code>if pixelPositionDistance &lt; radius -&gt; inside return 1.0</code> <code>if pixelPositionDistance &gt; radius -&gt; outside return 0.0</code></p> <p><code>float circle = step(distance,radius);</code></p> <p>So as a function we have:</p> <pre><code>float circle(vec2 uv, float rad, vec2 center){\n  vec2 pos = uv-center;\n  float dist = length(pos);\n  float color = step(dist,rad);\n  return color;\n}\n</code></pre> <p>To be able to calculate how far the currently calculted pixel is away from the circle center we first have to subtract the center position from the current pixel position. This gives us the relative distance from the current pixel to the center.</p> <p></p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#soft-circle","title":"Soft Circle","text":"<p>With <code>smoothstep</code> we also can create a circle with softer edges.</p> <pre><code>foat softCircle(vec2 uv, float r, vec2 center, bool soften){\n  vec2 pos = uv-center;\n  float d = length(pos);\n  float edge = (soften) ? r*0.15 :0.0\n  return smoothstep(r-edge,r+edge,d);\n}\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#border-circle","title":"Border Circle","text":"<p>To create a circle with a border and without a filling we test if the pixel lays on the radius plus and minus the width of half the line.</p> <pre><code>float borderCircle(vec2 uv, float rad, float lineWidth, vec2 center){\n    vec2 pos = uv-center;\n    float d = length(pos);\n    float hLineWidth = lineWidth/2.0;\n    float c = step(rad-hLineWidth,d)-step(rad+hLineWidth,d);\n    return c;\n\n}\n</code></pre> <p>So we test if the distance of the pixel is bigger than <code>radius-halfLineWidth</code> and smaller than <code>radius+halfLineWidth</code>. </p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#smooth-border-circle","title":"Smooth border Circle","text":"<pre><code>float circle(vec2 pt, float r, vec2 center, float lineWidth,bool soften){\n    vec2 pos = pt -center;\n    float d = length(pos);\n    float edge = (soften) ? r*0.05 : 0.00;\n    float hlw = lineWidth*0.5;\n    float sh = smoothstep(r-hlw-edge,r-hlw,d)\n                - smoothstep(r+hlw,r+hlw+edge,d);\n\n    return sh;\n}\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#square","title":"Square","text":"<p>To draw a square we want to test if a pixel lies inside the outer edges of the rectangle or not.</p> <p>First we subtract the center coord from the current uv coords. The resulting pos coords. This gives us values where all values to the left and below the center are negative, while all values to the right and above the center are positive. A positive value for <code>pos.x</code> means taht the point is to the right of the center and negative value to the left.</p> <p>At the end we test with <code>step</code> whether the pixel is inside or outside the rectangle.</p>    See the Pen    drawing Rectangle by levoxtrip (@levoxtrip)   on CodePen.  <pre><code>float rect(vec2 uv, vec2 center, vec2 size){\n    vec2 pos = uv-center;\n    vec2 hSize = size*0.5;\n    float hr = step(-hSize.x,pos.x) - step(hSize.x,pos.x);\n    float vr = step(-hSize.y,pos.y) - step(hSize.y,pos.y);\n    return vr*hr;\n}\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#distance-fields","title":"Distance fields","text":"<p>We can think of distance fields like a height map - at every pixel we are calculating How far are we(the pixel that currently gets calculated) from something.</p> <p>In distance fields, for every pixel(<code>st/uv</code>) on the canvas we calculate how far that pixel is from one or more reference points or shapes.</p> <p>Then we use the distance value to decide what to draw.</p> <pre><code>//Calculate the distance from current pixel to point (0.5,0.5)\nfloat d = distance(st,vec2(0.5,0.5));\n//Draw a circle by checking if distance is less than 0.3\nfloat circle = step(d,0.3) // white if d&lt;0.3, black otherwise\n</code></pre> <p>By combining different distance functions we can create intresting graphics.</p> <p><code>s = distance(st,vec2(0.4))+distance(st,vec2(0.6));</code> So here we first calculate the distance from point (0.4,0.4) to all the pixels on the canvas and the distance from point(0.6,0.6) to all the pixels. We then add together the values from the single distance fields to a new pixel field. So when the points are close to each other the addition of the distance of the two points is gonna be a small value so they both gonna be darker. Because the distance to the pixel around the reference points are low and the points are close to each other so their addition creates a low value. If the points are further away you get higher values and the pixel colors are brighter because the distance from one reference point to the other is bigger so the addition of these are also bigger.</p> <p><code>s = distance(st,vec2(0.4))*distance(st,vec2(0.6));</code> Multiplying distances creates a different effect. Areas that are close to either point will result in a small value while areas far from both will have larger values. This create intersection pattern.</p> <p><code>s = max(distance(st,vec2(0.4),distance(st,0.6));</code> Here the <code>max()</code> function takes the larger value of the two distances. The result of the operation is a new distance field that represents the intersection/union of the two original distance fields because the maximum distance at any point will be the distance to the closest surface of either object.  </p> <p><code>s = min(distance(st,vec2(0.4)),distance(st,vec2(0.6)));</code> Here the <code>min()</code>function takes the smallest distance from both distances which leads to the union of the two shapes.</p> <p><code>pct = pow(distance(st,vec2(0.4)),distance(st,vec2(0.6)));</code></p> <p>For optimising the performance we also can create circular distance fields with the <code>dot()</code> function. The <code>dot()</code> function calculates the skalarproduct. <code>float pt = dot(st,st)*4.0</code></p> <p>With distance fields we can draw almost every shape we want. We start by scaling the value range of the x and y coordinates to the range of -1 and 1 <code>st = st*2.-1.</code>. This moves the base of the coordinate system from the lower left corner to the center of the canvas.</p> <p>After that we can create a distance field with the <code>length()</code> function to calculate the distance of the pixel to the center of the canvas.</p> <p>So if we for example do <code>d = length(st-0.3)</code> we move the base of the coord system by (0.3,0.3) or in other words we calculate the distance from every pixel on the screen to the position(0.3,0.3). This creats the dark circle around the position (0.3,0.3). </p> <p>By enclosing the current pixel position <code>st</code> with <code>abs()</code> we create a mirroring effect. Because we move the</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#mirroring-values","title":"Mirroring values","text":"<p>By scaling the canvas with <code>st = st*2.-1</code> we changed the pixel coords from 0-1 to -1 to 1 with 0,0 in the center. That means that we have the same absolute values left,right, up, down around the center. That allows us to mirror what we draw in between 0 -&gt; 1 to all 4 quadrants. For that we need to take the absolute value of the pixel coord with the <code>abs()</code> function.</p>    See the Pen    absValueCoords by levoxtrip (@levoxtrip)   on CodePen.  <p>If we then want to create a ripple effect we scale up the value range by <code>scale</code> and then we can use <code>fract</code> to set the pixel color to values between 0-1 and not to values bigger than 1.0. <code>fract()</code> only returns the decimal values so we get gradients from 0-1 the amount of <code>scale</code> times.</p> <p>By multiplying <code>d</code> with a <code>scale</code> value we scale the values of the pixelcoordinates.</p> <p></p> <pre><code>void main() {\n  vec2 uv = (gl_FragCoord.xy - (u_resolution.xy * 0.5)) / u_resolution.y;\n  vec3 color;\n  //Mirror values pixel coords\n  uv = abs(uv)-0.2;\n  float scale = 10.;\n  //calculate distance\n  float c = fract(length(uv)*scale);\n\n  color = vec3(c);\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p><code>min()</code> and <code>max()</code> functions allow us then to define in which areas we want to draw the distance field. For example only show the distance field outside the value range 0.0. Because we are calculating <code>-0.3</code> the values inside are smaller than 0.0 and get shown as black.</p> <pre><code>void main(){\n  vec2 uv = gl_FragCoordy.xy;\n  vec3 color;\n  uv = abs(uv)-0.2;\n  float scale = 4.0;\n  float d = length(max(abs(uv)-0.3,0.0));\n  color = vec3(d);\n  gl_fragColor = vec4(color,1.0);\n\n}\n</code></pre> <p>Only show the distance field between -0.3 and 0.0. <code>d= length(min(abs(uv)-0.3,0.0))</code></p> <p>After that we can use <code>step()</code>or <code>smoothstep()</code> to decide how the distance field is gonna be drawn. If you want do draw outlines you can multiply/substract two step functions.</p>    See the Pen    Outlined Distancefield by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#polar-forms","title":"Polar-forms","text":"<p>Another way to draw shapes is to use polar-coordinates instead of cartesian coordinates. For that we need to convert the coordinate system by calculating the current pixel color with the radius and the angle of every coordinate/pixel.</p>    See the Pen    Polarshape - Cosine by levoxtrip (@levoxtrip)   on CodePen.  <p>To draw different shapes we use shape-giving functions from above to manipulate the radius of a circle in relation it's angles.</p> <p>So with the form giving functions we change the radius of a circle in relation to every angle.</p> <p>So the angle gives the direction from the center to the pixel position.</p> <p>To visualize it we can fold the coordinate system to a line.  </p> <p>To draw the shape we test if the distance of the currently calculated pixel at the angle is bigger or smaller than the radius at that position.</p> <p>More information for the calculation here</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#squared-shapes","title":"Squared Shapes","text":"<p>As we have seen above the <code>abs()</code> function converts negative numbers into positive. In our case it mirrors the values around the center (0.0,0.0) and we get a symmetric image from the origin because we get for the coordinates left, right,top,bottom, the same color values back. </p> <p>With the <code>max()</code> function we can return the bigger value from two input values. This creates squared distance fields. This field returns the value of the distance of the currently calculated pixel to the next point on the next edge of a square.</p> <p></p>    See the Pen    Squared Polar Distance field by levoxtrip (@levoxtrip)   on CodePen.  <p>With <code>step(d,0.2)</code> we then can draw a filled rectangle. By subtracting two step functions we also can create a border effect. <code>float c = step(d,0.2)-step(d,0.18)</code> or <code>float c = step(0.5,d)*step(d,0.4)</code></p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#squared-shape-with-rounded-corners","title":"Squared Shape with rounded corners","text":"<p>To draw a square with rounded corners we first mirror the pixel position values with <code>abs()</code> of <code>uv</code>. To create the area inside of the square we subtract a value like 0.2 from <code>abs(pos)</code> so all the values inside the square are smaller than 0.0. The area in which the values are 0.0 is therefore increased by the value that is subtracted from abs.</p> <p></p> <pre><code>//Example calculation\nfor pos = (0.2,0.2)\npos.x = 0.2 - 0.2 = 0.0\npos.y = 0.2 - 0.2 = 0.0\n</code></pre> <p>After that we take the <code>max()</code> value of <code>uv</code> and 0.0 and calculate the length of it.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#draw-a-line","title":"Draw a line","text":"<p>To draw a line we want to create a calculation that returns 1.0 when the pixel is on the line and 0.0 when the pixel is not. The pixel is on the line if the pixel position is between <code>pos-lineWidth</code> and <code>pos+lineWidth</code>. To create a smoother line we use a <code>smoothstep()</code> function and add <code>edgeThickness</code></p> <pre><code>float line(float pt1, float pt2, float lineWidth, float edgeThickness){\n    float hlw = lineWidth*0.5;\n    return smoothstep(pt1-hlw-eT,pt1-hlw,pt2)-smoothstep(pt1+hlw,pt1+hlw+eT,pt2);\n    }\n</code></pre> <p></p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#drawing-a-line-that-rotate-around-the-center","title":"Drawing a line that rotate around the center","text":"<p>Again we want to test if the input pixel is laying on the line that is rotating.</p> <p>So first we calculate the distance from the input pixel to the center. <code>vec2 d = pt-center</code></p> <p>Then we calculate the angle.</p> <p><code>float theta = u_time*2.0</code> we use <code>u_time</code> so the line rotates. We also can use a specific angle.</p> <p>Next we create a second vector <code>p</code> which represents a point on the edge of a circle or the vector that points from the center to the edge of a circle.</p> <p><code>vec2 p = vec2(cos(theta),-sin(theta))*radius;</code> <code>cos(theta)</code> gives us the x component and <code>sin(theta)</code> the y component of a unit vector.  We also use <code>-sin(theta)</code> to adapt the orientation of the coordinate system so the rotation gets reversed. With <code>sin(theta)</code> the vector rotates counter clockwise. So <code>p</code> represents the direction of the rotating line.</p> <p>Example Angle;</p> <p></p> <p>The next step is to find out if testpoint <code>d</code> is on the line or not. For that we need to find the distance from <code>p</code> to <code>d</code>. So we want the point on the line that is closest to point <code>d</code> - the point that has the smallest distance to <code>d</code> So we need to find the length of the line <code>p</code> to <code>d</code>. For that we want to find the point that is closes to <code>d</code> that is on the line.</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#drawing-a-polygone","title":"Drawing a polygone","text":"<p>Useful tools to draw a polygone are Nik lever Math tools</p> <p>To draw a polygone we need to:</p> <ul> <li>Calculate the angle of the currently processed pixel relative to the center of the shape.</li> <li>Define to which side the point belongs by defining in which subtriangle the point lies.</li> <li>Calculate the distance of the point to the next closes edge.</li> <li>Manipulate the distance with (cos)</li> <li>Does the currenly processed pixel lies inside the or not.</li> </ul> <p> Move point to the center <code>pt = pt - center;</code></p> <p>Calculate the angle of the current pixel <code>float currPixelAngle = atan(pt.y,pt.x);</code></p> <p>Calculate angle size of each subtriangle <code>float segmentAngle = 2.0 * PI / float(sides)</code>;</p> <p>  We devide the polygon into subtriangles and fokus on the single triangle. Find the subtriangle in which the currently calculated point lies.</p> <p>With <code>currPixelAngle/segmentAngle</code> we try to find the subtriangle. By adding 0.5 and rouding this value down with <code>floor()</code> we create a modulo value.</p> <pre><code>130/120 = 1.083\n1.083 +0.5 = 1.583\nfloor(1.583) = 1\n\nif currPixelAngle &lt; segmentAngle -&gt; first subtriangle\nif currPixelAngle &gt; segmentAngle &amp;&amp; currPixelAngle &lt; 2*segmentAngle -&gt; second subtriangle\n...\n</code></pre> <p>So we get the index of the subtriangle.</p> <p><code>float baseAngleSegment = floor(0.5 + currPixelAngle/segmentAngle) * segmentAngle;</code></p> <p>Manipulate the distance so it's not just a circle but it expands into cornes <code>float distance = cos(baseAngle-angle) * length(pt);</code></p> <p>Test if currently calculated pixel lies inside or not <code>return distance &lt; radius ? 1.0 :0.0</code></p>    See the Pen    Untitled by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/03_AlgorithmicDrawing/#combine-elements","title":"Combine elements","text":"<p>To combine elements we can add the color of an element to the already existing color value that we gonna return at the end.</p> <pre><code>vec3 color = vec3(0.0);\ncolor += vec3(1.0,0.0,0.3)*rect(...);\ncolor += vec3(0.5,0.8,1.0)*rect(...);\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/04_Transformations/","title":"Transformations","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/04_Transformations/#moving-shapes-2d-matrix","title":"Moving shapes / 2D Matrix","text":"<p>To move a shape on the canvas the trick is to translate the coordinate system underneath the shape.</p> <p></p> <p>To achieve that we add/subtract values to the <code>uv</code> variable.</p>    See the Pen    GLSL - Moving Shape by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/04_Transformations/#rotating-shapes","title":"Rotating Shapes","text":"<p>To rotate a shape around itself we need a <code>2D rotation matrix</code>.</p> <p>It rotates the coordinate system around the point (0,0) and if we apply the rotation to the <code>uv</code> the whole canvas gets rotated.</p> <pre><code>mat2 rotate2D(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    return mat2(c,-s,s,c);\n}\n\n//directly in the return\nmat2 rotate2D(float theta){\n    return mat2(cos(theta),-sin(theta),sin(theta),cos(theta))\n}\n\n[c -s]\n[s  c]\n</code></pre> <p></p> <p> </p> <p>Is the the center of the shape on (0,0) does appear to rotate around itself. But if the shape has its center somewhere else the shape is rotation relative to (0,0).</p> <p>To fix that and let the shape always rotate around its own center no matter where the shape is we have to move the shape from its center to 0.0, execute the rotation, and then move it back to its center.</p> <p></p>    See the Pen    GLSL-RotatingShapes by levoxtrip (@levoxtrip)   on CodePen.  <p>To change the anchor of the rotation we would have to change the center value by manipulating the <code>pos</code> inside the shape function.</p> <pre><code>vec2 pos = pt-center\npos -= vec2(radius,0);//this is gonna be the new center of the shape\n</code></pre>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/04_Transformations/#scaling-shapes","title":"Scaling Shapes","text":"<p>As for Rotation we also need a 2D Matrix for scaling our canvas. </p> <pre><code>mat2 scaleEqual2D(float scale){\n  return mat2(scale.x,0,0,scale.y);\n}\nmat2 scaleIndiv2D(vec2 scale){\n  return mat2(scale.x,0.0,0.0,scale.y);\n}\n\n[scale.x  0]\n[0  scale.y]\n\nvoid main(){\n  ...\n\nuv-= vec2(0.5)\nuv *= scaleIndiv2D(vec2(0.2,0.5));\nuv+= vec2(0.5);\n}\n</code></pre> <p>If the scale value is bigger than 1.0 the shape gets smaller because the value range of the canvas gets bigger and the area in which the pixel are inside the shapes gets smaller.</p> <p></p> <p>If we combine rotation and scaling matrixes the order of transformation plays an important role</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/05_Patterns/","title":"Pattern","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/05_Patterns/#tiling","title":"Tiling","text":"<p>When we scale a coordinate system by a value &gt; 1.0, e.g. 3.0, the value range of the canvas gets scaled from 0.0-1.0 to 0.0-3.0.</p> <pre><code>0.0-1.0\n1.0-2.0\n2.0-3.0\n</code></pre> <p>To create a tiling effect we first want to scale up our canvas and then return the same values for every decimal value between 0.0 and 0.-x.0.</p> <p>As we have seen before with the fract function we always can return the same decimal value</p> <pre><code>fract(0.2) = 0.2\nfract(3.2) = 0.2\nfract(400.2) = 0.2\n</code></pre> <p></p> <p>Because the function for our shape expects values from 0.0-1.0 and we create multiple times values between 0.-1. the shape gets drawn multiple times on the canvas because the values for 0-1 are multiple times true for the shape function.</p> <pre><code>//By multiplying a pixel position with the amount of tiles and then returning just the `fract()` part of it we get 4 times 0-1 values.\n\nfloat tileCount = 4.0;\nuv = fract(uv*tilecount);\nfloat sh = shape(uv)\n</code></pre>    See the Pen    25-03-21-RescaleMadness by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/05_Patterns/#applying-matrices-inside-of-patterns-and-tiles","title":"Applying Matrices inside of Patterns and Tiles","text":"<p>To apply the transformations on the elements in the tile we first can type the canvas and the simply apply the transformations</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/05_Patterns/#displaced-tiles","title":"Displaced Tiles","text":"<p>If you want different behavior in different columns and rows of your grid we have to find out if the current pixel lies in an even or uneven column/row number.  For that we can use <code>y=mod(x,2.0)</code> and see if the result of it is smaller than 1.0; To define which value we gonna return if the value is bigger we can use a ternary operator <code>y = mod(x,2.0)&lt; 1.0 ? 0.0 : 1.0;</code> \"If number &lt;1.0 then return 0.0 else 1.0\" In GLSL it is more performant when we use a <code>step()</code>function for that. <code>y = step(1.0,mod(x,2.0));</code></p> <p>For even column/row numbers this function returns 0 and for uneven it returns 1.0. We can use these values to multiply them with a displacement value.</p> <pre><code>//multiply uvs with scaling value\nuv *= 4.0\n//displace pixels which are on uneven rows\nuv.x+= step(1.0,mod(st.y,2.0))*0.5;\n</code></pre> <pre><code>float brickTile(vec2 _uv, float num){\n  _st*=num;\n  _st.x += step(1.0,mod(st.y,2.0))*0.5;\n  return fract(_st);\n}\n</code></pre> <p>We can create the same effect of <code>mod()</code> with a <code>fract()</code> function.</p> <pre><code>//Displace uvs according to row\nif(fract(uv.y)&lt;0.5){\n  uv.x += 0.25;\n} else {\n  uv.x -= 0.25;\n}\n</code></pre> <p>or we can move them left or right depending on the row.</p> <pre><code>if(fract(uv.y)&lt;0.5){\n  uv.x += fract(u_time);\n} else {\n  uv.x += fract(u_time);\n}\n</code></pre> <pre><code>float myTime = u_time*speed;\n\nif(fract(myTime)&gt; 0.5)//If half of the time is passed\n{\nif(fract(_st.y*0.5)&gt;0.5){//Check if even or uneven row\n    _st.x += fract(time)*2.0;\n    }else {\n    _st.x -= fract(time)*2.0;\n    }\n} else {\n    if(fract(_st.x*0.5)&gt;0.5){\n    _st.y += fract(time)*2.0;\n    } else {\n    _st.y -= fract(time)*2.0;\n    }\n}\nreturn fract(_st);\n</code></pre>    See the Pen    GLSL - MovingTiles by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/05_Patterns/#truchet-tiles","title":"Truchet Tiles","text":"<p>We can create Truchet Tiles by splitting up the space into four tiles and then rotate a shape depending on in which tile it lies. To determine in which quadrant of a 2x2 grid the currently calculated pixel lies we create an index value 0-3 based on the cells position.</p> <pre><code>st *= 2.0;\n//return 1.0 if x-coord is in the right half and 0.0 if in the left\nindex +=step(1.0,mod(_st.x,2.0));\n//returns 1.0 if the y-coordinate is in the top-half and 0.0 in the bottom half\nindex +=step(1.0,mod(_st.y,2.0))*2.0;\n</code></pre> <p>The <code>y-component</code> is multiplied by 2.0 so it contributes ether 0 or 2 to the index.</p> <pre><code>     |\n 2   |   3\n     |\n--------------\n     |\n 0   |   1\n     |\nIndex 0: bottom-left cell (x &lt; 1.0, y &lt; 1.0)\nIndex 1: bottom-right cell (x &gt;= 1.0, y &lt; 1.0)\nIndex 2: top-left cell (x &lt; 1.0, y &gt;= 1.0)\nIndex 3: top-right cell (x &gt;= 1.0, y &gt;= 1.0)\n</code></pre> <pre><code>vec2 rotateTilePattern(vec2 _st){\n  //Scale coord system to 2x2\n  _st * 2.0;\n\n  // create index\n  float index = 0.0;\n  //return 1.0 if x-coord is in the right half and 0.0 if in the left\n  index += step(1.0,mod(st.x,2.0));\n  //returns 1.0 if the y-coordinate is in the top-half and 0.0 in the bottom half\n  index += step(1.0,mod(st.y,2.0))*2.0;\n\n  //scale every cell to 0-1\n  _st = fract(_st);\n\n  //rotations depending on the index\n\n  if(index == 1.0){\n    _st = rotate2D(_st,PI*0.5);\n  } else if (index ==2.0){\n    _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n      _st = rotate2D(_st,PI);\n    }\n\n  return _st;\n}\n</code></pre>    See the Pen    Tiling Canvas by levoxtrip (@levoxtrip)   on CodePen.  <p>Another way to create repeating pattern is to split the coordinates into integer and fractional parts <code>vec2 fpos = fract(st)</code> // position within the cell (always between 0.0 - 1.0) <code>vec2 ipos = floor(st)</code> // whole number part of coordinate telling you which cell you are in This allows us to gread grid based patters while maintaining local coordinates within each grid cell.</p>    See the Pen    GridCanvas - Ipos fpos by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/06_RandomNoise/","title":"Random","text":"","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/06_RandomNoise/#one-dimensional-random","title":"One dimensional random","text":"<p>We can create pseudo random numbers in GLSL by taking the <code>fract()</code> part of a <code>sin()</code> value and then scale it with a big number.</p>    See the Pen    RandomNumber by levoxtrip (@levoxtrip)   on CodePen.  <p>We can manipulate the distribution of the random values by - multiplying it with itself <pre><code>float ran = fract(sin(uv.x)*10000.);\n\n//Values lie more towards y = 0 \nfloat y2 = ran *ran;\n\n//Values lie more towards y = 1\nfloat y3 = sqrt(ran);\n</code></pre> <pre><code>float random(vec2 st){\nreturn fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid main(){\nvec2 st = gl_FragCoord.xy/u_resolution.xy;\n\nfloat c = random(st);\n\ngl_FragColor = vec4(vec3(c),1.0);\n}\n</code></pre> We also can add a seed value to the random <pre><code>float random(vec2 st, float seed){\n    const float a = 12.9898;\n    cosnt float b = 78.233;\n    const float c = 43758.543123;\n    return fract(sin(dot(st,vec2(a,b))+seed)*c);\n</code></pre></p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/06_RandomNoise/#two-dimensional-random","title":"Two dimensional random","text":"<p>To distribute random values over two dimension we have to convert a two dimensional vector of for example the pixel position into a one dimensional value. We can use the <code>dot()</code> function for that.  The <code>dot()</code> function returns float number between 0.0 and 1.0, depending on how  two vectors that build the skalar product are positioned to each other.</p>    See the Pen    2D Random by levoxtrip (@levoxtrip)   on CodePen.  <p>We can use random to draw different shapes or colors for each tile in a grid canvas. <pre><code>float random(vec2 st){\n  return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.545312);\n}\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy /u_resolution.xy;\n  //scale up the canvas\n  st*=10.0;\n  vec2 ipos = floor(st);//int values of scaled canvas\n  vec2 fpos = fract(st);//decimal values of scaled canvas\n\n  vec3 c = vec3(random(ipos));\n  vec3 c1 = vec3(random(fpos));\n  gl_FragColor = vec4(ipos,fpos,0.0,1.0);\n\n}\n</code></pre></p>    See the Pen    RandomGridTiles by levoxtrip (@levoxtrip)   on CodePen.  <p>By isolating the integer part of the coordinates we get the same value for all the Pixels that lie inside a grid tile. We then use this value to create the random value for the whole tile.</p> <p>The <code>fpos</code> allows us then to position what we want to draw properly.</p> <p>This allows use to create even more sophisticated pattern and grids.</p>    See the Pen    GLSL - TruchetTiles by levoxtrip (@levoxtrip)   on CodePen.","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/06_RandomNoise/#random-series-generator","title":"Random Series Generator","text":"<p>We can use the <code>random()</code> function to create a random series that defines if something gets shown or not</p> <pre><code>float random(float x){\n  return fract(sin(x)*1e4);\n}\n\nfloat random(vec2 uv){\n  return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat ranSerie(float x,float freq,float time){\n  //This creates series of random binary(0-1) values that changes depending on space and time\n  float divXSegments = floor(x*freq);\n  float timeChanges = floor(t);\n  return step(0.8,random(divXSegments-timeChanges));\n}\n\nvoid main(){\n  vec2 uv = gl_FragCoord.xy/u_resolution.xy;\n  uv.x *= u_resolution.x/u_resolution.y;\n\n  vec3 color = vec3(0.0);\n  float cols = 3.0;\n  float freq = random(floor(u_time))+abs(atan(u_time)*0.1);\n  float t = 60.+u_time*(1.0-freq)*30.0;\n\n  //create different frequencies for each band\n  if(fract(uv.y*cols*0.5) &lt;0.5){\n    t*= -3.0;\n  }\n  freq += random(floor(uv.y));\n\n  //color + offset\n  float offset = 0.025;\n  color = vec3(randomSerie(uv.x,freq*100.0,t+offset),\n          randomSerie(uv.x,freq*100.0,t),\n          randomSerie(uv.x,freq*100.0,t-offset));\n  gl_FragColor = vec4(1.0 - color,1.0);\n}\n</code></pre>    See the Pen    RandomSerie by levoxtrip (@levoxtrip)   on CodePen.  <p>https://thebookofshaders.com/edit.php#10/ikeda-03.frag</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution; \nuniform vec2 u_mouse;  \nuniform float u_time;  \n\nfloat random (in float x) {\n    return fract(sin(x)*1e4);  // 1e4 is 10000\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// This function creates the visual pattern\nfloat pattern(vec2 st, vec2 v, float threshold) {\n    // Add the velocity to the position and round down to create grid cells\n    vec2 p = floor(st+v);\n\n    // Generate pattern using random numbers and a threshold\n    // The 100.+ is an arbitrary offset to avoid patterns at origin\n    // The tiny multiplier .000001 creates subtle variations\n    // The random(p.x)*0.5 adds horizontal variation\n    return step(threshold, random(100.+p*.000001)+random(p.x)*0.5 );\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    vec2 grid = vec2(100.0,50.);\n    st *= grid;\n\n    vec2 ipos = floor(st);  // Which grid cell we're in\n    vec2 fpos = fract(st);  // Position within the cell (0.0-1.0)\n\n    // Create base velocity that increases with time\n    // max(grid.x,grid.y) makes sure it scales with grid size\n    vec2 vel = vec2(u_time*2.*max(grid.x,grid.y)); \n\n    // Modify velocity based on row (y position):\n    // - vec2(-1.,0.0) makes it move horizontally left\n    // - random(1.0+ipos.y) gives each row a different random speed\n    vel *= vec2(-1.,0.0) * random(1.0+ipos.y);\n\n    // Create a slight horizontal offset for color channels (chromatic aberration)\n    vec2 offset = vec2(0.1,0.);\n\n    // Start with black color\n    vec3 color = vec3(0.);\n\n    // Calculate each color channel with different offsets\n    // The mouse x-position affects the threshold (density of points)\n    color.r = pattern(st+offset, vel, 0.5+u_mouse.x/u_resolution.x);  // Red (shifted right)\n    color.g = pattern(st, vel, 0.5+u_mouse.x/u_resolution.x);         // Green (centered)\n    color.b = pattern(st-offset, vel, 0.5+u_mouse.x/u_resolution.x);  // Blue (shifted left)\n\n    // Create margins between rows (when y position &lt; 0.1 in cell, make it black)\n    color *= step(0.1, fpos.y);\n\n    gl_FragColor = vec4(1.0-color, 1.0);\n}\n</code></pre>    See the Pen    RandomSerie - ikeda by levoxtrip (@levoxtrip)   on CodePen.  <p>https://thebookofshaders.com/edit.php#10/ikeda-04.frag</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/06_RandomNoise/#noise","title":"Noise","text":"<p>Perlin noise collection https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83</p>","tags":["Shader/Fragment","GLSL","Math"]},{"location":"topics/Shader/FRAGMENT/DataMosh/","title":"Datamosh","text":"<p>Datamosh effects base on an issue between different types of frames in compressed videos. Because not all frames are actually full frames of data.</p> <p>Many compression algorithms try to hold amount of data that has changed since the last frame. Thats why compressing grainy textures or textures with a lot of noise is hard to compress to small sizes.</p> <p>So a video has different kind of frames for different amount of information.</p> <p>Get/create set of motion vectors for movement in the entire image</p> <p>optical flow operator</p> <p>Displace our colour original image sampling uv position</p> <p>inside glsl</p> <p>Find a way to recycle the pixels on screen/ don't clear screen every frame</p> <p>feedback</p> <p>Add mechanism to blend between unrpocessd and processed pixels</p> <p>Quantizie the sampling block of our movement vector to creat a blocky effect</p> <p>Add some noise per block</p>","tags":["Shader/Fragment","GLSL"]},{"location":"topics/Shader/FRAGMENT/ownReflections/","title":"Own reflections","text":"<p>Multiplying a color with a value makes the color brighter or darker.</p> <p>Adding a color with a value makes the color brighter.</p> <p>Subtracting a color with a value makes the color darker.</p> <p><code>fract(u_time)</code> gives back a values that moves from 0.0 -&gt; 1.0 and starts again at 0.0</p> <p>To specify to which value it modulates you can use <code>float m = mod(u_time,.5)</code>.</p>"},{"location":"topics/Shader/FRAGMENT/ownReflections/#mirror-effect","title":"Mirror effect","text":"<p>If you move the <code>uv</code> by <code>0.5</code> into the center and then use <code>abs()</code> you can create a kaleido/mirror effect.</p> <pre><code>vec2 uv = gl_FragCoord.xy/u_resolution;\nuv -= vec2(0.5);\nuv = abs(uv)\n</code></pre>"},{"location":"topics/Shader/FRAGMENT/ownReflections/#invert-colorsvalues","title":"Invert colors/values","text":"<p>If you want to invert the colors that you have you can substract your color/value from 1.0 <code>float invertValue = 1.0 - value</code> <code>vec3 invColor = vec3(1.0) - color</code></p> <p>If you want to test if a value is smaller than a threshold value you can subtract the value from 1.0</p> <pre><code>val = step(0.2,0.5) returns 1.0 -&gt; true\n1.0 - val = 0 -&gt; false\n\nval2 = step(0.8,0.5) = 0 -&gt; false\n1.0 - val = 1 -&gt; true\n</code></pre>"},{"location":"topics/Shader/FRAGMENT/ownReflections/#coloring","title":"Coloring","text":"<p>To color you can for example calculate the distance field or the shaper and then just multiply it with a color <code>vec3</code> or use <code>mix(color1,color2, shape)</code></p>"},{"location":"topics/Shader/FRAGMENT/ownReflections/#abs-function","title":"Abs Function","text":"<p>Using abs on coordinates creates symmetry around axes when we moved the canvas coord system to the center.</p>"},{"location":"topics/Shader/FRAGMENT/ownReflections/#subtracting","title":"Subtracting","text":"<p>We can create interesting shapes if we take a box as the base and then subtract other boxes from that shape</p>"},{"location":"topics/Shader/VERTEX/Basics/","title":"Vertex Shader","text":"<p>The vertex shader job is to position each vertex of the geometry on the 2d render space by  converting the 3D vertex coordinates into 2d coordinates.</p> <p>In the vertex shader we get the build-in variable <code>gl_Position</code>. It contains the position of the vertex on the screen and get's passed to the fragment shader later.</p> <p>So the goal in the vertex shader is to assign the desired values to <code>gl_Position</code>.</p> <p><pre><code>void main(){\n    gl_Position = porjectionMatrix * viewMatrix * modelMatrix * vec4(position,1.0);\n    //moving now x/y value would move the projected plane on a 2D space\n    gl_Position.x = 0.5;\n    gl_position.y = 0.5;\n}\n</code></pre> Moving just x and y just moves the already projected geometry on the x and y dimension. It is like moving an already made photo on a desk. The perspective inside of the photo doesn't get changed.</p> <p><code>gl_Position</code> is a vec4 because it's coordinates are in clip space which needs 4 dimensions. Clip space  goes in all 3 directions <code>x,y,z</code> within a <code>-1 to 1</code>  range. Clip space works similar to positioning objects inside a box. Everything that lies outsides of the boxes dimension get's clipped/cut off The forth value <code>w</code> is for the perspective.</p> <p><pre><code>//vertex position\nattribute vec3 position;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\nvoid main(){\n    gl_Position = porjectionMatrix * viewMatrix * modelMatrix * vec4(position,1.0);\n}\n</code></pre> <code>position</code> - Position of the vertex <code>modelMatrix</code> - Applies all transformations relative to the <code>Mesh</code> - <code>modelMatrix</code>contains all the transformations like scale,rotate,translate <code>viewMatrix</code> - Applies all camera transformations - If the camera is closer to the geometry some vertices should be bigger. <code>projectionMatrix</code> - transforms coordinates into final clip space coordinates.</p> <p>To apply the matrices we multiply them.</p> <p>More infos here</p> <p>GLSL also provides a shorter version where <code>modelMatrix</code> and <code>viewMatrix</code> are combined in <code>modelViewMatrix</code> <pre><code>attribute vec3 position;\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\nvoid main(){\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n</code></pre></p> <p>But by splitting up the code we also have more power to manipulate the code <pre><code>attribute vec3 position;\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\n\nvoid main(){\n    vec4 modelPosition = modelMatrix * vec4(position,1.0);\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n}\n</code></pre></p> <p>For example can we displace the model position by sin <pre><code>...\nvec4 modelPosition = modelMatrix * vec4(position,1.0);\nmodelPosition.z += sin(modelPosition.x * 10.0) * 0.1;\n...\n</code></pre></p>","tags":["Shader/Vertex","GLSL"]},{"location":"topics/SwiftUI/InvertColorDatePicker/","title":"Set the color of date picker to white","text":"<p>To set the color of the datepicker to white you can use <code>.invertColors</code></p>","tags":["SwiftUI"]},{"location":"topics/SwiftUI/ProblemFixing/","title":"Problems","text":"","tags":["SwiftUI"]},{"location":"topics/SwiftUI/ProblemFixing/#white-screen-on-beginning","title":"White Screen on beginning","text":"<p>It is possible that you have to delete the app because it has problems with the app storage</p>","tags":["SwiftUI"]},{"location":"topics/Terminal/","title":"Terminal","text":""},{"location":"topics/Terminal/#latest-added","title":"Latest added","text":"<p>Terminal commands</p>"},{"location":"topics/Terminal/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Terminal/ConvertAllmp3ToWavFFMPeg.md/","title":"Convert all mp3 into wav with ffmpeg","text":"<p>Navigate with your terminal to the folder where you have all the mp3s. Then insert this code.</p> <p><code>Get-ChildItem -Filter *.mp3 | ForEach-Object { ffmpeg -i $_.FullName \"$($_.BaseName).wav\" }</code></p>","tags":["Terminal"]},{"location":"topics/Terminal/TerminalCommands/","title":"Terminal commands","text":"<p><code>mkdir</code> Create folder</p> <p><code>cd</code> move between directories</p> <p><code>ls</code> list files in current folder</p> <p><code>explorer .</code> open folder</p>","tags":["Terminal"]},{"location":"topics/TouchDesigner/TouchDesigner/","title":"TouchDesigner","text":""},{"location":"topics/TouchDesigner/TouchDesigner/#topics","title":"Topics","text":"<p>TOPs <code>TOPs</code> are 2D texture operators </p> <p>SOPs <code>SOPs</code> are 3D surface operators - they need to be converted into rendered pixels with <code>RenderTOP</code></p> <p>POPs <code>POPs</code> are point operators that get processed by your GPU.</p> <p>CHOPs <code>CHOPs</code> are channel operators like audio data</p> <p>COMPs <code>COMPs</code> contain other operators and nodes</p> <p>DATs <code>DATs</code> handle Table Data or Python Code</p> <p>MATs <code>MATs</code> are materials for 3D objects</p> <p>Quick Tips</p> <p>Scripting</p> <p>Techniques</p> <p>Texture Gallery</p>"},{"location":"topics/TouchDesigner/TouchDesigner/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/CHOPS/","title":"CHOPs","text":"<p>Welcome in CHOP Land!</p>"},{"location":"topics/TouchDesigner/CHOPS/#last-added","title":"Last added","text":"<p>Toggle Value Via Keyboard</p> <p>Create Infinite Looping Noise Channel With SOP</p> <p>Define Looping Behavior of Channel at Boundaries</p> <p>Flip Channels Path</p> <p>Reduce amount channels but keep shape</p> <p>Replicate Sample At End and Beginning</p> <p>Animate through Pattern</p> <p>Only Effect Certain Channels in MathCHOP</p> <p>Tipps and Tricks</p> <p>Creating Stepped Noise</p> <p>Combining Channels in MathCHOP</p> <p>Keep Channel Count Stable with ReplaceCHOP</p> <p>Delete Samples at Beginning or End of CHOP</p> <p>Add Channels after each other into a Sequenz</p> <p>Iterate through Channels of ConstantChop via Script</p> <p>Resample Audio To SOP length</p> <p>Keep Channel Count Stable</p> <p>Map CHOP Values to New Interval</p> <p>Full Image TOP to CHOP</p> <p>Get Specific Sample From CHOP</p> <p>Offset Single Channel in CHOP</p> <p>Trigger Single Sound</p> <p>Manipulate CHOP Values with ExpressionCHOP</p> <p>Measure Change Of Value</p> <p>Hold last changed Value</p> <p>Stretch CHOP to numSamples</p> <p>Map CHOP to SOP Length</p> <p>Animate through graph of datapoints </p>"},{"location":"topics/TouchDesigner/CHOPS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/CHOPS/AddChannelsIntoSequenz/","title":"AddChannelsIntoSequenz","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AddChannelsIntoSequenz/#add-channels-after-each-other-into-a-sequence","title":"Add Channels after each other into a Sequence","text":"<p>If you have multiple channels that you want to line up after each other into on Sequence we can use the <code>ShuffleCHOP</code> where we set the Method to <code>Sequence Channels by Name</code> which will combine the channels into <code>chan1-chan2-chan3-chan4-chan5...</code>.</p> <p>Download</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AnimatePatternCHOP/","title":"AnimatePatternCHOP","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AnimatePatternCHOP/#animate-through-patternchop","title":"Animate Through PatternCHOP","text":"<p>To animate through a pattern of a <code>PatternCHOP</code> we can use a Ramp in an <code>LFOCHOP</code> and connect it with the pattern in a <code>LookupCHOP</code>.</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AnimateThroughDataPoints/","title":"AnimateThroughDataPoints","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AnimateThroughDataPoints/#animate-through-graphs-of-data-points","title":"Animate Through Graphs of Data Points","text":"<p>Animating through graphs of datapoints in TouchDesigner allows us to visualize complex data in a dynamic and interactive way, helping to uncover patterns, trends, and insights that static representations may not reveal. Steps to follow: - Add Table data and convert to CHOP Data:</p> <p></p> <ul> <li>Add <code>ConstantCHOP</code> and <code>SpeedCHOP</code> to control how was to go through Data.</li> </ul> <p></p> <ul> <li>Connect <code>SpeedCHOP</code> to <code>LookupCHOP</code> and limit speed to loop through data</li> </ul> <p></p> <p>DownloadFile</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AttackDecaySustainRelease/","title":"AttackDecaySustainRelease","text":"","tags":["TD/CHOPS","TD/Signal","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AttackDecaySustainRelease/#attack-decay-sustain-release-envelope-signal","title":"Attack Decay Sustain Release Envelope Signal","text":"<p>If you want to create and control a signal that is similar to a ADSR Envelope you can use the <code>TriggerCHOP</code>.</p>","tags":["TD/CHOPS","TD/Signal","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AudioInputIntoScalingValue/","title":"AudioInputIntoScalingValue","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/AudioInputIntoScalingValue/#audio-input-into-scaling-value","title":"Audio Input into scaling value","text":"<p>If you want to convert a Audio Input into a value to scale objects or certain elements we can connect <code>AudioFileInputCHOP</code> with <code>ResampleCHOP</code> and then you probably want to add a <code>LagCHOP</code> to make it smoother.</p> <p>Download File</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CombingChannelsPatternCHOP/","title":"CombingChannelsPatternCHOP","text":"","tags":["TD/CHOPS","TD/PATTERN","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CombingChannelsPatternCHOP/#combining-channels-in-patternchop","title":"Combining Channels in PatternCHOP","text":"<p>A <code>PatternCHOP</code> has an input for a <code>Source Input</code> which we can use to combine a Pattern with the input data. For that we can decide under the <code>Channel</code> tab how we want to combine the input with the Pattern. </p> <p>For example can we displace the points of a grid with this technique. Displace Grid with PatternCHOP</p>","tags":["TD/CHOPS","TD/PATTERN","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CombiningChannelsMathCHOP/","title":"CombiningChannelsMathCHOP","text":"","tags":["TD/CHOPS","TD/Signal","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CombiningChannelsMathCHOP/#combining-channels-with-mathchop","title":"Combining Channels with MathCHOP","text":"<p>The <code>MathCHOP</code> allows you to combine CHOP Data in different ways. </p> <p>If you want to combine for example two channels from one CHOP into just one channel you can plug the CHOP into a <code>MathCHOP</code> and select <code>Combine Channels</code>. There you can decide how you want to combine the two channels with each other.j</p> <p>If you want to combine channels from to CHOPs and into one you plug them both into the <code>MathCHOP</code> and select <code>Combine CHOPs</code>.</p> <p></p> <p>These operations can also get excecuted together by plugging multiple inputs with multiple channels into one <code>MathCHOP</code>.</p> <p></p> <p>Download</p>","tags":["TD/CHOPS","TD/Signal","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CreatingSteppedNoise/","title":"CreatingSteppedNoise","text":"","tags":["TD/CHOPS","TD/NOISES","TD/BEAT","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/CreatingSteppedNoise/#creating-stepped-noise","title":"Creating Stepped Noise","text":"<p>If we want to create a noise, that is stepped, so it holds its value for a period of time and then on a trigger changes to a new noise value  we can pulse a <code>constantCHOP</code> with for example a <code>beatCHOP</code>. The <code>constantCHOP</code> will hold the value till the next time the Snap parameter gets pulsed.  A <code>filterCHOP</code> lets us manipulate the transition between the pulses.</p> <p>Download </p>","tags":["TD/CHOPS","TD/NOISES","TD/BEAT","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/DefineLoopingBehaviourCHOP/","title":"DefineLoopingBehaviourCHOP","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/DefineLoopingBehaviourCHOP/#define-looping-behavior-chop","title":"Define Looping Behavior CHOP","text":"<p>With an <code>ExtendCHOP</code> we can set how a <code>CHOP</code> loops or extends at its boundaries. </p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/DeleteSamplesBeginningEndCHOP/","title":"DeleteSamplesBeginningEndCHOP","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/DeleteSamplesBeginningEndCHOP/#deleting-samples-at-the-beginning-or-end-of-chop","title":"Deleting samples at the beginning or end of chop","text":"<p>Sometimes you want to delete certain parts of a chop. For example when you have an audiospectrum that doesn't really provide usefull data at the edges we can use a <code>trimCHOP</code> to delete certain numbers of samples at the outer edges. For that we set unit values to <code>Relative Start/End</code> and discard <code>Exterior</code>. From there you can set the amount of samples you want delete in Start and End.</p> <p>DownloadFile</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/FlipChannelPath/","title":"FlipChannelPath","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/FlipChannelPath/#mirror-channel","title":"Mirror Channel","text":"<p>If you want to flip around the channel data you can use a <code>StretchCHOP</code> set <code>Reverse Interval</code> to true.</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/FullImageTopToCHOP/","title":"FullImageTopToCHOP","text":"","tags":["TD/CHOP","TD/TOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/FullImageTopToCHOP/#full-top-image-to-chop-values","title":"Full TOP image to CHOP values","text":"<p>When you want to convert the full image of a TOP into CHOP values under crop you select <code>Full Image</code> and then combine all the channels with a <code>ShuffleCHOP</code> where you select <code>Sequence Channels by Name</code>. </p> <p></p> <p>To have performance in mind it can make sense to reduce the resolution of the top before.</p> <p>Download </p>","tags":["TD/CHOP","TD/TOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/GetSpecificSampleFromCHOP/","title":"GetSpecificSampleFromCHOP","text":"","tags":["TD/CHOP","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/GetSpecificSampleFromCHOP/#get-specific-sample-from-chop","title":"Get specific Sample from Chop","text":"<p>Sometimes we want to acces a specific sample/point from a chop. With scripting we can access it by referencing the index of the channel <code>[0]</code> and the index of the sample <code>[30]</code>.</p> <p><code>op('noise1')[0][30]</code></p>","tags":["TD/CHOP","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/GrabCurrentInputValueConstantCHOP/","title":"GrabCurrentInputValueConstantCHOP","text":"","tags":["TD/CHOP","TD/TOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/GrabCurrentInputValueConstantCHOP/#grab-current-input-value-in-contantchop","title":"Grab current input value in ContantCHOP","text":"<p>The <code>ContstantCHOP</code>has a <code>Snap</code> function to grab current input value when snap value is 1.</p> <p>Download </p>","tags":["TD/CHOP","TD/TOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/HoldLastChangedValue/","title":"HoldLastChangedValue","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/HoldLastChangedValue/#hold-last-changed-value","title":"Hold last changed value","text":"<p>Often it is super useful to hold the last changed value till a new change happens. This is easily made with a <code>overwriteCHOP</code>.</p> <p>Just change the constant values in the example to understand.</p> <p>Download </p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/InfiniteLoopingNoiseChannel/","title":"InfiniteLoopingNoiseChannel","text":"","tags":["TD/CHOPS","TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/InfiniteLoopingNoiseChannel/#create-infinite-looping-noise-channel-with-sop","title":"Create Infinite Looping Noise Channel With SOP","text":"<p>To create a noise channel that infinitely loops and has smooth transitions we can displace a <code>circleSOP</code> with a <code>noiseSOP</code> and then convert it into Channel data.</p> <p>Download</p>","tags":["TD/CHOPS","TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/IterateThroughConstantChannelsViaScript/","title":"IterateThroughConstantChannelsViaScript","text":"","tags":["TD/CHOPS","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/IterateThroughConstantChannelsViaScript/#iterate-through-channels-of-constantchop-via-script","title":"Iterate Through Channels of ConstantCHOP via Script","text":"<p>If you have a <code>constantCHOP</code> with some values and at one point you want to reset them all via a Script we can use the following python code. It iterates through all the channels and uses f-Strings to set the parameter <code>val0,val1,...</code> <pre><code>def onValueChange(channel, sampleIndex, val, prev):\n    n = op('constant1')\n    for channel in n.chans():\n        n.par[f\"value{channel.index}\"]=0\n    return\n</code></pre></p> <p>Download</p>","tags":["TD/CHOPS","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/KeepChannelCountStableReplaceCHOP/","title":"KeepChannelCountStableReplaceCHOP","text":"","tags":["TD/CHOPS","TD/Performance","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/KeepChannelCountStableReplaceCHOP/#keep-channel-count-stable-with-replacechop","title":"Keep Channel Count Stable with ReplaceCHOP","text":"<p>If the channel count changes unexpectedly, this can break dependencies, cause errors, or produce unintended visual effects. A fixed channel count makes it easier to manage downstream processing.</p> <p>Save the state with the maximimum amount of channels that you expect to have with a <code>locked NullCHOP</code>. Then plug this into the <code>ReplaceCHOP</code>. For the second input you set the varying data.</p> <p>Download</p>","tags":["TD/CHOPS","TD/Performance","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ManipulateCHOPValueExpressionCHOP/","title":"ManipulateCHOPValueExpressionCHOP","text":"","tags":["TD/CHOPS","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ManipulateCHOPValueExpressionCHOP/#manipulate-chop-values-with-expressionchop","title":"Manipulate CHOP Values with ExpressionCHOP","text":"<p>The ExpressionCHOP is a great tool to manipulate CHOP values with the power of scripting. </p> <p>Another application is to filter the input value with for example <code>me.inputVal &gt; 0.5</code> which returns 1 when the input values is over 0.5.  Or we test against the value of another CHOP with e.g.  <code>1 if me.inputVal &gt; op('nullThresh')[0] else 0</code>. *Set value to 1 if my inputvalue is bigger than the threshold value * which could be controller by a UI element like slider. </p> <p>If we wanted to filter out for example all values below 0 we could also use the expression <code>me.inputVal if(me.inputVal&gt;0.) else 0</code>. So set the values of my input only when they are bigger than 0.</p> <p>This post will be continued with further explorations and functionalities!</p> <p>DownloadFile</p>","tags":["TD/CHOPS","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MapCHOPValuesToNewIntervall/","title":"MapCHOPValuesToNewIntervall","text":"","tags":["TD/CHOP","TD/Samples","Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MapCHOPValuesToNewIntervall/#map-chop-values-to-new-intervall","title":"Map CHOP Values to New Intervall","text":"<p>In many cases you want to remap the range of the chop. For example if you want to reduce the amount of samples from an audiofile to a specific number so you can use it for instancing you can map the Chop values with a <code>resampleCHOP</code>. First you need to <code>Deactivate Time Slice</code> in the Common tab. Then you set method <code>new Rate, new Interval</code>, Unit Values <code>Absolute</code>. Then you can set the End parameter to the amount of samples you want. Don't forget to set <code>Samples</code> as the parameter measure.</p>","tags":["TD/CHOP","TD/Samples","Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MapCHOPtoSOPLength/","title":"MapCHOPtoSOPLength","text":"","tags":["TD/CHOP","TD/SOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MapCHOPtoSOPLength/#map-chop-to-sop-length","title":"Map CHOP to SOP length","text":"<p>When we want to create e.g. a line from CHOP data we often have the problem that the amount of SOP Points aren't the same as the amount of samples of the CHOP. To fix that we can change the Mapping in the <code>CHOP to</code> Node to Resample CHOP to Fit SOP</p> <p>Download </p>","tags":["TD/CHOP","TD/SOP","TD/Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MeasureChangeOfValue/","title":"MeasureChangeOfValue","text":"","tags":["TD/CHOPS","Measuring","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/MeasureChangeOfValue/#measure-how-fast-the-chop-value-changes","title":"Measure how fast the CHOP value changes","text":"<p>When you want to track how fast for example something moves or somebody interacts, you can use the <code>slopeCHOP</code> to define e.g. the background alpha of a TOP.</p> <p>Download</p>","tags":["TD/CHOPS","Measuring","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/OffsetSingleChannelCHOP/","title":"OffsetSingleChannelCHOP","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/OffsetSingleChannelCHOP/#offset-a-single-channel-in-chop","title":"Offset a Single Channel in CHOP","text":"<p>When we have a chop that has multiple channels we can use <code>me.chanIndex</code> to offset the single channels by a specific value.</p> <p>It is getting even more interesting when you multiply the single channels by another chop value. It is important to add 1 to <code>me.chanIndex</code> so the first channel is not always equals 0.</p> <p>Download </p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/OnlyEffectCertainChannelsMath/","title":"OnlyEffectCertainChannelsMath","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/OnlyEffectCertainChannelsMath/#only-effect-certain-channels-in-mathchop","title":"Only effect certain channels in MathCHOP","text":"<p>If you only want to effect certain channels in <code>MathCHOP</code> you can elect them in the <code>Common</code> tab.</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ReduceNumChannelsButKeepShape/","title":"ReduceNumChannelsButKeepShape","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ReduceNumChannelsButKeepShape/#reduce-samples-but-keep-shape","title":"Reduce Samples but keep shape","text":"<p>If you want to reduce the amount of samples that your channel has but you want to keep the overall shape you can use a <code>StretchCHOP</code>.</p> <p>You can set <code>Unit value</code> to <code>absolute</code> and use for example <code>0.2</code> fraction.</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ReplicateSampleAtEndBegginng/","title":"ReplicateSampleAtEndBegginng","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ReplicateSampleAtEndBegginng/#replicate-sample-at-endbeginning","title":"Replicate Sample at End/Beginning","text":"<p>When you loop through CHOP values and you want to have the same value at the end as well as at the beginning we can use a <code>TrimCHOP</code> and add one sample to the end parameter.</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ResampleAudioToSOPLength/","title":"ResampleAudioToSOPLength","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ResampleAudioToSOPLength/#resample-audio-data-to-length-of-sop","title":"Resample Audio Data to Length of SOP","text":"<p>When you want to map CHOP Data like an Audiofile to the length of your SOP you can use a <code>resampleCHOP</code>. As the source you plug in the origianl Audiofile data. As the second input you use a <code>sopto</code> from the SOP you want to use for the amount of samples/points.</p> <p>DownloadFile</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/StretchCHOPToNumSamples/","title":"StretchCHOPToNumSamples","text":"","tags":["TD/CHOP","TD/Samples","Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/StretchCHOPToNumSamples/#stretch-chop-to-specify-number-of-samples","title":"Stretch CHOP to Specify Number Of Samples","text":"<p>You can use a <code>stretchCHOP</code> to specify the amount of samples you want for your CHOP. So if you want to keep the basic shape of your CHOP but want to reduce the amount of samples this is a handy trick.</p> <p>Download </p>","tags":["TD/CHOP","TD/Samples","Conversion","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/TippsTricks/","title":"Tips and tricks","text":"<p>Add <code>AudioFilter</code> before <code>AnalyseCHOP</code> with RMSPower so unnecessary noise is filtered out.</p> <p>Use <code>LimitCHOP</code> to keep values in Range and assure the system stays where you want it.</p>","tags":["TD/CHOPS","TD/Tips","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ToggleValueViaKeyboard/","title":"ToggleValueViaKeyboard","text":"","tags":["TD/CHOPS","TD/Interaction","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/ToggleValueViaKeyboard/#toggle-value-via-keyboard","title":"Toggle Value Via Keyboard","text":"<p>We can use a <code>CountCHOP</code> and set it's Limit to <code>Loop Min/Max</code> with <code>LimitMaximum</code> to one.  Then every time we hit a key the value toggles between 0 and 1.</p>","tags":["TD/CHOPS","TD/Interaction","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/TriggerSingleSound/","title":"TriggerSingleSound","text":"","tags":["TD/CHOPS","Audio","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/TriggerSingleSound/#trigger-single-sound","title":"Trigger Single Sound","text":"<p>If we don't need a continuously playing audiofile and just want to trigger a single sound we can use the <code>AudioPlayCHOP</code>. It also return <code>true</code> while the sound is playing which can be handy for example muting other sounds or executing functionality. </p> <p>Download</p>","tags":["TD/CHOPS","Audio","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/___UseTimelineForLoopingChopValues/","title":"UseTimelineForLoopingChopValues","text":"","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/CHOPS/___UseTimelineForLoopingChopValues/#use-timeline-for-looping-chopvalues","title":"Use Timeline for looping Chopvalues","text":"<p>If you want to output for example looping behaviour that has the length of your timeline we can use the <code>TimelineCHOP</code> divide the <code>frame</code> by the <code>endframe</code> to normalise the value. This  gives us a value that goes from 0 -&gt; 1.0 from timeline start to timeline end. </p> <p>DownloadFile</p>","tags":["TD/CHOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/","title":"COMPs","text":"<p>Welcome in COMPs Land!</p>"},{"location":"topics/TouchDesigner/COMPS/#last-added","title":"Last added","text":"<p>Set Widget as Child of Container</p> <p>Show Visuals as Background in Container</p> <p>Container Vs Base</p> <p>Node Flags</p> <p>Floating Window</p> <p>Show Specific Operator in Container</p> <p>SelectCOMP to Select UI Elements</p> <p>Set the value of slider via script</p>"},{"location":"topics/TouchDesigner/COMPS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/COMPS/ContainerVsBase/","title":"Container Vs Base","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/ContainerVsBase/#container","title":"Container","text":"<p>We use Container to organize the visual parts of our sketch like UI or the actual visuals.</p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/ContainerVsBase/#base","title":"Base","text":"<p>In the Base we organize the functional parts of our system.</p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/FloatingWindow/","title":"FloatingWindow","text":"","tags":["TD/COMP","TD/Window","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/FloatingWindow/#full-top-image-to-chop-values","title":"Full TOP image to CHOP values","text":"<p>If you want a floating window of for example specific operators you can use a <code>windowCOMP</code>. Assign a window operator that you want to show in the floating window and then  click on open as seperate window.</p> <p>You also can create a little script that creates a new <code>windowCOMP</code> on Button Click and opens it. I attached this example as a download.</p> <p>Download </p>","tags":["TD/COMP","TD/Window","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/NodeFlags/","title":"NodeFlags","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/NodeFlags/#node-flags","title":"Node Flags","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SelectCOMPSelectUIElements/","title":"SelectCOMPSelectUIElements","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SelectCOMPSelectUIElements/#selectcomp-to-select-different-ui-elements","title":"SelectCOMP to Select Different UI Elements","text":"<p>If you want to change your UI depending on a value or want to use a button to controll which UI is shown you can change the value of the <code>SelectCOMP</code>. In the Download Example a another Button switches between different Container UIs.</p> <p>Download </p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetBackgroundContainer/","title":"SetBackgroundContainer","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetBackgroundContainer/#set-background-container","title":"Set Background Container","text":"<p>To set visuals as the background of a container we reference the name of the top in the <code>BackgroundTop</code> Parameter of the <code>Look</code> tab.</p> <p>Download </p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetValueOfSliderViaScript/","title":"SetValueOfSliderViaScript","text":"","tags":["TD/COMP","TD/Slider","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetValueOfSliderViaScript/#set-value-of-slider-via-script","title":"Set Value of Slider via Script","text":"<p>Sometimes you want to overwrite the values of a slider via script for example when you want to reset it to a specific value when another <code>executeDAT</code> gets triggered.</p> <p>For that we can use <code>op('slider1').panel.u.val = 0.5</code></p>","tags":["TD/COMP","TD/Slider","TD/Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetWidgetAsChildrenContainer/","title":"SetWidgetAsChildrenContainer","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/SetWidgetAsChildrenContainer/#set-widget-as-child-of-container","title":"Set Widget as Child of Container","text":"<p>If you want to group widgets and UI elements in container there are two ways how you can make them a child of a container. You can put the elements inside the <code>Container</code> or you drag a connection from the upper docker of the UI elements into the bottom docker of the parent. In the <code>children</code> tab of the <code>Container</code> you can set <code>Align</code> to decide their order in the parent.</p> <p>Another way to change the order of the child elements is to set each <code>Align order</code> parameter to the oder index of each child.  <pre><code>First order element -&gt; 0\nSecond order element -&gt; 1\n...\n</code></pre></p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/ShowSpecificOperatorContainer/","title":"ShowSpecificOperatorContainer","text":"","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/COMPS/ShowSpecificOperatorContainer/#show-specific-operator-in-container-view","title":"Show specific operator in container view","text":"<p>The <code>containerCOMP</code> has two different node view modes. <code>Default Viewer</code> which shows the UI Elements. The other option is <code>Operator Viewer</code> which allows to show a specific Operator.</p>","tags":["TD/COMP","TD/UI","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/","title":"DATs","text":"<p>Welcome in DATs Land!</p>"},{"location":"topics/TouchDesigner/DATS/#last-added","title":"Last added","text":"<p>Convert Text into Table Data</p> <p>Select Table Data By Value</p> <p>Replace Specific Data in Table with MergeDAT</p> <p>Storing Values</p> <p>Apply expression to all Values in DAT</p> <p>Scripting DAT</p> <p>Converting DAT into CHOP Graph</p> <p>Populate TableDAT via Script</p> <p>ExecuteDAT when new selection from table</p> <p>Swapping Cols Rows in TableDAT</p>"},{"location":"topics/TouchDesigner/DATS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/DATS/ConvertTextToTable/","title":"ConvertTextToTable","text":"","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ConvertTextToTable/#convert-text-into-table","title":"Convert Text into Table","text":"<p>We can use a <code>ConvertDAT</code> so transform a string from a <code>TextDAT</code> into a <code>Table</code> representation.</p> <p>Download </p>","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ConvertingDATIntoGraph/","title":"ConvertingDATIntoGraph","text":"","tags":["TD/DAT","TD/TableDAT","TD/CHOP","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ConvertingDATIntoGraph/#converting-dat-into-chop-graph","title":"Converting DAT into CHOP Graph","text":"<p>Often we want to convert table data into a graph which makes the data more accessible or to convert it to visuals. </p> <p>Basic idea is we convert the <code>null1</code> with <code>datto</code> into a CHOP. In the <code>dattoCHOP</code> we select if the first row of the data is already a value or the name of the data channel.  As the output we set <code>Single Channel</code>.</p> <p>Download </p>","tags":["TD/DAT","TD/TableDAT","TD/CHOP","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ExecuteNewSelectionTable/","title":"ExecuteNewSelectionTable","text":"","tags":["TD/DAT","TD/TableDAT","TD/Execute","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ExecuteNewSelectionTable/#executedat-when-new-selection-from-table","title":"ExecuteDAT when new selection from table","text":"<p>To execute something when your selection has changed we can just hook an <code>ExecuteDAT</code> and run the code on <code>TableChange</code> Method.</p> <p></p> <p>Download </p>","tags":["TD/DAT","TD/TableDAT","TD/Execute","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ExpressionValuesDAT/","title":"ExpressionValuesDAT","text":"","tags":["TD/DAT","TD/TableDAT","TD/Evaluate","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ExpressionValuesDAT/#apply-expression-to-all-dat-values","title":"Apply Expression to all DAT Values","text":"<p>If you want to manipulate your data you can use an <code>evaluateDAT</code> and then use an expression to manipulate that data.</p> <p>Here we apply the modulo to the input value with <code>me.inputCell % 2</code>. This defines if input value is even or not.</p>","tags":["TD/DAT","TD/TableDAT","TD/Evaluate","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/PopulateTableDATViaScript/","title":"PopulateTableDATViaScript","text":"","tags":["TD/DAT","Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/PopulateTableDATViaScript/#populate-tabledat-via-script","title":"Populate TableDAT via Script","text":"","tags":["TD/DAT","Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ReplaceSpecificDataTableMerge/","title":"ReplaceSpecificDataTableMerge","text":"","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ReplaceSpecificDataTableMerge/#replace-specific-data-in-table-with-mergedat","title":"Replace Specific Data in Table with MergeDAT","text":"<p>To replace specific values in a <code>TableDAT</code>, you can use a <code>MergeDAT</code> to efficiently swap data. By selecting the Replace Cells by Column option, you can replace values in the original <code>TableDAT</code> with those from a secondary <code>TableDAT</code>. The same method can be applied to replace data by row.</p> <p>Important Note: Ensure that the headers (typically in the first row) of both TableDATs match exactly, as the merge process relies on these headers to align the data correctly.</p> <p>Download </p>","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/ScriptingDAT/","title":"Often used scripting for DATS","text":"<p><code>me.inputRow</code> Index of the Column <code>me.inputCol</code> Index of the Column</p>","tags":["TD/DAT","Scripting","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/SelectTableDataByValue/","title":"SelectTableDataByValue","text":"","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/SelectTableDataByValue/#select-table-data-by-value","title":"Select Table Data by Value","text":"<p>To select all columns or rows that contain a certain value in the first row/column:</p> <ul> <li>Use the selectDAT component</li> <li>Configure it to \"Select Rows by Value\" or \"Select Columns by Value\"</li> <li>Specify your target value in the appropriate field</li> <li>This will filter your data based on the specified criteria in the first row/column</li> </ul>","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/StoringDataViaScript/","title":"StoringDataViaScript","text":"","tags":["TD/DAT","TD/Storing","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/StoringDataViaScript/#storing-values","title":"Storing Values","text":"<p>We can store values in TouchDesigner so we can retrieve them when we need them. We can use Python for that.</p> <pre><code>//Storing values\nvalue = 5\nme.parent().store('valName',value)\n\n//To retrieve Value\ngrab = me.fetch('valName')\nprint(grab)\n</code></pre>","tags":["TD/DAT","TD/Storing","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/SwappingColsRowsTable/","title":"SwappingColsRowsTable","text":"","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/DATS/SwappingColsRowsTable/#swapping-columns-or-rows-in-tabledat","title":"Swapping columns or rows in TableDAT","text":"<p>To swap the data of columns or rows in your <code>tableDAT</code> you can use a reorderDAT and set the Order e.g. to <code>1 0</code>.</p> <p>Download </p>","tags":["TD/DAT","TD/TableDAT","TouchDesigner"]},{"location":"topics/TouchDesigner/MATS/","title":"DATs","text":"<p>Welcome in MATs Land!</p>"},{"location":"topics/TouchDesigner/MATS/#last-added","title":"Last added","text":"<p>Create 3D Shape with Phong Material</p>"},{"location":"topics/TouchDesigner/MATS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/MATS/Create3DShapePhongMAT/","title":"Create3DShapePhongMAT","text":"","tags":["TD/SOP","TD/TOP","TD/MAT","TouchDesigner"]},{"location":"topics/TouchDesigner/MATS/Create3DShapePhongMAT/#create-3d-shape-with-phongmat","title":"Create 3D Shape with PhongMAT","text":"<p>Instead of using for example a <code>noiseSOP</code> to displace the vertex of a shape like a <code>gridSOP</code> we also can create this displacement with TOPs and a <code>PhongMAT</code> Material. We assign TOPs as color , height and normal Maps in the <code>PhongMAT</code>.  To enable the a texture as a heightmap we need to turn on <code>Enable Height Map</code> and to get actual displacement of the verteces of the Shape we need to turn on <code>Displace Vertices</code> in the <code>PhongMAT</code>. A bigger <code>Displace Scale</code> creates more extreme effects. Especially for values bigger than 1. </p> <p>To create a normal Texture out of a TOP we can use the <code>normalTOP</code>. </p> <p>It is important that we add <code>attributeCreateSOP</code> and a <code>textureSOP</code> to out shape SOP.</p> <p>By playing with the <code>offset</code> values in <code>textureSOP</code> we can create a scrolling effect. Also changing the <code>scale</code> in the <code>textureSOP</code> can create interesting effects.</p> <p></p> <p>Download </p>","tags":["TD/SOP","TD/TOP","TD/MAT","TouchDesigner"]},{"location":"topics/TouchDesigner/POPS/","title":"POPS","text":"<p>Welcome in POPs Land!</p> <p>Basics</p>"},{"location":"topics/TouchDesigner/POPS/#last-added","title":"Last added","text":"<p>Particle System</p>"},{"location":"topics/TouchDesigner/POPS/Basics/","title":"POPS","text":"","tags":["TD","TD/POPS"]},{"location":"topics/TouchDesigner/POPS/Basics/#generating-points","title":"Generating Points","text":"<p><code>PointGeneratorPOP</code> allows us number of shapes as the source and distribute a number of points across the surface or volume of the shape.</p>","tags":["TD","TD/POPS"]},{"location":"topics/TouchDesigner/POPS/Basics/#attributes","title":"Attributes","text":"<p>Attributes are numbers(single number,vectors) that are assigned to a point, vertex or primitive of geometry.</p> <p>Point Attribute is <code>float3</code> Color Attribute is <code>float4</code></p>","tags":["TD","TD/POPS"]},{"location":"topics/TouchDesigner/POPS/Basics/#toptopop","title":"TopToPOP","text":"<p>A <code>TopToPop</code> creates for each pixel in a TOP a point in the POP.</p>","tags":["TD","TD/POPS"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/","title":"POP Particle System","text":"<p>To create a Particle System we can use a <code>ParticlePOP</code> which contains the usual particle parameters from ParticleGPU or <code>ParticleSOP</code></p> <p>When we connect a <code>TopToPOP</code> we get the Color attribute from the TOP. But we will loose this attribute when connecting to the <code>ParticlePOP</code>. Under Attributes in the <code>ParticlePOP</code> parameter window we can add the Color attribute.</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/#move-particles","title":"Move Particles","text":"<p>To Move the particles in a POP particle system we create kind of like a feedback loop in TOP world. We add a <code>Null</code> after the <code>ParticlePOP</code> and then assign it to the Target Particles Update POP parameter of the <code>ParticlePOP</code>.</p> <p>In between we then can add a <code>NoisePOP</code> or a <code>TransformPOP</code> to create the change in the particle system.</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/#apply-noise-only-on-specific-color-values","title":"Apply Noise only on specific color values","text":"<p>Be default the <code>noisePOP</code> adds the noise values to each point of the POP.</p> <p>But if you only want to apply noise to a certain color range</p> <p><code>MathCombinePOP</code>allows us to combine certain attributes or even create new Attributes. So we can choose AB operation and then choose the attributes Color and Noise*</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/#limit-particles-in-a-direction","title":"Limit Particles in a direction","text":"<p>We can use a <code>LimitPOP</code> to limit it's movement in an direction. For that we set parameter size to 3 and then activate Positive Only for the axis we want to limit.</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/#add-trails-to-particles","title":"Add trails to particles","text":"<p>Be careful before you connect the <code>TrailPop</code>. It can crash your TD when you use the experimental build . Set it up first. First deactivate <code>Active</code>. Then you can connect and activate Math by Attribute and pick <code>PartId</code>. This will tell the POP which points to connect. So set Connectivity to <code>Point Prim</code>.</p> <p><code>TrailPOP</code> also has a Transform tab to create interesting transformation and rotation behavior.</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/POPS/PopParticleSystem/#color-particles-with-noise-applied-to-them-differently","title":"Color particles with noise applied to them differently","text":"<p>We can use a <code>LookupTexturePOP</code> to give the particles that have noise applied a different color.</p> <p>We can calculate the length a vector with <code>MathCombinePOP</code> and <code>length(A)</code> operation.</p>","tags":["TD","TD/POPS","Particle System"]},{"location":"topics/TouchDesigner/QUICK/","title":"Quick Tips","text":"<p>Welcome in Quick Tips Land!</p>"},{"location":"topics/TouchDesigner/QUICK/#last-added","title":"Last added","text":"<p>Open File Picker Window on Button</p> <p>Finding Reference of Parameter Export</p> <p>Test Effects of Low Performance</p> <p>Parameter Expression vs Export</p> <p>Docking Operators Together</p> <p>See how Elements Build in TD</p> <p>Define Custom Startup File</p> <p>Show Quicktips for Parameters</p> <p>Navigation Shortcuts</p>"},{"location":"topics/TouchDesigner/QUICK/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/QUICK/DefineCustomStartupFile/","title":"DefineCustomStartupFile","text":"","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/DefineCustomStartupFile/#define-custom-startup-file","title":"Define Custom Startup File","text":"<p>When you want to start your Touchdesigner Patch with your own Setup instead of the TD one we can select our own file.  For that we have to go to Preferences/General. There under <code>Startup File Mode</code> we can pick <code>Custom File</code> load the file that we want to show on Startup.</p>","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/DockingOperatorsTogether/","title":"DockingOperatorsTogether","text":"","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/DockingOperatorsTogether/#docking-operators-together","title":"Docking Operators Together.","text":"<p>It can be useful to dock one operator to another one so they are always together when you move the operator. Problem is obviously that you can loose sight of the operator and forget about it.</p> <p>R-Click on the operator you want to dock to the other operator.</p> <p>Click <code>Dock to</code></p> <p>L-Click on the operator you want it docked to. The little pink arrow on the bottom right shows that an operator is docked to null1</p> <p></p> <p>With L-Click on the Arrow you can show the Operator and with R-Click on the docked Operator you can click <code>Undock</code>.</p>","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/FindingReferenceParameterExport/","title":"FindingReferenceParameterExport","text":"","tags":["TD/QuickTips","TD/Navigation","TD/Parameter"]},{"location":"topics/TouchDesigner/QUICK/FindingReferenceParameterExport/#finding-reference-of-parameter-export","title":"Finding Reference Of Parameter Export","text":"<p>Especially in big projects sometimes it is hard to figure out where the referenced operator of the export is. We can navigate to the Export OP by clicking right mouse button on the parameter field and click on <code>Jump To</code>.</p>","tags":["TD/QuickTips","TD/Navigation","TD/Parameter"]},{"location":"topics/TouchDesigner/QUICK/NavigationShortcuts/","title":"Navigation Shortcuts","text":"<p><code>H</code> - Brings the view of the canvas to home <code>O</code> - Shows where nodes are placed on the canvas on the bottom left corner <code>U</code> - Move Level up in hierachy <code>I</code> - Move Level Down in hierachy</p>","tags":["TD/QuickTips","TD/Navigation"]},{"location":"topics/TouchDesigner/QUICK/OpenFilePickerBtn/","title":"OpenFilePickerBtn","text":"","tags":["TD/QuickTips","TD/UI","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/OpenFilePickerBtn/#open-file-picker-window-on-button","title":"Open File Picker Window on Button","text":"<p>To allow a user to select a new image source using the operating system's File Picker window, you can write a script that executes when a button is pressed. The script to open the File Picker is: <code>path = ui.chooseFile(fileTypes=['mov','mp4'])</code>. The <code>ui.chooseFile()</code> function launches the File Picker window and returns the path of the selected file, which is stored in the variable <code>path</code>. You can then assign this path to a <code>moviefileinTOP</code> to load the selected source.</p> <p>DownloadFile</p>","tags":["TD/QuickTips","TD/UI","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/ParameterExpressionVSExport/","title":"ParameterExpressionVSExport","text":"","tags":["TD/QuickTips","TD/Parameters"]},{"location":"topics/TouchDesigner/QUICK/ParameterExpressionVSExport/#parameter-expression-vs-export","title":"Parameter Expression vs. Export","text":"<p>Expressions allow you to add further manipulations of the parameter like math calculations or referencing values of other Operators. They tend to be a little bit slower</p> <p>Export tends to be a bit faster but isn't that flexible. But you get an <code>exportDAT</code> from that what you can use if needed. </p>","tags":["TD/QuickTips","TD/Parameters"]},{"location":"topics/TouchDesigner/QUICK/PerformanceMonitor/","title":"PerformanceMonitor","text":"","tags":["TD/QuickTips","TD/Performance","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/PerformanceMonitor/#checking-performance","title":"Checking Performance","text":"<p>When your TD Sketch is slow and you want to know which process is likely causing it, we have two options in TouchDesigner that can help quite fast. The first option is the <code>Performance Monitor</code> which is showing the single Processes. In the UI go to top to Dialog/Performance Monitor. On the Popup window click on Analyse at the bottom. Look for the process with the highes ms Value/ Process Time. This can be a good indicator to find your bottle neck. </p> <p>Another option is the the <code>Probe</code> from the Palette. Open it by clicking the <code>Pulse</code> Btn in the Parameter Window of the COMP. You can find it under Tools . With the <code>Probe</code> you can monitor the GPU,CPU times as well as Memory. The more red the color of the area the higher the effects on your performance. If you put your mouse over one of the colored areas and hit <code>F10</code> it navigates you to the area of the sketch. </p> <p></p>","tags":["TD/QuickTips","TD/Performance","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/SeeHowElementsBuildTD/","title":"See how TD Elements are build","text":"<p>If you want to know how UI Elements and even the single operators are build up in TD you can hover over the Elements and push <code>F10</code> to see \"inside\" the operators.</p>","tags":["TD/QuickTips","TD/Navigation"]},{"location":"topics/TouchDesigner/QUICK/SetLockFlagViaScript/","title":"SetLockFlagViaScript","text":"","tags":["TD/QuickTips","TD/UI","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/SetLockFlagViaScript/#set-lock-flag-via-script","title":"Set Lock Flag via Script","text":"<p>We can set the Lock Flag of an Operator with a script. This script is alternating the the lock variable between true and false every time the <code>beatCHOP</code> pulses. <pre><code>lock = False\ndef onOffToOn(channel, sampleIndex, val, prev):\n    global lock\n    lock = not lock\n    myop = op('null2')\n    myop.lock = lock\n    return\n</code></pre></p> <p>Download</p>","tags":["TD/QuickTips","TD/UI","TD/COMP"]},{"location":"topics/TouchDesigner/QUICK/ShowingQuicktipsParameter/","title":"ShowingQuicktipsParameter","text":"","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/ShowingQuicktipsParameter/#showing-quicktips-for-parameter","title":"Showing quicktips for parameter","text":"<p>To show quicktips about a certain parameter of an operator you can hold down <code>alt</code> and hover over the parameter to get a short discription about the parameter.</p>","tags":["TD/QuickTips"]},{"location":"topics/TouchDesigner/QUICK/TestEffectsLowPerformanceCHOP/","title":"TestEffectsLowPerformanceCHOP","text":"","tags":["TD/CHOPS","TD/Performance","TouchDesigner"]},{"location":"topics/TouchDesigner/QUICK/TestEffectsLowPerformanceCHOP/#test-effects-of-lower-performance-with-hogchop","title":"Test Effects Of Lower Performance with HogCHOP","text":"<p>If you want to test how well your network performs if the FPS goes down and what I would look like you can use a <code>HogCHOP</code>.</p>","tags":["TD/CHOPS","TD/Performance","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/","title":"Scripting","text":"<p>Welcome to Scripting Topis</p>"},{"location":"topics/TouchDesigner/SCRIPTING/#last-added","title":"Last added","text":"<p>Set Local Variables Operator</p> <p>Set random Parameter Value </p> <p>Specific TouchDesigner Scripting</p> <p>Python in Touch</p> <p>Get all values of chop as a list</p> <p>Pulse Parameter via Script </p>"},{"location":"topics/TouchDesigner/SCRIPTING/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/SCRIPTING/AssignExpressionViaScript/","title":"Assign an Expression via Script","text":"<p>When you want to assign an expression to a parameter via script you can use the <code>.expr</code> extention. <code>op(...).par.color.expr = 'absTime.seconds%255'</code></p>","tags":["TD/CHOP","Scripting","TD/DAT","TD/Conversion","Python","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/GetAllValuesChopAsList/","title":"GetAllValuesChopAsList","text":"","tags":["TD/CHOP","Scripting","TD/DAT","TD/Conversion","Python","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/GetAllValuesChopAsList/#get-all-values-of-chop-as-a-list","title":"Get all values of CHOP as a list","text":"<p>If you want to use CHOP Values for Scripting you can for example use <code>op('noise1')[0].vals</code> to get the first Channel <code>[0]</code>.</p> <p>To shorten the list you can use some python fun with <code>shorterValueList = valueList[:10]</code> to get for example the first 10 values.</p> <p>Download </p>","tags":["TD/CHOP","Scripting","TD/DAT","TD/Conversion","Python","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/PulseParameterViaScript/","title":"Pulse a pulse Parameter via script","text":"<p>With <code>opname.par.parname.pulse()</code> can we execute a pulse event on a pulse parameter.</p>","tags":["TouchDesigner","TD/Scripting"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/","title":"Python in Touch","text":"<p>Here is a collection of python commands that can be util learning and applying: </p> <p><code>#</code> comment text out</p>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#variables","title":"Variables","text":"<pre><code>//Basic variables\nvar1 = 10.0\nvar2 = 20\nvar3 = \"String\"\n\n//Converting Variables\nstr(var1) // float into string\n</code></pre>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#grab-values-from-operator","title":"Grab values from operator","text":"<pre><code>op('opname')['nameChannel']\nop('opname')[0]\n\n//Always useful to assign operator to variable\nop = op('lfo1')\n</code></pre>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#conditions","title":"Conditions","text":"<pre><code>if var1 &gt;=0:\n    # Do something\nelse:\n    # Do something else\n\n\nif var1 == 0 &amp;&amp; var3 &lt; 3:\n</code></pre>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#loops","title":"Loops","text":"<p>For-Loop</p> <pre><code>for x in range(0,10):\n    print(x)\n</code></pre> <p>While loop</p> <p>!!! Python will stop touchdesigner while the while loop runs. <pre><code>while var &lt;=0:\n    print(x)\n</code></pre></p>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#access-parameter","title":"Access Parameter","text":"<pre><code>op = op('lfo1')\nop.par.parameterName\n</code></pre>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/PythonInTouch/#reference-python-math-library","title":"Reference Python Math Library","text":"<pre><code>import math\nmath.sin(...)\n</code></pre>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/ScriptingOperators/","title":"Scripting Operators","text":"","tags":["TouchDesigner","TD/Scripting"]},{"location":"topics/TouchDesigner/SCRIPTING/ScriptingOperators/#connecting-two-operators-via-script","title":"Connecting two operators via script","text":"<p><code>op('firstOperator').outputConnectors[0].connect(op('operator2'))</code></p>","tags":["TouchDesigner","TD/Scripting"]},{"location":"topics/TouchDesigner/SCRIPTING/SetLocalVariablesOperator/","title":"SetLocalVariablesOperator","text":"","tags":["TD/DAT","TD/Storage","Scripting","Python","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/SetLocalVariablesOperator/#set-variables-in-ops","title":"Set Variables in OPs","text":"<p>This is an older approach but can be useful if you working with older files or someone gives you a non updated file.</p> <p>We set the variables with <code>setVar()</code> <pre><code>me.parent().setVar('Height',720)\n\nme.parent().setVar('Width',1280)\n</code></pre> With `me.var('Height') can we retrieve the value from the variable.</p> <p>Download </p>","tags":["TD/DAT","TD/Storage","Scripting","Python","TouchDesigner"]},{"location":"topics/TouchDesigner/SCRIPTING/SetRandomParameterValue/","title":"Set random Parameter Value","text":"<p>We can use the TouchDesigner function <code>tdu.rand(me.time.frame%60)</code> to set random values into a parameter.</p>","tags":["TouchDesigner","TD/Scripting"]},{"location":"topics/TouchDesigner/SCRIPTING/TouchSpecificScripting/","title":"Specifc Scripting for Touch","text":"<p>Here is a collection of scripting code which can be util for your projects:</p> <p>Framerate - <code>me.rate</code></p> <p>Get index of a value - <code>op('constant1').chan(0).index</code></p> <p>Get name of operator - <code>op('myName').name</code></p> <p>Get number of operator - <code>op('name1').digit</code></p> <p>Get index of parent - <code>me.parent().digits</code></p>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/TouchSpecificScripting/#ops","title":"OPs","text":"<p>Count Inputs of Operators - <code>len(op('switch1').inputs)</code></p>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SCRIPTING/TouchSpecificScripting/#chop","title":"CHOP","text":"<p>Numbers of samples of a CHOP - <code>op('name1').numSamples</code></p>","tags":["TouchDesigner","TD/Scripting","Python"]},{"location":"topics/TouchDesigner/SOPS/","title":"SOPs","text":"<p>Welcome in SOPs Land!</p>"},{"location":"topics/TouchDesigner/SOPS/#last-added","title":"Last added","text":"<p>Create Point For Particle System</p> <p>Distriburte Points At Random Position On Surface Or Volume</p> <p>Improve Performance Instancing</p> <p>Cut Polygon with ClipSOP</p> <p>Particles Move Back to Source</p> <p>DisplaceGridWithPatternCHOP</p> <p>Spread Copies Evenly Around 360\u00b0 in CopySOP</p> <p>Cut Parts Shape with ClipSOP</p> <p>Distribute Shapes Along Path with SweepSOP</p> <p>Convert 2D Image Intro 3D Shape</p> <p>Skinned Shape From Lines</p> <p>Displace fixed SOP Surface with SpringSOP</p> <p>Displace SOP Only in XY directions</p> <p>Creating Merging Metaballs</p> <p>Changing the Order of Points with SortSOP</p> <p>Creating Cutout Shapes with BoolSOP</p> <p>Move Instanced Shapes on Spiral Path with CHOPs</p> <p>Manipulate SOP with DATA</p> <p>Create Polygon Look for SphereSOP</p> <p>Import Specific Geo from FBX</p> <p>Delete Copy of CopySOP With Group</p> <p>Merge Lines Into Surface</p> <p>Displace SOP By CHOP Values</p> <p>Rotate Camera On CircleSOP</p> <p>Displace Grid By MagnetSOOP</p>"},{"location":"topics/TouchDesigner/SOPS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/SOPS/ChangeOrderPointsSortSOP/","title":"ChangeOrderPointsSortSOP","text":"","tags":["TD/SOP","TD/Copy","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ChangeOrderPointsSortSOP/#changing-the-order-of-points-with-sortsop","title":"Changing the Order of Points with SortSOP","text":"<p>We can change the order of the points of a Shape by resorting the points with a <code>sortSOP</code>. This operator often gets used for particle systems so the particles appear more randomly and less predictable. </p> <p>Download </p>","tags":["TD/SOP","TD/Copy","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/Convert2DImage3Dshape/","title":"Convert2DImage3Dshape","text":"","tags":["TD/SOP","TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/Convert2DImage3Dshape/#convert-2d-image-into-3d-shape","title":"Convert 2D Image into 3D Shape","text":"<p>To transform your 2D image into a 3D shape we can use a <code>TraceSOP</code> and then extrude it with the <code>ExtrudeSOP</code> into the 3rd dimension. To be able to properly apply textures and lighting later you need to add a <code>Attribute CreateSOP</code> and set <code>compute normals</code> and <code>compute tangents</code>ON. </p> <p>With <code>depth scale</code> parameter in the <code>extrudeSOP</code> can we define the depth of the Shape.</p> <p>Download </p>","tags":["TD/SOP","TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CreatePointForParticleSystem/","title":"CreatePointForParticleSystem","text":"","tags":["TD","TD/SOP"]},{"location":"topics/TouchDesigner/SOPS/CreatePointForParticleSystem/#create-point-for-particle-system","title":"Create Point For Particle System","text":"<p>To make our Particle System efficient and only render a point per particle we can use an <code>AddSOP</code>, activate Add Points and convert the point in an <code>ConvertSOP</code> to Particles Per Point. </p> <p>We then can use a <code>LineMAT</code> with Draw Lines deactivated and Draw Points activated. </p> <p></p>","tags":["TD","TD/SOP"]},{"location":"topics/TouchDesigner/SOPS/CreatingCutoutShapes/","title":"CreatingCutoutShapes","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CreatingCutoutShapes/#creating-cutout-shapes-with-boolsop","title":"Creating Cutout Shapes with BoolSOP","text":"<p>When we want to create Cutout Shapes in TouchDesigner we can use a <code>BoolSOP</code> to decide how the input Shapes get combined.  We have multiple Options for the combination of the shapes: - <code>Union</code>: Combining two 3D objects into one - <code>Intersect</code>: Keeping only the overlapping parts of objects - <code>A minus B</code> : Second shapes gets cutout of teh first shape - <code>B minus A</code>: Only the parts that aren't overlapping create the geometry - <code>A/B Edge</code>: Where the edges of both geos greate geometry</p> <p>Download </p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CreatingMergingMetaballs/","title":"CreatingMergingMetaballs","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CreatingMergingMetaballs/#creating-merging-metaballs","title":"Creating Merging Metaballs","text":"<p>To create merging metaballs we transform multiple instances of the <code>metaballSOP</code> and then merge them togeth in a <code>mergeSOP</code>.</p> <p>Download </p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CutPartsShapewithClipSOP/","title":"CutPartsShapewithClipSOP","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CutPartsShapewithClipSOP/#cut-parts-of-shape-with-clip-sop","title":"Cut parts of Shape with Clip SOP","text":"<p>The <code>ClipSOP</code> cuts of parts of the input geometry. It uses a plane to define the surface where to cut of the geometry. The input shape for the <code>ClipSOP</code> needs to be polygon.</p> <p>Download </p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CutPolygonSOPWithClip/","title":"CutPolygonSOPWithClip","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/CutPolygonSOPWithClip/#cut-polygon-sop-with-clipsop","title":"Cut Polygon SOP with ClipSOP","text":"<p>We can use a <code>ClipSOP</code> to cut a SOP that has Polygon as it's primitive type.</p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DeleteCopyWithGroup/","title":"DeleteCopyWithGroup","text":"","tags":["TD/SOP","TD/Copy","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DeleteCopyWithGroup/#delete-copy-of-copssop-with-group","title":"Delete Copy of CopsSOP with Group","text":"<p>When we want to delete a specific copy of the <code>copySOP</code> Operator we can output the single copy as a group with Create Output Groups.  In the <code>deleteSOP</code> we then can select the specific group or multiple groups.</p> <p></p> <p>Download </p>","tags":["TD/SOP","TD/Copy","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceFixedSOPSurfaceSpringSOP/","title":"DisplaceFixedSOPSurfaceSpringSOP","text":"","tags":["TD/SOP","TD/Noise","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceFixedSOPSurfaceSpringSOP/#displace-fixed-sop-surface-with-springsop","title":"Displace fixed SOP Surface with SpringSOP","text":"<p>When you want to deform the interior points of a SOP while maintaining the position of its outer edges, we can use GroupSOP and SpringSOP. Here's a step-by-step approach:</p> <ul> <li> <p>Create a Point Group Use the <code>GroupSOP</code> to collect the points you want to fix. Set the <code>Group Entity</code> to points.</p> </li> <li> <p>Select Interior Points Use a bounding box to select all points except those on the outer edge of the shape.</p> </li> <li> <p>Invert the Group In the Combine category, invert the group by setting <code>NOT</code> and assigning a new name like \"dontmove\".</p> </li> <li> <p>Apply Fixed Points in SpringSOP In the SpringSOP, navigate to the Nodes category and set the newly created group for the <code>Set Fixed Points</code> parameter. </p> </li> </ul> <p>This technique allows you to create controlled deformations while preserving the original boundary of your surface, giving you precise control over geometric transformations.</p> <p>Download </p>","tags":["TD/SOP","TD/Noise","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceGridMagnetSOP/","title":"DisplaceGridMagnetSOP","text":"","tags":["TD/SOP","TD/GRID","TD/DISPLACE","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceGridMagnetSOP/#displace-grid-with-magnetsop","title":"Displace Grid With MagnetSOP","text":"<p>To displace specific parts or vertices of SOP shapes, you can use a combination of the <code>MetaballSOP</code>and the <code>ForceSOP</code>. The <code>MetaballSOP</code> acts as a magnet, and by adjusting its position, you determine the area of influence on the base shape. When connected to the <code>ForceSOP</code>, the vertices in the specified area are displaced according to the Metaball's position and strength, creating a controlled deformation effect.</p> <p>Download </p>","tags":["TD/SOP","TD/GRID","TD/DISPLACE","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceGridMagnetSOP/#creative-tangent","title":"Creative Tangent","text":"<p>An interesting effect happens when we add a <code>SphereSOP</code> with a <code>noiseSOP</code> at the beginning of the <code>metaballSOP</code>.  It generates a more fluent and organic displace then just a static surface.</p> <p></p>","tags":["TD/SOP","TD/GRID","TD/DISPLACE","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceGridWithPatternCHOP/","title":"DisplaceGridWithPatternCHOP","text":"","tags":["TD/SOP","TD/GRIDSOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceGridWithPatternCHOP/#displace-gridsop-points-with-patternchop","title":"Displace GridSOP Points with PatternCHOP","text":"<p>For example if you want to  randomly displace the points of your <code>GridSOP</code> in only one direction we can convert it into CHOP data and then use a <code>PatternCHOP</code> to add the random values to a specific direction.</p> <p>Download </p>","tags":["TD/SOP","TD/GRIDSOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceSOPByCHOPValues/","title":"DisplaceSOPByCHOPValues","text":"","tags":["TD/SOP","TD/CHOP","TD/Displace"]},{"location":"topics/TouchDesigner/SOPS/DisplaceSOPByCHOPValues/#displace-sop-by-chop-values","title":"Displace SOP By CHOP Values","text":"<p>If you want to displace your SOP Shape by for example audio or values from a sensor or interaction input you can convert the SOP Values into a CHOP and then for example crossfade the original values with your own CHOP values.</p> <p>Download </p>","tags":["TD/SOP","TD/CHOP","TD/Displace"]},{"location":"topics/TouchDesigner/SOPS/DisplaceSOPOnlyXY/","title":"DisplaceSOPOnlyXY","text":"","tags":["TD/SOP","TD/GroupSOP","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DisplaceSOPOnlyXY/#displace-sop-only-in-xy-directions","title":"Displace SOP Only in XY directions","text":"<p>When we apply a <code>noiseSOP</code> to a Shape the <code>noiseSOP</code> displaces the vertex of the shape in the X,Y and Z direction. In some cases we just want to displace the Vertex Points for example only in the XY direction. To achieve that we  can convert the SOP into a CHOP and then reassign the channels of the SOP in the <code>chopToSop</code> to the Normals <code>N</code>.</p> <p>Download </p>","tags":["TD/SOP","TD/GroupSOP","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DistributePointsAtRandomPosition/","title":"DistributePointsAtRandomPosition","text":"","tags":["TD","TD/SOP"]},{"location":"topics/TouchDesigner/SOPS/DistributePointsAtRandomPosition/#distribute-points-at-random-position","title":"Distribute Points At Random Position","text":"<p>We can use a <code>SprinkleSOP</code> to distribute the points randomly on the surface or the volume of a source geometry.</p>","tags":["TD","TD/SOP"]},{"location":"topics/TouchDesigner/SOPS/DistributeShapesAlongPathSweepSOP/","title":"DistributeShapesAlongPathSweepSOP","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/DistributeShapesAlongPathSweepSOP/#distribute-shapes-along-path-with-sweepsop","title":"Distribute Shapes Along Path with SweepSOP","text":"<p>We can use a <code>SweepSOP</code> to distribute shapes along a path. The first input for the <code>SweepSOP</code> is the shape that you want to instantiate on the path. The seconds input defines the path.</p> <p>Download </p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ImportSpecificGeoFromFBX/","title":"ImportSpecificGeoFromFBX","text":"","tags":["TD/SOP","TouchDesigner","TD/Import"]},{"location":"topics/TouchDesigner/SOPS/ImportSpecificGeoFromFBX/#import-specific-geo-from-fbx","title":"Import Specific Geo from FBX","text":"<p>When we import FBX into TouchDesigner they can contain large and complex scenes with multiple Geometries. If you just want to select a specific geometry for your project you can use the helper SOP <code>ImportSelect</code>. This let's you pick which Geometry you want to select out of the complex FBX.</p>","tags":["TD/SOP","TouchDesigner","TD/Import"]},{"location":"topics/TouchDesigner/SOPS/ImprovePerformanceInstancing/","title":"Improve Performance Instancing","text":"<p>When you are instancing SOP shapes it turn of <code>GEO</code> viewer so TouchDesigner doesn't need to render and process instances in the Operator viewer.</p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ManipulateSOPwithData/","title":"ManipulateSOPwithData","text":"","tags":["TD/SOP","TD/DAT","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ManipulateSOPwithData/#manipulate-sop-with-data","title":"Manipulate SOP with Data","text":"<p>We can use Table Data to dynamically modify manipulate the Shape of a SOP. The basic idea is to convert the SOP into tabular data, manipulate that data and then converting it back into SOP. For that you convert the <code>SOP</code> with <code>SOP to</code> into data. To manipulate the data we use an <code>evaluateDAT</code> and in the expression DAT we reference a table with the displace values. An idea is to take the already existing data from the sop and add displacement value from a \"displaceTable\". <pre><code>me.inputCell me.inputCell ...\nme.inputCell me.inputCell + op('displaceTable')[me.inputRow,0]\n</code></pre> Then convert the data back into SOP.</p> <p>Download </p>","tags":["TD/SOP","TD/DAT","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/MergeLinesIntoSurface/","title":"MergeLinesIntoSurface","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/MergeLinesIntoSurface/#merge-lines-into-a-surface-with-skinsop","title":"Merge Lines into a Surface with SkinSOP","text":"<p>If you want to use <code>lineSOP</code> to create a surface you can combine the lines in a <code>mergeSOP</code> and then create a group of points in <code>groupSOP</code>. With the <code>skinSOP</code> you create the surface. To be able to show  some textures on the new surface you should add a <code>textureSOP</code> before you go into the <code>GEO</code>.</p> <p>Download </p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/MoveInstancedShapesOnSpiralPath/","title":"MoveInstancedShapesOnSpiralPath","text":"","tags":["TD/SOP","TD/CHOP","TD/Instancing","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/MoveInstancedShapesOnSpiralPath/#move-instanced-shapes-on-spiral-path-with-chops","title":"Move Instanced Shapes on Spiral Path with CHOPs","text":"<p>To move instanced shapes on a spiral path we can use three <code>PatternCHOP</code> one for each position value.  With sine and cosine for the <code>tx</code>and <code>ty</code> or <code>tz</code> values we can create a two dimensional circular shape. By adding a <code>PatternCHOP</code> with Type <code>Ramp</code> for the 3rd dimension we can stretch it out into a spiral path.</p> <p>Changing the <code>amplitude</code> of the sine and cosine <code>PatternCHOP</code> we can change the diameter of the spiral.  The <code>Number of Circles</code> defines the frequency / the amount of rounds.</p> <p>Download </p>","tags":["TD/SOP","TD/CHOP","TD/Instancing","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/","title":"Particle System","text":"<p>In a Particle System(PS) points get spawned and moved to a position over some time till they return to there initial position. Then this will be repeated over time.</p> <p>In TouchDesigner we can represent the position of one particle as RGB colors.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#forces","title":"Forces","text":"<p>In a PS we want to apply forces to the particles so they can move from there initial position to a new position. Initial Position -&gt; Forces -&gt; New Position</p> <p>Added with a Feedback Loop New Position -&gt; Forces -&gt; New Position -&gt; Forces we can create a dynamic system.</p> <p>This can be created in TD by adding a small amount of color added to the image of the previous frame.</p> <p>If we add the same amount of force every frame we get a straight moving of the position. </p> <p>If we add some noise we can create more random movement of each single particle.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#lifetime","title":"Lifetime","text":"<p>To assure that your particle is not moving outside of the view it makes sense to add some lifetime to the particle so it dies after a time and a new particle at the initial position gets emitted. We can achieve that by setting a switch pixel that basically says: As long as I have the color white forces get applied. If I'm black the particle \"dies\" or rather goes back to initial position</p> <p>If you want the particles to die and reset all at the same time this switch is enough. But to create more random lifetime for all particles we can use a lifetime texture in which every pixel defines the length of the lifetime of the particle. Then on each frame the particle gets older and the lifetime smaller. When the lifetime is zero the particle dies and the lifetime get set back to the life duration time.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#masking","title":"Masking","text":"<p>Instead of applying forces and effects to all particles we also can mask the effect and apply them only to specific particles or apply different forces to different particles.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#data","title":"Data","text":"<p>To make the PS as efficient as possible it makes sense to use TOPs for the information of particle system</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#convert-shape-into-top-data","title":"Convert Shape into TOP data","text":"<p>To convert a shape into TOP data we first have to convert it from SOP to CHOP and then from CHOP to TOP. In the <code>ChopToTop</code> for Image Layout we have to set Fit to Square.</p> <p></p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#rotation","title":"Rotation","text":"<p>If you want to orient your particles along the path they are moving, we can compare current position with the position of the last frame and then subtract these. This gives us the vector size/magnitude of the vector which is the direction of the vector. We then can use this value as the rotate to value.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticleSystem/#scale","title":"Scale","text":"<p>We can use the magnitude. The greater the distances between the frames means the point is moving faster the longer the size fill be</p> <p>In particles we often also define the size of the particle over the life of the particle.</p>","tags":["TD","TD/TECHNIQUES","TD/ParticleSystem","ParticleSystem"]},{"location":"topics/TouchDesigner/SOPS/ParticlesMoveBackToSource/","title":"ParticlesMoveBackToSource","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/ParticlesMoveBackToSource/#particles-move-back-to-source-shape","title":"Particles Move Back To Source Shape","text":"<p>If you want to emit particles from a shape and then let the particles move back to the same shape plug the source shape into <code>ParticleSource</code> and <code>SurfaceAttractor</code>.</p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/PointClouds/","title":"Loading Point Cloud file","text":"<p>With a <code>PointFileIn</code> we can load in .ply files that contain PointCloud data. There we can assign the colors of the file to parameters like x,y,z but also the colors of the point cloud.</p> <p>With <code>PointTransform</code> we apply transforms to the point data of a Point Cloud.</p>","tags":["TD/SOP","TouchDesigner","TIL"]},{"location":"topics/TouchDesigner/SOPS/PolygonLookSOP/","title":"PolygonLookSOP","text":"","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/PolygonLookSOP/#create-polygon-look-for-spheresop","title":"Create Polygon Look for SphereSOP","text":"<p>If you want to create a polygon for your Sphere you can set Mesh of <code>SphereSOP</code> to Polygon and then add a <code>facetSOP</code>. In the <code>facetSOP</code> you activate the first Unique Points and the last Compute Normals.</p> <p></p>","tags":["TD/SOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/RotateCameraOnCirlceSOP/","title":"RotateCameraOnCirlceSOP","text":"","tags":["TD/SOP","TD/CAMERA","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/RotateCameraOnCirlceSOP/#rotate-camera-on-circlesop","title":"Rotate Camera On CircleSOP","text":"<p>Download </p>","tags":["TD/SOP","TD/CAMERA","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/SOPScripting/","title":"Various SOP Scripting References","text":"<p><code>op('SOP').numPoints</code> - Get Amount of Points of SOP</p> <p><code>op('grid1').points[0]</code> - Access single point of SOP - This acceses the tuple of the first point <code>0.0:(posx posy posz)</code></p>","tags":["TD/SOP","TD/Scripting"]},{"location":"topics/TouchDesigner/SOPS/SkinnedShapeFromLines/","title":"SkinnedShapeFromLines","text":"","tags":["TD/SOP","TD/Noise","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/SkinnedShapeFromLines/#skinned-shape-from-lines","title":"Skinned Shape From Lines","text":"<p>To create a skinned shape from lines in TouchDesigner, you'll typically use a combination of <code>LineSOP</code>, <code>MergeSOP</code> and <code>SkinSOP</code>.</p> <ol> <li>Create Lines SOP</li> <li>Define your base lines that will form the skin</li> <li> <p>Ensure lines are appropriately positioned and oriented</p> </li> <li> <p>Combine Lines</p> </li> <li> <p>Combine your Lines in a <code>MergeSOP</code></p> </li> <li> <p>Create Skin</p> </li> <li>Plug the <code>MergeSOP</code> into a <code>SkinSOP</code>. This create the surface between the lines.</li> </ol> <p>Download </p>","tags":["TD/SOP","TD/Noise","TD/Displace","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/SpreadCopiesEvenlyAround360CopySOP/","title":"SpreadCopiesEvenlyAround360CopySOP","text":"","tags":["TD/SOP","TD/COPYSOP","TouchDesigner"]},{"location":"topics/TouchDesigner/SOPS/SpreadCopiesEvenlyAround360CopySOP/#rotate-copies-evenly-around-360-in-copysop","title":"Rotate Copies evenly around 360\u00b0 in CopySOP","text":"<p>If you want to rotate the copies evenly around 360\u00b0 you can divide <code>360</code> by the number of copies <code>me.par.nyc</code>.</p> <p>Download </p>","tags":["TD/SOP","TD/COPYSOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/","title":"Techniques","text":"<p>Here I'm gonna collect some fun and interesting techniques</p>"},{"location":"topics/TouchDesigner/TECHNIQUES/#latest-added","title":"Latest Added","text":"<p>Art-net</p> <p>Automatically chain selected nodes</p> <p>Show Operator in UI</p> <p>Animate Over Timeline</p> <p>Mapping</p> <p>Corner Pinning with StonerCOMP</p> <p>Set Custom FrameRate</p> <p>Change the Seed with Clock</p>"},{"location":"topics/TouchDesigner/TECHNIQUES/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/TECHNIQUES/AnimteOverTimelineLength/","title":"Animate over timeline length","text":"<p>If you want to animate something over the length of the timeline you take a <code>TimelineCHOP</code> and divide <code>rangeEnd</code> with <code>currentFrame</code>. Then you get a value moving from 0 to 1.</p>","tags":["TD/CHOP","TD/Animation","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/AutoChainNotes/","title":"Automatically Chain Selected Nodes","text":"<p>By holding down <code>Shift</code> while selecting the nodes we want we can automatically chain the selected nodes.</p>","tags":["TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/CallingAPI/","title":"Calling an API from touchdesigner","text":"","tags":["TD/API"]},{"location":"topics/TouchDesigner/TECHNIQUES/CallingAPI/#call-chatgpt-via-touch","title":"Call ChatGPT via Touch","text":"<ul> <li>Create an Account on Open ai</li> <li>Create an API key</li> <li>pip install openai (python library)</li> <li>setup touchdesigner to work with external python libraries</li> <li>Install openai library in terminal - <code>pip install openai</code></li> <li>link python to python modul path in preferences in touchd</li> </ul> <p>Create a base with the parameters you want to use</p> <p>Create a textDat with your api key </p> <p>Use parameter execute to execute the code</p>","tags":["TD/API"]},{"location":"topics/TouchDesigner/TECHNIQUES/ChangeSeedWithClock/","title":"ChangeSeedWithClock","text":"","tags":["TD/CHOP","TD/NOISE","TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/ChangeSeedWithClock/#change-the-seed-with-a-clockchop","title":"Change the Seed With a ClockCHOP","text":"<p>Nothing fancy but a little trick to get some rhythmic variation</p> <p>Download </p>","tags":["TD/CHOP","TD/NOISE","TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/Replicator/","title":"Replicator","text":"","tags":["TD/UI","TD/COMP","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/SetCustomFrameRateProcess/","title":"SetCustomFrameRateProcess","text":"","tags":["TD/BASE","TD/Framerate","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/SetCustomFrameRateProcess/#set-custom-framerate-for-process-in-basecomp","title":"Set custom Framerate for process in BaseCOMP","text":"<p>When you have certain processes that for example doesn't need to be run with 60 Frames per Second (FPS) you can set for this specific process your own framerate. </p> <p>First click on the I field to <code>Run Component Time Independently</code>. </p> <p>For that create a new Base. Make a left click on that base and click <code>add component time</code>.   Then navigate inside of the base and into  the <code>local</code> OP. There in the <code>time</code> OP you can set the value <code>rate</code> to the framerate you need.</p> <p>DownloadFile</p>","tags":["TD/BASE","TD/Framerate","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/ShowOperatorInUI/","title":"Show Operator in UI","text":"<p>To show an operator in your UI you can use a <code>OpViewerCOMP</code></p>","tags":["TD/UI","TD/COMP","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/UsingPipPythonLibraries/","title":"Working with Python Libraries in TouchDesigner","text":"","tags":["TD/Python"]},{"location":"topics/TouchDesigner/TECHNIQUES/UsingPipPythonLibraries/#installation","title":"Installation","text":"<p>Get TD-pip package from alphaMoonbase https://olib.amb-service.net/component/td-pip</p> <p>Drop it into your project.</p> <p>Execute Dat - reference operator <code>svg = op('td_pip').Import_Module('packageName)</code>  will install library directly into the project folder</p> <p>Now let's install the pyautogui package in the parameter window. Type in the name of the package and then click Install <code>Pulse</code>. Afterwards you can check if everything got installed by pulsing Check. </p> <p>After we installed it we can execute some pyautogui code to simulate interactions with the computer.</p> <p>We can use a <code>chopexecuteDAT</code> and trigger the pyautogui code when we get a true input. </p> <p>We probably want to store the current position of the cursor to bring the cursor back the original psoition after the execution <code>currentPos = pyautogui.position</code></p> <p>we then can move the cursor to a new position with <code>pyautogui.moveTo(newPosX,newPosY)</code></p> <p>To execute a click action we can call <code>pyautogui.click()</code> method.</p> <p>If we want to do multiple actions after each other it makes sense to add a small sleep timer For that we need to import <code>time</code> module.</p> <p>We then can write after the *click<code>write</code>time.sleep(0.01)`</p> <p>If we then for example want to press a button we can use <code>pyautogui.press('s')</code></p> <p>If you want to hold down a key for longer time you also can use <code>.keyDown</code> and <code>.keyUp</code> with a <code>time.sleep(timeToHold)</code></p> <pre><code>pyautogui.keyDown('s')\ntime.sleep(2)\ntime.keyUp('s')\n</code></pre>","tags":["TD/Python"]},{"location":"topics/TouchDesigner/TECHNIQUES/LIGHTING/ArtNet/","title":"Art-Net","text":"<p>Art-Net is a protocol that transmits DMX512 lighting data over ethernet networks.</p> <p>Instead of using DMX cables, it sends data as UDP packets over ethernet infrastructure with switchers, routers</p> <p>A single art-net network can carry up to 32,768 universes of dmx data.</p> <p>Art-Net can achieve refresh rates of 100+ hz depending on network conditions.</p> <p>Art-Net allows two way communication, to send status information back to the controllers.</p>","tags":["TD/Lights","DMX","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/LIGHTING/_DMX/","title":"DMX","text":"<p>Enttec dmx usb pro mk2 device to go from pc to dmx channels.</p> <p>One dmx channel can support on universe. </p> <p>DMX Pro Manager helps to install drivers </p> <p>d001 - d512 for the dmx channels</p> <p>d001 - dmx first channel</p> <p>One light requires a certain amount of channels - </p> <p>Each channel can except values from 0 to 255</p> <p>So we send 8 channels of information with values from 0 to 255</p> <p>Some channels for functions Some channel for dimmer and some channels for colors</p> <p>In TouchDesigner we use <code>DMXOut</code> with packet for sample and select the interface.</p> <p>You also can convert a channel into a universe and then send only the channel of the universe </p> <p><code>DMXOut</code> expects values from 0 to 255. </p> <p>DMX Universe only operate to maximum 44 frames per second</p> <p>DMX is only one way communication</p>","tags":["TD/Lights","DMX","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/Mapping/CornerPinningInterface/","title":"Cornerpinning Output via Interface with StonerCOMP","text":"<p>TD has the <code>StonerCOMP</code> in the palette. This allows you to adjust your mapping and to corner pin the output via an interface.</p>","tags":["TD/COMP","TD/Mapping","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/Mapping/Mapping/","title":"Mapping","text":"<p>There are multiple tools to do mapping in TouchDesigner. We can find them in the palette.</p>","tags":["TD/BASE","TD/Framerate","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/Mapping/Mapping/#cam-snapper","title":"Cam Snapper","text":"<p>The <code>camSchnapper</code> tries to calculate the position of the projector in relation to the model. Click on <code>Open Main Window</code> in the parameter window..</p> <p>Rotate the view - <code>ctrl + l mouse</code> Move the view - <code>ctrl + r mouse</code> Home view - <code>h</code></p> <p>In the window you select points on the virtual model which will match with real physical model. Then you use the output view and move them according to the real model.</p>","tags":["TD/BASE","TD/Framerate","TouchDesigner"]},{"location":"topics/TouchDesigner/TECHNIQUES/Mapping/Mapping/#kantan-mapper","title":"Kantan Mapper","text":"<p>Let's you map textures on shapes e.g. tape mapping.</p> <p>Pick quad Pick freeform Under <code>texture</code> we can drag teh top we want on that shape. Or drag the texture directly on the shape. Click on x to show it</p> <p>On <code>edit texture</code> you can move around the texture for the shape</p> <p>Under the <code>grid</code> you can create a grit wand warp the grit to your liking.</p> <p>For bigger projects you can use Kantan uv help comp. There you take second output of kantan helper.</p>","tags":["TD/BASE","TD/Framerate","TouchDesigner"]},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/","title":"TOPS","text":"<p>Welcome in TOPs Land Texture Gallery!</p>"},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/#last-added","title":"Last added","text":"<p>Grid Effect</p> <p>Grain Effect</p>"},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/GrainEffect/","title":"GrainEffect","text":"","tags":["TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/GrainEffect/#grain-effect","title":"Grain Effect","text":"<p>DownloadFile</p>","tags":["TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/Grid/","title":"Grid","text":"","tags":["TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TEXTURE_GALLERY/Grid/#grid-effect","title":"Grid Effect","text":"<p>DownloadFile</p>","tags":["TD/TOP","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/","title":"TOPS","text":"<p>Welcome in TOPs Land!</p>"},{"location":"topics/TouchDesigner/TOPS/#last-added","title":"Last added","text":"<p>Convert Single Channel TOP into RGBA TOP</p> <p>Play Video Slow</p> <p>MovieFileIn</p> <p>Convert RampTOP into Lines</p> <p>Simple Movement Tracker</p> <p>Repeat Image via RemapTOP</p> <p>Output NoiseTOP with Transparency</p> <p>Access Pixel Value of TOP via Script</p> <p>Defining Image if MovieFileInTop has Loading Error</p> <p>Rendering Multiple Screens</p> <p>Movie Codecs</p> <p>Access Camera Depth in TOP</p> <p>TOP Scripting</p> <p>Higher Quality Feedback</p> <p>Apply Effect To Specific Channels</p> <p>Change Values Locked TOP</p> <p>Image Instance On Grid</p> <p>Set Text Top From TableDAT</p>"},{"location":"topics/TouchDesigner/TOPS/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/TouchDesigner/TOPS/AccessCameraDepthTop/","title":"AccessCameraDepthTop","text":"","tags":["TD/TOPS","TD/Camera","TD/3D"]},{"location":"topics/TouchDesigner/TOPS/AccessCameraDepthTop/#access-depth-information-from-a-3d-camera-in-top","title":"Access Depth Information from a 3D camera in TOP","text":"<p>To create a focus effect where closer parts of the scene appear sharper and more distant parts are blurred, you can use the <code>DepthTOP</code> in combination with a <code>LumaBlurTOP</code>. For the settings in the <code>DepthTOP</code> set Pixel Format <code>8-bit fixed texture</code> , Depth Space <code>Rearrange From Cam Space</code> and then play with the Range to value.</p> <p></p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/Camera","TD/3D"]},{"location":"topics/TouchDesigner/TOPS/AccessPixelValueTOP/","title":"AccessPixelValueTOP","text":"","tags":["TD/TOPS","TD/Effects"]},{"location":"topics/TouchDesigner/TOPS/AccessPixelValueTOP/#access-pixel-colors-of-top-via-script","title":"Access Pixel Colors of TOP via Script","text":"<p>If we want to access the Color Values of a Pixel in a TOP we can use Scripting. To access the complete RGBA Value of the first pixel we can use <code>op('noise1').sample(x=0,y=0)</code>. To only access a specific color for example Red we can add the index behind the example above. <code>op('noise1').sample(x=0,y=0)[0]</code></p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/Effects"]},{"location":"topics/TouchDesigner/TOPS/ApplyEffectForOnlySpecificChannels/","title":"ApplyEffectForOnlySpecificChannels","text":"","tags":["TD/TOPS","TD/Effects"]},{"location":"topics/TouchDesigner/TOPS/ApplyEffectForOnlySpecificChannels/#apply-effects-for-certain-channels","title":"Apply Effects for Certain Channels","text":"<p>If you want some effects just applied to certain color channels you can select the channel in the common tab of the operator under <code>channel mask</code>.</p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/Effects"]},{"location":"topics/TouchDesigner/TOPS/ChangeValuesLockedTOP/","title":"ChangeValuesLockedTOP","text":"","tags":["TD/TOPS","TD/Execute"]},{"location":"topics/TouchDesigner/TOPS/ChangeValuesLockedTOP/#change-values-for-locked-visuals","title":"Change values for locked visuals","text":"<p>If you want to change values of locked TOP with for example a slider, you can, when the value changes, unlock the TOP and then lock it after you assigned the value.</p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/Execute"]},{"location":"topics/TouchDesigner/TOPS/ConvertRampIntoLines/","title":"ConvertRampIntoLines","text":"","tags":["TD/TOPS"]},{"location":"topics/TouchDesigner/TOPS/ConvertRampIntoLines/#convert-ramptop-into-lines","title":"Convert RampTOP into Lines","text":"<p>Normally, the <code>RampTOP</code> shows smooth color transitions between different colors. If you want to change your <code>RampTOP</code> from linear interpolated values between the colors into lines we can use <code>step</code> for the <code>Interpolate Notches</code> value. This creates lines instead of gradients between the values.</p> <p>DownloadFile</p>","tags":["TD/TOPS"]},{"location":"topics/TouchDesigner/TOPS/ConvertSingleChannelTopIntoMultiChannel/","title":"ConvertSingleChannelTopIntoMultiChannel","text":"","tags":["TD/TOPS","TD/CHOPS"]},{"location":"topics/TouchDesigner/TOPS/ConvertSingleChannelTopIntoMultiChannel/#convert-single-channel-top-into-rgba-top","title":"Convert Single Channel TOP into RGBA TOP","text":"<p>When we convert a <code>NoiseCHOP</code> into a <code>TOP</code> we just get a mono image. To convert it into a rgba image we can connect <code>chopTo</code> with a <code>constantCHOP</code> and set <code>Color</code> to black, <code>Output/Operation</code> to Add and set <code>Pixel Format</code> to RGBA.</p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/CHOPS"]},{"location":"topics/TouchDesigner/TOPS/DefiningLoadingErrorImage/","title":"DefiningLoadingErrorImage","text":"","tags":["TD/TOPS","TD/Error","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/DefiningLoadingErrorImage/#defining-image-if-moviefileintop-has-loading-error","title":"Defining Image if MovieFileInTop has Loading Error","text":"<p>Normally TouchDesigner shows a black image with a red rectangle on the bottom to show that the <code>moviefileinTOP</code> has a loading error.  But we can change that image to transparent by navigation to <code>Image</code> in the parameter window and setting <code>Loading/Error Image</code> to <code>Zero</code>.</p>","tags":["TD/TOPS","TD/Error","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/HigherQualityFeedback/","title":"HigherQualityFeedback","text":"","tags":["TD/TOPS","TD/Feedback","TD/Optimisation"]},{"location":"topics/TouchDesigner/TOPS/HigherQualityFeedback/#higher-quality-feedback","title":"Higher Quality Feedback","text":"<p>If you want to raise the quality of your feedback effects it can make sense to set the pixel format to 16bit instead of 8bit default settings. As you can see in the images and in the file below the difference is quite strong. The disadvantage is that it needs more performance from the system. So as usual the balance between performance and visual output is important.</p> <p></p> <p>DownloadFile</p>","tags":["TD/TOPS","TD/Feedback","TD/Optimisation"]},{"location":"topics/TouchDesigner/TOPS/ImageInstancingOnGrid/","title":"ImageInstancingOnGrid","text":"","tags":["TD/Instancing","TD/TOPS","TD/Grid"]},{"location":"topics/TouchDesigner/TOPS/ImageInstancingOnGrid/#image-instancing-on-grid","title":"Image Instancing On Grid","text":"<p>The steps we need to do to accomplish this are: - Create shape where Texture gets instanced on</p> <p></p> <ul> <li>Create Grid that position the shapes and setup instancing in Geo</li> </ul> <p></p> <ul> <li>Store amount of instances</li> </ul> <p></p> <ul> <li>Collect images that you want to instance</li> </ul> <p></p> <ul> <li>Assign material to Geo</li> </ul> <p></p> <ul> <li>Set Index in Geo</li> </ul> <p>DownloadFile</p>","tags":["TD/Instancing","TD/TOPS","TD/Grid"]},{"location":"topics/TouchDesigner/TOPS/MovieCodecs/","title":"MovieCodecs","text":"","tags":["TD/TOPS","TD/Rendering"]},{"location":"topics/TouchDesigner/TOPS/MovieCodecs/#movie-codecs-for-file-output","title":"Movie Codecs for File Output","text":"<p>Here some information about the different Codecs you can choose in the <code>MovieFileOutTOP</code>: <code>Animation</code>- Almost perfect quality at huge file size</p> <p><code>Photo Motion JPG</code>- QuickTime Format - medium quality</p> <p><code>H.264</code> - Encoded in Realtime when NVIDIA Graphicscard - better quality</p> <p><code>GoPro Cineform</code> - Like ProRes for Windows - Optimised for working with editing software like after effects</p> <p><code>HAP</code> - For realtime world - Allows to playback big videofiles because it works on the GPU; As soon as you play more than 3 movie files pick <code>HAP</code>. It doesnt't drop the framerate so much because graficscard handles <code>HAP</code> Videos in parallel. </p> <p><code>HAP Q</code> - Better quality HAP</p> <p>Generally avoid recording videos in Realtime - deactivate <code>Realtime</code> on the top of UI</p>","tags":["TD/TOPS","TD/Rendering"]},{"location":"topics/TouchDesigner/TOPS/MovieFileIn/","title":"MovieFileIn","text":"<p>Playmodes <code>Sequential</code> - Movie plays without considering changings in timeline - always going forward <code>Specific index</code> - define which index of frames get played <code>Locked to timeline</code> - Video frames get played according to timeline</p>","tags":["TD/TOPS"]},{"location":"topics/TouchDesigner/TOPS/OutputNoiseTOPTransparency/","title":"OutputNoiseTOPTransparency","text":"","tags":["TD/TOPS","TD/Noise","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/OutputNoiseTOPTransparency/#output-noisetop-with-transparency","title":"Output NoiseTOP with Transparency","text":"<p>To create a transparent background for a <code>NoiseTOP</code> texture instead of a black one, navigate to the Output section of the TOP parameters and set the Alpha value to zero.</p>","tags":["TD/TOPS","TD/Noise","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/PlayVideoSlow/","title":"Play Video with Slow Speed","text":"<p>To play a video really slow we set the speed <code>low</code> and set <code>Interpolate Frames</code> true in the <code>Image</code> tab. This takes frame x and the following one, and in the time TouchDesigner has to play them, it crossfades between the two frames.</p>","tags":["TD/TOPS","TD/Noise","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/RenderingMultipleScreens/","title":"Rendering Multiple screens","text":"<p>When you have multiple screens to render first setup your graphics card and then do the setup in TouchDesigner.</p> <p>It is recommended that all the screens have the same resolution and the same Hz.</p> <p>The more things are the same the better for the graphics card.</p> <p>In <code>RenderTOP</code> we can use different render modes: <code>Cube Map</code> - 360\u00b0</p> <p><code>Fish Eye</code> - 180\u00b0</p> <p><code>UV Unwrap</code> - To render Texture for 3D Objects</p>","tags":["TD/TOPS","TD/Rendering"]},{"location":"topics/TouchDesigner/TOPS/RepeatImageRemapTOP/","title":"RepeatImageRemapTOP","text":"","tags":["TD/TOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/RepeatImageRemapTOP/#repeat-image-via-remaptop","title":"Repeat Image via RemapTOP","text":"<p>We can use a combination of <code>reorderTOP</code> and <code>remapTOP</code> to create a pattern from a single image input.</p> <p>The <code>reorderTOP</code> allows us to assign input textures or ramps to the color channels (e.g., red, green, blue, and alpha). In this case, the red channel (R) is used to define the X UV coordinates, and the green channel (G) is used for the Y UV coordinates. The blue channel is set to zero.</p> <p>The <code>remapTOP</code> then uses these UV values to reposition the pixels of the original image, effectively mapping the image according to the provided UV pattern.</p> <p>For example, by connecting a <code>rampTOP</code> as the input to the <code>reorderTOP</code>, you can control the UV mapping. Adjusting the <code>rampTOP</code>'s period parameter determines how many repetitions of the image appear along each axis.</p> <p>This method offers a flexible way to tile or distort an image based on custom UV coordinates.</p> <p>DownloadFile</p>","tags":["TD/TOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/SetTextTOPFromTableDAT/","title":"SetTextTOPFromTableDAT","text":"","tags":["TD/Instancing","TD/TOPS","TD/TEXT","TD/TABLEDAT","TD/DAT"]},{"location":"topics/TouchDesigner/TOPS/SetTextTOPFromTableDAT/#set-text-from-tabledat","title":"Set Text from tableDAT","text":"<p>If you want to loop through text from a <code>tableDAT</code> to show it in a <code>TextTOP</code> we can assign table to <code>textTOP</code> and set the text via different CHOP behaviour.</p> <p>DownloadFile</p>","tags":["TD/Instancing","TD/TOPS","TD/TEXT","TD/TABLEDAT","TD/DAT"]},{"location":"topics/TouchDesigner/TOPS/SimpleMovementTracker/","title":"SimpleMovementTracker","text":"","tags":["TD/TOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/SimpleMovementTracker/#simple-movement-tracker-with-tops","title":"Simple Movement Tracker With TOPs","text":"<p>A simple way to track the movement in a texture we can use a <code>cacheTOP</code> to store the last frame and then compare it in a <code>differenceTOP</code> with the current texture. It shows the difference between last and this frame. If something is moving the edge of it would be visible. </p>","tags":["TD/TOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/SimpleMovementTracker/#creative-tangent","title":"Creative tangent","text":"<p>You can create interesting effects if you play around with bigger numbers than one or two in for the <code>Output Index</code> Parameter in the <code>cacheTOP</code>. </p> <p>DownloadFile</p>","tags":["TD/TOPS","TouchDesigner"]},{"location":"topics/TouchDesigner/TOPS/TOPScripting/","title":"Various SOP Scripting References","text":"<p><code>op('TOP').width</code> - Get x Amount of Pixels <code>op('TOP').height</code> - Get y Amount of Pixels</p>","tags":["TD/TOP","TD/Scripting"]},{"location":"topics/Unity/","title":"Index","text":""},{"location":"topics/Unity/#latest","title":"Latest","text":"<p>Save Screenshot in device Gallery</p> <p>Assure something gets only called once</p> <p>Localisation</p> <p>Duplicate Addressable Group in Apk</p>"},{"location":"topics/Unity/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/Unity/AudioOptimizationSettings/","title":"Audio Optimization Settings","text":"<p>Use compression to reduce file size Use 22.05khz on mobile to save memory. Mono</p>","tags":["Unity","Unity/Audio"]},{"location":"topics/Unity/AudioOptimizationSettings/#long-tracks","title":"Long Tracks","text":"<ul> <li>Vorbis</li> <li>Quality Settings 5-7</li> <li>Streaming</li> <li>Preload Audio Disabled</li> </ul>","tags":["Unity","Unity/Audio"]},{"location":"topics/Unity/AudioOptimizationSettings/#sound-effectsshort","title":"Sound Effects(short)","text":"<ul> <li>PCM</li> <li>Quality 8-9</li> <li>Decompress On Load</li> <li>Preload Audio Enabled</li> </ul>","tags":["Unity","Unity/Audio"]},{"location":"topics/Unity/DuplicateAdressableGroupInApk/","title":"Dublicate Adressable Group in Android APK","text":"<p>Delete Library Folder and reset the right settings for the adressable groups settings</p>","tags":["Unity","Unity/Adressable","Android"]},{"location":"topics/Unity/Localization/","title":"Localization - Multiple Languages in Unity","text":"","tags":["Unity"]},{"location":"topics/Unity/Localization/#install-package","title":"Install package","text":"<p>Go to the package Manager - Unity Registry - Localization - Install it</p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#create-localization-asset","title":"Create Localization Asset","text":"<p>Project Settings - Localization - Create Active Localisation Settings - Create New Folder To Save Localization Files</p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#select-language","title":"Select Language","text":"<p>Unity syntax for Language is <code>locale</code> Select which languages you need under <code>localeGenerator</code> Create new Folder locals and save the locals in there.</p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#select-default-language","title":"Select default language","text":"<p>Specific Locale Selector - Assign default language locale Match project language with default language - Project Locale Identifier -&gt; to default language</p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#change-the-text-depending-on-language","title":"Change the text depending on language","text":"<p>Go to window - Asset Management - Localization Tables. Select new StringTable Collection - Create</p> <p>Create a key - This key holds a reference for the entries in the table</p> <p>Click on brackets Localization Icon and make sure that <code>Preload all tables</code> is checked.</p> <p>Add <code>Localize String Event</code> to the TextMeshPro Element.</p> <p>Select the table and the key you want to use.</p> <p>Now we need to tell unity which text to controll.</p> <p>Assign TextMeshPro Text Comp to <code>Update String Event</code> Choose TextmeshPro and pick <code>text</code></p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#how-to-change-the-language-using-a-button","title":"How to change the language using a button","text":"<p>Create a Script <code>LocaleSelector</code></p> <pre><code>...\nusing UnityEngine.Localization.Settings\n\npublic class LocaleSelector : MonoBehaviour\n{\n    private bool active = false;\n    public void ChangeLocale(int localeID){\n        if(active==true)\n            return;\n        StartCoroutine(SetLocale(localeID))\n    }\n\n\n\n    IEnumerator SetLocale(int _localeID){\n        active = true;\n        yield return LocalizationSettings.InitializationOperation;\n        //Making sure Localization is loaded\n        LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[_localeID];\n        //ID is the number of the locale in the settings\n        active = false;\n    }\n\n}\n</code></pre> <p>Assign Skript to Component Localization Manager Drag Localization Manager Object into the OnClick Event of the buttons and pick the corresponding id of your language.</p>","tags":["Unity"]},{"location":"topics/Unity/Localization/#you-can-save-the-players-decision-then-as-default","title":"You can save the players decision then as default","text":"<pre><code>private void Start(){\n    int ID = PlayerPrefs.GetInt(\"LocaleKey\",0)\n    ChangeLocale(ID)\n}\n...\nIEnumerator SetLocale(int _localeID){\n        active = true;\n        yield return LocalizationSettings.InitializationOperation;\n        //Making sure Localization is loaded\n        LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[_localeID];\n        PlayerPrefs.SetInt(\"LocaleKey\",_localeID)\n        //ID is the number of the locale in the settings\n        active = false;\n    }\n</code></pre>","tags":["Unity"]},{"location":"topics/Unity/Localization/#change-assets-depending-on-language","title":"Change assets depending on language","text":"<p>Add: if you want to change a spirte -&gt; <code>localize Sprite Event</code> if you want to change Audio -&gt; <code>localize AudioClip Event</code></p> <p>Add new Asset Table Collection</p>","tags":["Unity"]},{"location":"topics/Unity/SaveScreenshotsInDeviceGallery/","title":"Save Screenshot in device gallery","text":"<p>We can create a screenshot from the screen of the device and then use the <code>NativeGallery</code> Asset from the asset store to save the Image in the local gallery.</p> <pre><code>                    NativeGallery.SaveImageToGallery(screenShot, \"MyGameName\", \"Foto Tour: \" + FotoEmailManager.I.startTime,\n(success, path) =&gt; {\n    Debug.Log(success ?\n        \"Screenshot saved to: \" + path :\n        \"Screenshot could not be saved\");\n});\n</code></pre>","tags":["Unity","Unity/AR","Unity/Foto"]},{"location":"topics/Unity/TipsAndTricks/","title":"Tipps and tricks","text":"","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#serialising-components","title":"Serialising Components","text":"<p>Always serialize what you need not the whole <code>gameObject</code></p> <pre><code>[SerializeField] AudioSource _carrotPrefab;\n...\n\nvoid Update(){\n    if(Input.GetKeyDown(KeyCode.Space)){\n        var audioS = Instantiate(_carrotPrefab,transform.gameobject);\n        audioS.playAudiOneShot();\n    }\n}\n</code></pre>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#draw-gizmos","title":"Draw gizmos","text":"<p>To keep track of positions in the screen we can draw  <pre><code>private void OnDrawGizmos(){\n    Gizmos.color = Color.green;\n    Gizmos.DrawSphere(_variable,0.4f);\n}\n</code></pre></p>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#calling-scripts","title":"Calling Scripts","text":"<p>Rule of thumb is never call other scripts in awake. Only initialise yourself in awake</p>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#variable-scope","title":"Variable scope","text":"<p>The goal is to lock your scripts down as much as possible so don't make components available for the outside unless they really need to.</p> <p>So instead of setting variables <code>public</code> that you need to be accessed from outside  you should create a getter <pre><code>//Read only for external scripts\nint CarrotsSpawned {get;private set;}\n//To serialize it you need to add a serialize field\n[field:SerializeField] int CarrotsSpawned {get;private set;}\n\n//The shorthand version of that is\npublic Carrot CarrotPrefab =&gt; _carrotPrefab\n</code></pre></p>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#iterating-through-collection-with-modulo","title":"Iterating through collection with Modulo","text":"<p>If you want to iterate through a collection and want to set the index back at the end <pre><code>private int _clipIndex;\n\n_clips[_clipIndex++%_clips.Length]\n</code></pre></p>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#set-position-and-rotation-with-one-call","title":"Set Position and Rotation with one call","text":"<pre><code>transform.SetPositionAndRotation(Vector3.zero,Quaternion.identity);\n</code></pre>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#composition","title":"Composition","text":"<p>Try to keep your scripts as single purposed as possible.</p>","tags":["Unity"]},{"location":"topics/Unity/TipsAndTricks/#variable-naming","title":"Variable Naming","text":"<p>Make your public variables capital <code>public int Variable</code> Make your private variables underscore <code>private int _anotherVariable</code> And the local variables in a function non underscore camelcase <code>var aThirdVariable</code></p>","tags":["Unity"]},{"location":"topics/VCVRack/","title":"VCV Rack","text":"<p>Basics</p>"},{"location":"topics/VCVRack/#latest-added","title":"Latest added","text":"<p>Chorus</p> <p>Recurring Beat Pattern</p> <p>Eugene Rare Breeds</p> <p>Rhythm</p> <p>Window doesn't show</p> <p>Eurorack</p>"},{"location":"topics/VCVRack/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/VCVRack/Eurorack/","title":"Eurorack","text":"","tags":["VCV","VCV/Basics","Audio","Audio/Basics","Eurorack"]},{"location":"topics/VCVRack/windowDoesntShow/","title":"Window doesn't show on start","text":"<p>If the app opens but the winddows doesnt show windows key + d</p>","tags":["VCV","VCV/ERROR"]},{"location":"topics/VCVRack/basics/BasicKickDrum/","title":"BasicKickDrum","text":"","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/BasicKickDrum/#basic-kick-drum","title":"Basic Kick Drum","text":"<p>To create a basic kick drum we connect a sine or triangle(more harmonics) output of a VCO module into the IN channel input of a VCA. To control the level of the VCA we wire a ADSR as the CV Input. The ADSR needs a gate input to trigger when the envelope is started/triggered. For that we can use a LFO module with a Square Output. This simulates gate signals that trigger the ADSR. With the Frequency of the LFO module we can define the speed of the beat. With a short attack in the ADSR we can create that kick drum sound.</p> <p>To add some more character we can add <code>Noise</code> module. To shape the noise signal we need again an ADSR that controls the level in an VCA module.</p> <p>To enhance the Kickdrum further add another vco + adsr + vca with a lower frequency in the vco.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/","title":"Basics","text":"<p>Modulation is the process of changing parameters over time using a control signal. </p> <p>Modular synthesis uses a signal modulator to change different aspects of another carrier signal like amplitude, frequency or timbre/tone color.</p> <p>Good question to ask is: which principle of modulation is used in this step?</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#basic-terminology","title":"Basic terminology","text":"","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#audio-rate","title":"Audio-Rate","text":"<p>Audio Rate are frequencies that lie within the range of human hearing. This range get's used in synthesizer to create notes and sounds. The range lies between 20Hz and 20kHz. Note A4 -&gt; 440Hz</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#modulation","title":"Modulation","text":"<p>Using a signal(the modulator) to affect/change another signal (the carrier). Some types of modulation are: - frequency modulation - amplitude modulation - phase modulation - ring modulation - pulse with modulation</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#voltage-span","title":"Voltage span","text":"<p>All Eurorack/VCVrack modules work with Voltage in a maximum value span of 10 Volt. - -5V to 5V - 0 to 10V - 0 to 1V</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#amplitude","title":"Amplitude","text":"<p>Level/strength of an audio or control voltage(CV) signal. For audio the amplitude controls the loudness of a sound.</p> <p>For control voltage signal(CV) the amplitude controls the intensity of modulation that gets applied to a signal.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#frequency","title":"Frequency","text":"<p><code>Frequency</code> is the rate a signal oscillates. Measured in Hertz(hz). Mainly used to control the pitch of a tone although it can control many aspect of a module. E.g. can be used to control the cutoff frequency of a filter.</p> <p></p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#control-voltagecv","title":"Control Voltage(CV)","text":"<p>Control Voltage is one of the fundamentals of modular synthesis. It allows the communication between the modules. With the <code>CV</code> signal we can control and manipulate parameters of the modular like pitch, frequency, filter cutoff, amplitude, etc. </p> <p>All patch cables carry the same type of signal \u2014 a floating-point audio-rate signal(44.1 kHz or 48.kHz) \u2014 regardless of whether it\u2019s being used for audio or \u201ccontrol voltage\u201d duties. Conceptually, this represents a continuous voltage(a smooth signal without steps) that can vary over time, measured (in the virtual domain) in volts.</p> <p>The modification of parameters by the control voltage is called modulation.</p> <p>The CV signal can be unipolar or bipolar.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#clock","title":"Clock","text":"<p>The clock signal is a steady stream of triggers/pulses which are used to synchronize other modules. The synchronizing is essential to produce precise and complex rhythms and patterns that align with tempo.</p> <p>To create a clock signal there are a lot of clock modules available.</p> <p>The clock signal doesn't have to mean the speed of something in your patch. In sequencers often a clock signal means go one step further/next order of operation.</p> <p>Instead of using a clock module we also can create clock signals with for example an <code>LFO</code> with a SQRT wave.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#variable-clock","title":"Variable clock","text":"<p>To create a variable clock we can manipulate the frequency of an <code>LFO</code> with another <code>LFO</code></p> <p></p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#triggers-and-gates","title":"Triggers and Gates","text":"<p><code>Trigger</code> and <code>Gate</code> signals get used to control the timing of events like: - Turning modules active/inactive - Initiating envelopes - Synchronizing modules</p> <p>Both have <code>HIGH</code> and <code>LOW</code> voltage states.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#trigger","title":"Trigger","text":"<p>Short burst signal of voltage that goes <code>HIGH</code> and directly goes back to <code>LOW</code> state - so no real <code>ON</code> phase.</p> <p>Triggers get used for example for envelopes that control percussive sounds which lack sustain phase.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#gate","title":"Gate","text":"<p>Gates are longer, sustained signals that stay <code>HIGH</code> for a period of time before returning to <code>LOW</code>. This could be a note playing for example. Voltage signal that is used to control the duration of an event. </p> <p></p> <p>Gate signals are used to control the on/off state of modules and voices that require long note lengths.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#lfo","title":"LFO","text":"<p>A Low Frequency Oscillator generates a low frequency waveform that is typically used to modulate other modules.  We can think of them like the invisible hands that manipulate certain values. The typical waveforms available in an LFO are the four fundamental wave-forms sine, triangle, sawtooth and square. The output of a LFO is a control voltage that we can use for modulation.  </p> <p>With a <code>Square</code> signal of a LFO we also can create a Gate signal behavior. </p> <p>The <code>pulse width</code> defines how long the <code>HIGH/ON</code> signal of the gate is.</p> <p>So <code>LFO</code> can work like analog Clock/Gate/Trigger signals.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#four-fundamental-waveforms","title":"Four fundamental waveforms","text":"<p>Sine, triangle, sawtooth and square are the four fundamental waves that are commonly used in modular.</p> <p>The shape of the wave decides what harmonics the wave creates.j - The smoother the wave the less or no harmonics. - The sharper the wave the more harmonics.</p> <p>The sharper corners or jumps of the signals create extra vibrations at multiples of the base frequency -&gt; these are the harmonics.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#sine","title":"Sine","text":"<p>Sine wave is smooth and creates a mellow and clean tone. It can be used to create subbass sounds or soft melodies. </p> <p>Because the values of the sine-waves are smooth there are no additional harmonics.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#triangle","title":"Triangle","text":"<p>A triangle wave moves linear on rise and fall. It creates the fundamental frequency plus odd harmonics which diminish quickly.</p> <p>Triangle waves create a brighter sound.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#square","title":"Square","text":"<p>Square waves move between <code>HIGH</code> and <code>LOW</code> values with a sharp edge/transition between them.</p> <p>Square waves contain their fundamental frequency and all odd harmonics.</p> <p>Square waves are good for aggressive voices.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#sawtooth","title":"Sawtooth","text":"<p>The sawtooth wave rises linearly and falls abruptly. It contains even and odd harmonics which creates a buzzy sounds.</p> <p>They are great to create string and brass sounds.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#vco","title":"VCO","text":"<p>Voltage Controlled Oscillator generate audio-frequency signal that can create wide range of sounds. It creates a continuously running tone. To shape it into a single sound we can create a substractive synthesizer voice</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#bipolar","title":"Bipolar","text":"<p>A control voltage signal that can have positive and negative values. For example a LFO signal with its center at 0V and its peaks and troths at 5. and -5V.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#unipolar","title":"Unipolar","text":"<p>Control voltage signal that is only positive. Usually in between 0 and max 10V.</p> <p></p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#envelope-generator","title":"Envelope Generator","text":"<p>Envelope generator can shape the amplitude or the timbre of a sound over time. Most commonly used is ADSR. ADSR stands for Attack,Decay,Sustain and Release. Other envelopes are AR, ADR or AD which have less stages as the ADSR.</p> <p></p> <p>A gate signal triggers the envelope to start and it stays in the sustain phase as long as the signal is <code>HIGH</code>.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#voct","title":"V/OCT","text":"<p>Volt per Octave is a standard way of controlling musical pitch with voltage where: - one octave equals 1 volt difference.    Going from C4 to c5 requires 1 volt increase. - one semitone equals 1/12 volt(approximately 0.0833 volts).   A semitone is the smallest step between notes in Western music. Each semitone requires adding or subtracting 0.0833 Volts.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#vca","title":"VCA","text":"<p>A Voltage Controlled Amplifier allows a CV signal to control the amplitude of an audio signal. This works similar to a volume control which can be modified by for example a LFO signal. </p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#vcf","title":"VCF","text":"<p>Voltage Controlled Filter allows a CV signal to control the frequency response of an audio signal that passes through module.</p> <p>The typical filter are: - low-pass - band-pass - high-pass</p> <p>We use filter for emphasis or reduction of certain frequencies in a sound/signal.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#subtractive-synthesizer-voice","title":"Subtractive Synthesizer Voice","text":"<p>To create a subtractive synth voice patch we use other modules to subtract parts of the source signal. For example we can use <code>Envelope</code> or <code>Filter</code> modules to effect the output signal of a <code>VCO</code>.</p> <p>The first thing you want to subtract from a continuous sound is volume information with a <code>VCA</code> to control the amplitude and an <code>ADSR</code> envelope(Envelope Generator) to control the shape of the signal that controls the amplitude.</p> <p>In the VCA we have to plug in a control voltage signal that shapes our volume. For that we use the <code>ADSR</code>. It needs to be triggered so the envelope gets executed. For <code>ADSR</code> we use most of the time a gate signal.</p> <p></p> <p>With filter we can further manipulate our signal. For that we can use a VCF with a low-pass or high-pass filter. Often filter have their own envelopes to control the cutoff.</p> <p>Most of the modules have knobs to manipulate different parameters of the module itself. They are called <code>Attenuverter</code>. They control how much modulation/how strong the effect of the <code>CV</code> should affect the parameter of the module.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#sequencer","title":"Sequencer","text":"<p>A sequencer generates a sequence of voltages or events like triggers that allow to control pitches or modulation.</p> <p></p> <p>Something happens over time and that create events.</p> <p>With a <code>CLK</code> input we can let the sequencer go one step further per input signal.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#gate-sequencer","title":"Gate Sequencer","text":"<p>With a <code>Gate Sequencer</code> we can create rhythmic patterns where on each <code>CLK</code> input signal there will be outputted a signal or not.</p> <p></p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Basics/#polymeter","title":"Polymeter","text":"<p>A polymeter is the use of different rhythmic cycles that run independently and that doesn't repeat at the same time. We can create a <code>polymeter</code> by giving two sequencers the same <code>CLK</code> input and give each sequencer a different amount of steps.</p> <p></p> <p>For example the left sequencer goes over 4 steps (4/4) and the right goes over 3 (3/4).</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Chorus/","title":"Chorus","text":"<p>Chorus modules simulate multiple copies of the same signal playing simultanously with slight variations in timing and pitch. Similar to a choir. With <code>Chorus</code> modules we can create a richer sound.</p>","tags":["VCV","VCV/Basics","Audio","Audio/Basics"]},{"location":"topics/VCVRack/basics/Rhythm/","title":"Rhythm","text":"<p>Most fundamental aspect in music</p> <p>Rhythm is the placement of sound in time - every sound happens in a specific moment of time.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#time-signatures","title":"Time signatures","text":"<p>In western music rhythms are arranged in time signatures. A time signature defines how many beats are in each measure/bar. A measure is a segment of music that contains a set number of beats. Time signatures are organised like a fraction. 1/4</p> <p>4 &lt;- How many beats in each measure of music 4 &lt;- Type of note that counts as one beat.</p> <p>3 &lt;- 3 Beats per measure 4 &lt;- quarter notes Time signature for waltz music - 1-2-3 1-2-3</p> <p>The lower note can be seen as a fraction 4 = 1/4 note -&gt; quarter note 2 = 1/2 note -&gt; half note 1 = 1/1 note -&gt; full note </p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#tempo","title":"Tempo","text":"<p>The tempo is the speed of the beat in BPM (Beats per Minute) 120 BPM = 120 Beats per Minute - Clock has 60 Beats per Minute</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#note-division","title":"Note division","text":"<p>The beats in a time sequenz can get subdivided to broaden the rhythmic pattern.</p> <p>e.g. in 4/4 time</p> <p>/4 Quarter note per measure</p> <p>/8 Eighth note per measure</p> <p>/16 sixtenth note per measure</p> <p>Instead of dividing by two we also can divide the beats into 3 parts creating triplets.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#swing-and-shuffle","title":"Swing and shuffle","text":"<p>To create more dynamic into the rhythm and rhythmic variation we can use swings to change length of certain notes. This leads to a \"groovy\" or \"bouncy\" feel of the rhythm. It means that instead of playing notes eavenly you delay second half of each beat.</p> <p>E.g. In house music 16th note swing might stretch the first and the third note while shortening the sonc and forth. That creates a \"push\" and \"pull\" effect.</p> <p></p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#strong-and-weak-beats","title":"Strong and weak beats","text":"<p>Downbeat - The first beat of a measure. Usally the strongest and most emphasized beat in the music. Putting kicks on these beats can create a steady pulse to ground the beat. </p> <p>Upbeat - Last beat of the measure</p> <p>Backbeat - Beats 2 and 4 are accented by snare drums or claps in most pop and rock music. Rhymic accentuating of even beats.</p> <p>Offbeat - Weaker beats(Snares, Low Frequency, Kicks, Low Tomps) that occur between main beats. Create rhythmic energy and forward movement. The stronger the beats on the offbeats the more the whole beat seems offbeat.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#syncopation","title":"Syncopation","text":"<p>When you put notes on hits on the weaker beats or between beats to create tension and supprise -&gt; Rhythm feels more complex and exciting. Instead of only playing on the strong beat you can add hits on the ands(offbeat eigth notes)</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#ghost-nodes","title":"Ghost nodes","text":"<p>Soft quieter hits that are played on weaker beats. Drummers often use ghost nodes on snare drum to add texture and depth to a rhythm. Fill in the spaces between stronger beats.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#polymeter-polyrithms","title":"Polymeter &amp; Polyrithms","text":"<p>Polymeter: When two or more different time signatures are playing at the same time.  One instrument at 4/4 and the other on 3/4. The length remains the same.</p> <p>Polyrhythm: Two or more rhythms with different numbers of beats are played simultanously. Within same time signature. 3 Nodes gainst 2 beats in single measure.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#meter-and-phasing","title":"Meter and Phasing","text":"<p>Meter: How the beats in a measure are grouped. Common groups: Duple, Triple, Quadruple meter</p> <p>Phasing: How do you organise rhythms over long stretches of time like 4,8,16 Measures. Helps guiding flow and structure of song. POints of progression and change.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#drum-machine-sounds","title":"Drum machine sounds","text":"<p>Iconic drum machines: Roland808: Deep Boomin Kick Drums(Hip Hop) Rolang909: Sharp punchy snares (House,Techno)</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/basics/Rhythm/#highs-mids-lows","title":"Highs Mids Lows","text":"<p>It's important how differnt frequencies affect the groove Lows: Kicks and bass heavy instruments - usally placed on strong beats</p> <p>Mid: Like snares and claps often sit on backbeats (2 and 4)</p> <p>High High hats and cymbals to fill in the gaps and create forward motion.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/modules/EugeneRareBreeds/","title":"EugeneRareBreeds","text":"","tags":["VCV","VCV/Module","VCV/Rhythm","Audio"]},{"location":"topics/VCVRack/modules/EugeneRareBreeds/#eugene-by-rare-breeds","title":"Eugene by Rare Breeds","text":"<p>We can  use the module to generate and control beat patterns. Full circles show the hits of the rhythm.</p> <p>Length - controls the amount of beats in a rhythm.</p> <p>Hits - controls the number of hits that trigger an output signal in rhythm.</p> <p>Shift - alters/changes the start point of a rhythm</p> <p>To alter the parameters from above we can input CV values at the CV knobs.</p> <p>REV button and CV input allow you to reverse the pattern either manually or with a gate control voltage.</p> <p>INV button and CV input invert hits and no hits. When INV active the empty circles are the hits of the pattern. </p> <p>EOC triggers an output signal when the end of circle is reached. The module has different EOC modes: - On Repeat: triggers on first beat of the cycle only when whole cycle ran through - First: triggers on first beat of cycle even when resetted. - Last: triggers on last beat</p>","tags":["VCV","VCV/Module","VCV/Rhythm","Audio"]},{"location":"topics/VCVRack/modules/NoisePlethoraBefaco/","title":"NoisePlethoraBefaco","text":"","tags":["VCV","VCV/Module","VCV/Rhythm","Audio"]},{"location":"topics/VCVRack/modules/NoisePlethoraBefaco/#noise-plethora-by-befaco","title":"Noise Plethora by Befaco","text":"<p>Module has three different digital noise generators.  Each with it's own analog multimode filter.</p> <p>The noise generators at the top and in the middle are the same. They both have a filter with CV control and a resonance knob. We can choose from three different banks with each 10 noise algorithms.  - Bank A: Textures - Bank B: High Hat Clusters - Bank C: Harsh &amp; Wild Hovering over the algorithm number shows the name of the algorithm. To switch banks hold down the programm btn and then you can switch between a,b,c. The small dot behind the letters shows for which generator we are changing the bank. With a click we can alternate the selection. You also can right click the module and then change the programm in the popup menu.</p> <p>The third noise generator has three seperate outputs. gritty - clocked grain generator - We can increase the grain intensity with the left knob. white  - plain white noise filtered - has a filter and we can set the source with the switch above it to gritty or white</p> <p>Play with the <code>XA</code>,<code>YA</code>,<code>XB</code>,<code>YB</code> knobs and the different algorithms. So we can use the <code>Noise Plethora</code> as a sound source. </p> <p></p>","tags":["VCV","VCV/Module","VCV/Rhythm","Audio"]},{"location":"topics/VCVRack/modules/NoisePlethoraBefaco/#random","title":"Random","text":"<p>Another option is to use it as a random node generator by plugging the output into a quantisizer. You set the filter to low pass and then the higher the cutoff the more nodes and randomness you introduce.</p> <p>Information from Noise Plethora Tutorial from Optoproductions.</p>","tags":["VCV","VCV/Module","VCV/Rhythm","Audio"]},{"location":"topics/VCVRack/modules/VCF/","title":"VCF","text":"","tags":["VCV","VCV/Module","VCV/Filter","Audio"]},{"location":"topics/VCVRack/modules/VCF/#vcf","title":"VCF","text":"<p>VCF stands for Voltage controlled Filter. With a filter we can cut out parts of the signal. <code>High pass</code> lets the higher frequencies through and filters out the lower ones. <code>Low Pass</code> lets the lower frequencies through and filters out the higher ones.</p> <p><code>Drive</code> Knob adds distortion the the signal.</p>","tags":["VCV","VCV/Module","VCV/Filter","Audio"]},{"location":"topics/VCVRack/techniques/RecurringBeatPattern/","title":"RecurringBeatPattern","text":"","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VCVRack/techniques/RecurringBeatPattern/#recurring-beat-pattern","title":"Recurring Beat Pattern","text":"<p>To create a recurring beat pattern we can synchronies the sequencer with the reset signal from our clock module.  For that we need to trigger the reset input of the clock module by a another slower clk signal. You can use for example a fraction of your current clock to set the reset input of the same clock module.  Then you can set the reset output into the reset input of your sequencer.</p>","tags":["VCV","Audio","Audio/Rhythm"]},{"location":"topics/VSCode/","title":"VSCode","text":""},{"location":"topics/VSCode/#latest","title":"Latest","text":"<p>Open Folder in VSCode with Terminal</p>"},{"location":"topics/VSCode/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/VSCode/ConfigureASnippet/","title":"Configure a Snippet","text":"<p>Create a new Global Snippets file</p>","tags":["VSCode"]},{"location":"topics/VSCode/OpenFolderWithVSCodeMacOS/","title":"OpenFolderWithVSCodeMacOS","text":"<p># Open Folder in VSCode with Terminal</p> <p>If you haven't set up the code command in your terminal yet, open VS Code, press <code>Cmd+Shift+P</code>, type <code>Shell Command</code>, and select \"Shell Command: Install 'code' command in PATH\".</p> <p>If you are in the desired folder <code>code .</code></p>","tags":["Terminal","VSCode"]},{"location":"topics/c%2B%2B/","title":"C++","text":"<p>Welcome in c++ Land!</p> <p>Basics</p>"},{"location":"topics/c%2B%2B/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/c%2B%2B/Basics/","title":"C++ Basics","text":"<p>C++ is used for:  - High-performance applications - video games - device drivers - web browser - servers - operating systems</p> <p>One of the fastest and most efficient languages.</p> <p>To master c++ you have to learn:  - c++ languages - c++ standard library - prewritten c++ code that provides functionality like Datastructures</p>"},{"location":"topics/c%2B%2B/Basics/#ides","title":"IDE'S","text":"<p>On windows: visual studio code On Mac: XCode</p> <p>A project in C++ has a <code>main.cpp</code> file is the main file of the project.</p> <p>The <code>main</code> function in the file is the entry point to the program. It is a function that returns an integer to tell the operating system if the program terminated succesfully(0) or not.</p> <pre><code>#include &lt;iosstream&gt;//Input output stream functionalities - printing on the screen or getting user input\nint main() {\n    //std short for standard library\n    std::cout &lt;&lt; \"Hallo Wolrd\";// cout for character out\n    return 0;// if we return any other value than 0 that means our programm hat an error.\n}\n</code></pre>"},{"location":"topics/c%2B%2B/Basics/#compiling-and-running-programm","title":"Compiling and Running Programm","text":"<p>To run the code, it needs to get compiled to from c++ to machine code that can be run by the computers operating system. If we compile it on windows we get an executable that only runs on windows. If we run it on a mac we have to recompile it on the mac to make it executable MacOS.</p>"},{"location":"topics/c%2B%2B/Basics/#variables","title":"Variables","text":"<p>To declare and initialize a variable in c++ <code>int file_size = 100;</code> <code>double sales = 9.99</code></p> <p>In c++ variables doesn't get automatically intialised to 0 when you don't assign a value.</p>"},{"location":"topics/c%2B%2B/Basics/#constants","title":"Constants","text":"<p>We declare constants for values that we don't want to change during our program</p>"},{"location":"topics/ffmpeg/","title":"FFMPEG","text":"<p>Convert Mov to mp4</p> <p>Convert All Mp3 to Wav in Powershell Terminal</p>"},{"location":"topics/ffmpeg/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/ffmpeg/ConvertAllMp3ToWAV/","title":"Convert All mp4 into wav in powershell terminal on windows","text":"<p><code>Get-ChildItem *.mp3 | ForEach-Object { ffmpeg -i $_.Name ($_.BaseName + \".wav\") }</code></p>","tags":["Video"]},{"location":"topics/ffmpeg/ConvertMOVtoMP4/","title":"Convert Mov files into mp4","text":"<p><code>ffmpeg -i input.mov -vcodec h264 -acodec mp2 output.mp4</code></p>","tags":["Video"]},{"location":"topics/n8n/","title":"n8n","text":"<p>Welcome in n8n Land!</p> <p>Basics</p> <p>Data</p>"},{"location":"topics/n8n/#nodes","title":"Nodes","text":"<p>Date and Time</p> <p>Form Trigger</p> <p>HTTP Request</p> <p>Scheduled Trigger</p>"},{"location":"topics/n8n/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/n8n/Basics/","title":"Basics","text":"<p>Automation is about predefined actions that transform data from one point to another.</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#core-concepts","title":"Core concepts","text":"","tags":["n8n"]},{"location":"topics/n8n/Basics/#trigger","title":"Trigger","text":"<p>Every workflow starts with a trigger. They start the automation. Trigger only have an output branch. They launch and activate the workflow. There are: -manual trigger -Scheduled Trigger - Every minute/hour etc. -Applications - Webhook, Property update, Form submission('n8n Form Trigger')</p> <p>We can have multiple triggers.</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#filter","title":"Filter","text":"<p>Filter allow or block certain types of data from following a path based on certain conditions. 'Filter Node'</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#actions","title":"Actions","text":"<p>Actions allow to interact with applications</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#workflow","title":"Workflow","text":"<p>Trigger --&gt; Sorting/Filtering/Fromatting/Transforming/Segmenting --&gt; Action</p> <p>First step is to map out the process by creating a flowchart: - List every single step as a block; Get website link -&gt; create image -&gt; save image</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#apis-and-webhooks","title":"API's and Webhooks","text":"<p>API = Application programming interfaces</p> <p>An API exposes a service and developers write programs to consume it.</p> <p>In the documentation of an API we see how it works.</p> <p>We send a request through the interface to the Application -&gt; the application uses the interface to send a response</p> <pre><code>    --&gt; Request\n</code></pre> <p>client                  Server/Interface/Application         &lt;-- Response</p> <p>For that we for example use an HTTP Request Node</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#credentials","title":"Credentials","text":"<p>Let the application know that we are allowed to make a given request. Most API's require authentification through credentials.</p> <p>Main ways to authenticate: - Query Parameter: <code>?api_key=...</code> - Header: <code>Authorization:Bearer...</code></p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#webhooks","title":"Webhooks","text":"<p>Webhooks or Reverse API's</p> <p>Webhooks indicate that something that you are waiting for has happened.</p> <p>For example: Stripe Everytime a customer made a payment to your stripe account</p> <p>There are two options to retrieve that information: - Polling - every x minutes check if new payment - Webhook sends when new payment</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#nodes","title":"Nodes","text":"<p>Nodes are the building blocks of n8n</p> <p>There are 3 main categories of nodes - Entry piont like Triggers - Functions to transform, filter or format data - Exit point - Apps/Application</p> <p>Types are: - Trigger - Action in App - Data transformation - Flow - Files - Advanced.</p> <p>In the Node View the left side shows the input data and the right side shows the output data.</p> <p>Each node executes once per item.</p> <p>In <code>Output Fieldname</code>can we rename the output data key name.</p> <p>We also can set <code>Execute Once</code> in the node setting - the whole node just executes for first item in input.</p> <p>Some nodes ask you for field names - in this case you don't use the expression. You use the name</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#data-and-expressions","title":"Data and Expressions","text":"<p>We can drag the key from the input field into the nodes fields. That creates an expression \"return for each item the associated value for that key\"  Everything between the <code>{{}}</code> is an expression.</p> <p>Expression can combine plain text, item variables and javascript.</p> <p><code>{{$JSON.name}} says {{$JSON.greeting}}</code></p> <p>To create a key:value pair you assign a key name under <code>Name</code>field and then drag the expressions into the field.</p> <p>We can add multiple fields under <code>Add Field</code></p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#branches","title":"Branches","text":"<p>We create branches when we want to set different paths/sets of actions.</p> <p>Nodes with multiple outputs have two output options to start branches on the right.</p> <p></p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#useful-nodes","title":"Useful Nodes","text":"","tags":["n8n"]},{"location":"topics/n8n/Basics/#execution-logs","title":"Execution Logs","text":"<p>We can access the history of all our workflows executions</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#error-handling","title":"Error handling","text":"<p>When the workflow fails there will be a Error Workflow executed. It can be configured per workflow in the settings tab. It informs you that your workflow failed.</p> <p>Anothe way to trigger the error workflow is with the Stop and Error Node.</p> <p>The error workflow is created with the Error Trigger Node. It contains information about the error: - workflow name &amp; id - execution ID - Name of node with the error - Link to execution history.</p> <p>It is recommended to notify via Slack, Gmail, Whatsapps/Telegram to send message to these tools when you have an error.</p> <p>Makes sense for example to do error handling on inputs that come in to the workflow. Like checking if the email is actually valid that came from a webhook.</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#debugging","title":"Debugging","text":"<p>When a workflow fails it can be for multiple reasons: - Node not configured correctly - Service not available - Wrong data format - Missing data</p> <p>Sometimes a workflow can not fail but also not be successful.</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#debug-in-editor","title":"Debug in editor","text":"<p>Easiest way to debug is the Debug in editor feature. It lets you pin data from an execution history into  the editor. So it lets you edit the workflow using the data that caused an error.</p> <p>Once the workflow is fixed we can use the retry feature. </p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#edit-output","title":"Edit output","text":"<p>You can manually edit the output of specific node. This can be used for testing you workflow.</p>","tags":["n8n"]},{"location":"topics/n8n/Basics/#workflow-version-hisotry","title":"Workflow Version Hisotry","text":"<p>Access all the historical versions of a given workflow.</p>","tags":["n8n"]},{"location":"topics/n8n/Data/","title":"Data","text":"<p>N8n uses two major datastructures Json and List.</p> <p>We want to access data from one node and use it to setup next node.</p>","tags":["n8n"]},{"location":"topics/n8n/Data/#json","title":"Json","text":"<p>Json is used for digital communication. It gets written with braces and contains key:value pairs <pre><code>{\n    \"key\":\"value\",\n    \"key2\":\"value2\",\n    ...\n}\n</code></pre> We also can embed JSON into a JSON then key:value is another JSON.</p> <p>To access the json data in a node we can write into the expression field <code>{{$JSON.keyname}}</code>.  To access data inside a json that is a key we have to go down one level deeper <code>{{$JSON.jsonKeyName.country}}</code></p> <p>There is also a 1:1 correspondance of JSON and tables.  The keys of the JSON are the header of the rows.</p> <p><pre><code>{\n    \"first\": 1,\n    \"second\":2\n},\n</code></pre> first | seconds</p> <p>1   |  2</p> <p>One JSON is one \"item\" in n8n and one row in the table.</p>","tags":["n8n"]},{"location":"topics/n8n/Data/#list","title":"List","text":"<p>Because a JSON is an object itself we can create a List of JSONS</p> <pre><code>[\n    {...},\n    {...}\n]\n</code></pre>","tags":["n8n"]},{"location":"topics/n8n/Nodes/Aggregate/","title":"Aggregate","text":"<p>The aggregate node combines data from all of the items of the previous output. So it helps dealing with multiple items.</p> <p>For example you collect the email adresse from multiple input items and collect them in one item in a new key:value pair <code>\"email\"</code>.</p> <p>Aggregate - <code>Individual Fields</code> Field To Aggregate - Input Field Name <code>email</code></p> <p>To break out one key of an item in to multiple items we can use Split Out.</p>","tags":["n8n","n8n/Function"]},{"location":"topics/n8n/Nodes/DateAndTimeNode/","title":"Date and Time Node","text":"<p>To format dates</p>","tags":["n8n","n8n/Action"]},{"location":"topics/n8n/Nodes/EditFields/","title":"Edit Fields (Set)","text":"<p>Edit Fields Node is used to managing data in your items for example: - add data to items - format data in items - reduce data in items</p> <p>Use <code>Edit Fields</code> as much as possible so you only keep the data that is useful to you. We have the options to only keep the fields that we are setting or to include all the input fields</p>","tags":["n8n","n8n/Action","n8n/Data"]},{"location":"topics/n8n/Nodes/EventType/","title":"Event type ? Node","text":"<p>We can check what Event got triggered from for example a webhook. Depending on the event we can execute different branches.</p> <p>We also can check <code>if event does not exist</code> or <code>event is equal to an empty string</code> then we route to a Stop and Error</p>"},{"location":"topics/n8n/Nodes/HTTPRequestNode/","title":"HTTP Request Node","text":"<p>The http request node allows to make http request and receive to respond.</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#request","title":"Request","text":"<p>There are four components to an http request.</p> <ul> <li>url</li> <li>method</li> <li>header</li> <li>body</li> </ul>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#method","title":"Method","text":"<p>Action that we want to perform at the given url.</p> <p><code>GET</code> Receive Info</p> <p><code>POST</code> Send Info</p> <p><code>DELETE, PUT, PATCH</code> are less common.</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#header","title":"Header","text":"<p>In the header we communicate more detail/context for the request.</p> <p>Common infos are: - Your device location - Your device language - Your devie type</p> <p>Example header: - <code>ACCEPT:application/json</code> tells server would like response in json format.</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#body","title":"Body","text":"<p>Only exist for post request. Contains information that get send to the server</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#response","title":"Response","text":"<p>Three components of http response.</p> <ul> <li>status code</li> <li>header</li> <li>body</li> </ul>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#status-code","title":"Status Code","text":"<p>Three digit number that indicates whether request was succesful. <code>200</code> - OK <code>401</code> - Unauthorised <code>404</code> - Not found <code>500</code> - Internal Server error</p> <p>When starts with 4 most likely your mistake, when it starts with 5 problem on the server side. </p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#header_1","title":"Header","text":"<p>Header gives more detail to response Common ones are: - Content-length - Content-type - Expire</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/HTTPRequestNode/#body_1","title":"Body","text":"<p>Data that gets returned - html - json - data</p>","tags":["n8n","n8n/Action","n8n/Node"]},{"location":"topics/n8n/Nodes/Markdown/","title":"Markdown","text":"<p>The markdown node converts between markdown and HTML formats.</p>"},{"location":"topics/n8n/Nodes/RaindropNode/","title":"RaindropNode","text":"","tags":["n8n","n8n/Node","n8n/Trigger"]},{"location":"topics/n8n/Nodes/ScheduledTrigger/","title":"Schedule Trigger","text":"<p>Execute something at a given time.</p>","tags":["n8n","n8n/Trigger"]},{"location":"topics/n8n/Nodes/StopAndError/","title":"Stop and Error Node","text":"<p>Define what to do when an Error occurs.  in the <code>On Error</code> Field we can define what should happen if an error happens.</p>"},{"location":"topics/n8n/Nodes/Webhook/","title":"Webhook","text":"<p>Webhook node is a trigger node. It lets you listen to webhooks on a specific URL and launches the workflow when one is received.</p>","tags":["n8n","n8n/Node","n8n/Trigger"]},{"location":"topics/n8n/Nodes/n8nFormTrigger/","title":"n8nFormTrigger","text":"<p>comments: true tags:  - n8n  - n8n/Node  - n8n/Trigger</p>"},{"location":"topics/n8n/Workflows/FilterOutEmail/","title":"Filter Out Email","text":"<p>Add if Node - <code>{{$json.email}}</code> - does not contain  - <code>@gmail.com</code></p>","tags":["n8n","n8n/Filter","n8n/Workflow"]},{"location":"topics/n8n/Workflows/FilterOutEmptyFieldsTable/","title":"Filter Out Empty Field in Table","text":"<p>Add a filter node.</p> <p>In the filter node - fx <code>{{$json.filedname}}</code> - A is not equal to - value -&gt; empty field</p>","tags":["n8n","n8n/Filter","n8n/Workflow"]},{"location":"topics/utilities/BootableWindowsUSB/","title":"Bootable WindowsUSB","text":"<p>We can use Rufus to create a bootable USB stick with windows. Rufus</p>"},{"location":"topics/vvvv/","title":"Index","text":"<ul> <li>VVVV comments: true</li> </ul>"},{"location":"topics/vvvv/#vvvv","title":"VVVV","text":"<p>Here I'm gonna collect some fun and interesting techniques</p> <p>Basics</p> <p>Animation</p> <p>Controlling Patches</p> <p>Collection</p> <p>Fuse</p> <p>Skia</p> <p>Stride</p> <p>StrideFX</p> <p>Channel Data</p> <p>Storing Data</p> <p>Runtime Data</p> <p>Typography</p>"},{"location":"topics/vvvv/#latest-added","title":"Latest Added","text":"<p>Move 3D Element on Circular Path</p> <p>Projection Mapping</p> <p>Hold Changed Value for Time Interval</p> <p>Set Dependencies in Other File</p> <p>Read File into VVVV</p> <p>Get Screen Dimensions</p> <p>Count On MouseClick</p> <p>Nugets</p> <p>Set Output True For X Time On True Input</p>"},{"location":"topics/vvvv/#suggestions","title":"Suggestions","text":"<p>Got a topic or technique you'd love to see me dive into? Drop your suggestions below, and let's create something amazing together</p>"},{"location":"topics/vvvv/Animation/","title":"Animation","text":"","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#waveshapes","title":"Waveshapes","text":"<p>VVVV contains different Waveshape nodes which convert an 0 - 1 signal into a certain wave form.  - <code>SineWave</code>  - <code>CosineWave</code> - <code>TriangleWave</code> - <code>SawToothWave</code> - <code>RectangleWave</code></p> <p>To create moving values these nodes expect a Phase input like <code>LFO</code>.</p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#transition-from-one-value-to-another","title":"Transition from one value to another","text":"<p>To control the transition from one value to another with a <code>Lerp</code> node and set the Scalar parameter.</p> <p></p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#smooth-animation-to-value-hold-value-and-then-animate-back","title":"Smooth Animation to value, hold value and then animate back","text":"<p>We can convert a Bang trigger into a smooth value that gets hold for a specific time by connecting it to a <code>MonoFlop</code> and then add a <code>Damper</code> to it.</p> <p></p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#on-input-move-object-to-new-position","title":"On input move object to new position","text":"","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#smoothed-random-position","title":"Smoothed Random Position","text":"<p>If you want to move an object to random positions on every time interval we can set the interval with an <code>LFO</code> and connect it to a <code>S + H</code> node which holds a random value. Adding a damper creates a smooth transition between these random values.</p> <p></p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#simplex-noise","title":"Simplex Noise","text":"<p>A simplex noise is a type of gradient noise algorithm designed to be more efficient and less prone to visual artifacts compared to Perlin noise.</p> <p></p> <p>In comparison to <code>Random</code> the values of <code>SimplexNoise</code> are related to the values next to them.</p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#voronoi-and-delaunay","title":"Voronoi and Delaunay","text":"<p>To use voronoi value patterns we can import the <code>VL.2D.Voronoi</code> package with <code>nuget install VL.2D.Voronoi -pre</code></p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#wanderer","title":"Wanderer","text":"<p>The <code>Wanderer</code> nodes create a smooth transition movement. It has many settings to create different kind of movements effects.</p> <p>Size and Width define the constrains in which the wanderer values can move.</p> <p>Range mode allows us to define how the values that are out of range get clamped.  - None - No limitation of the values - Clamp - If values reach the width value gets clamped at width - Mirror - Values gets mirrored so the object moves in the opposite direction - Wrap - Values get inversed - object jumps back to opposite side / beginning of the width value.</p> <p>Main Direction sets the angle(range 0-1 and starting from 3 o'clock) of the movement. Main Direction will only be considered if Main Direction Tendency is bigger than zero.</p> <p>Direction Deviation defines the angle deviation per step. 0 -&gt; straight walk 1 -&gt; nervous jittery walk</p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Animation/#integrator","title":"Integrator","text":"<p>Similar to <code>Stopwatch</code> node where the value increases over time we can use <code>Integrator</code> node and set the offset value to define by what amount the value increases every frame</p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/Audio/","title":"Audio","text":"<p><code>nuget install vl.audio -pre</code></p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#audio-driver","title":"Audio driver","text":"<p>ASIO4ALL driver allows you to have easily </p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#set-audio-settings","title":"Set audio settings","text":"<p>You can set the audio settings with <code>alt+c</code></p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#audioplayer","title":"AudioPlayer","text":"<p>We can use <code>AudioPlayer</code> to get an audio file into VVVV.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#audioin","title":"AudioIn","text":"<p>With <code>AudioIn</code> we can get audio from a realtime audio source like the microphone or an audio stream that you want to pass into vvvv from a different software.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#get-amplitude-of-audio","title":"Get Amplitude of audio","text":"<p><code>Meter</code> converts the audio into a float to give us the volume/amplitude of the audio. Combined with a <code>Damper</code> node we can get a smoother signal.</p> <p>The <code>NormalizeMeter</code> allows to adjust the meter value.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#stereo-to-mono","title":"Stereo to mono","text":"<p>When we don't need the stereo audio but just a single audio signal we can use <code>Mono</code> node to convert it.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#filtering-audio","title":"Filtering Audio","text":"<p>The VL.Audio library has filter to manipulate the incoming audio. We can filter lowpass,bandpass and highpass </p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#analyze-audio-spectrum","title":"Analyze audio spectrum","text":"<p>The <code>FFT</code> node allows us to analyze the audio spectrum of our audio source. Depending on the Bin Count it outputs the amount of frequencies. With the <code>FromSequence</code> we can convert it into a spread to use values.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#audio-input-signal-to-value","title":"Audio input signal to value","text":"<p> With <code>AudioIn</code> we get the microphone as an input. When convert it <code>ToMono</code> and use <code>Meter</code> node to convert it into a single level value.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#latest-audio-sample-to-value","title":"Latest audio sample to value","text":"<p>The <code>A2V</code> outputs the value of the lastest audio sample from an AudioSource. In combination with <code>Queue</code> and <code>Reverse(Spread)</code> we can store and show the evolution of the audio sample over time.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#audio-to-frequency","title":"Audio to Frequency","text":"<p>AudioIn -&gt; FFT</p> <p>FFT extracts from a sinewave all components that compose the sinewave. Creates a spread for energy of the bins of the frequency.</p> <p>BufferSize sets how many frequency you want.</p> <p><code>FFT4Bands</code> interprets the FFT information for us.</p> <p><code>FFTPreview</code> allows us to visualise the fft</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#play-audio-file","title":"Play Audio file","text":"<p>With <code>AudioPlayer</code> we can input an audio file.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#ifft","title":"IFFT","text":"<p>To convert data into frequency information.</p> <p>Particles positions to frequency.</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Audio/#check","title":"Check","text":"<p>Adam Stark Sound Analyser</p>","tags":["VVVV","Audio","VVVV/Audio"]},{"location":"topics/vvvv/Automata/","title":"Automata UI","text":"<p>A statemachine is an abstract machine which can be in exaclty one of finite number of states</p> <p>State  represents state of software - game-mode, highscore state of game Transition - what happens between states Action - triggering a transition to move form one state to another</p> <p></p> <p>State machine allows us to control the behavior of our software</p> <p>Provides overview of software flow.</p>","tags":["VVVV","VVVV/StateMachine"]},{"location":"topics/vvvv/Automata/#automata-ui-terminology","title":"Automata UI Terminology","text":"<p>Transition Time time between states to drive animations</p> <p>State Time  lock up a state for a certain time</p> <p>Init State where the statemachine always stars from</p> <p>Ping Pong transitions transitioning back and forth with one transition</p> <p>Actions  Bang input Pins named by Transition hence Transition = Action</p>","tags":["VVVV","VVVV/StateMachine"]},{"location":"topics/vvvv/Automata/#install","title":"Install","text":"<p>Install under dependency <code>nuget install VL.AutomataUI</code></p>","tags":["VVVV","VVVV/StateMachine"]},{"location":"topics/vvvv/Automata/#editor","title":"Editor","text":"<p>Create state <code>double left click</code> Create transition <code>right click</code> Delete transition and state <code>middle mouse click</code> Set State in your VVVV patch <code>ctrl + click state</code></p>","tags":["VVVV","VVVV/StateMachine"]},{"location":"topics/vvvv/Automata/#same-behavior-for-transitions","title":"Same behavior for transitions","text":"<p>Give the transitions the same name so the same behavior gets executed.</p>","tags":["VVVV","VVVV/StateMachine"]},{"location":"topics/vvvv/BackgroundFrame/","title":"BackgroundFrame","text":"","tags":["VVVV"]},{"location":"topics/vvvv/BackgroundFrame/#organize-sketch-with-background-frame","title":"Organize sketch with background frame","text":"<p>To create a better overview of the sketch we can create background frames that include certain logic of the project. Select nodes and hit <code>ALT + F</code>. You then can give the area a name and color and even create screenshots of it. These background frames also allow us to move the whole part inside the sketch window.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/","title":"Basics","text":"<p>On the top left corner we have the quad menu.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#navigation","title":"Navigation","text":"<p>Move view in sketch - <code>middle mouse</code> Move node -<code>left mouse</code> Zoom in/out - <code>mousewheel</code> or <code>ctrl +/-</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#windows","title":"Windows","text":"<p>Datatypes/IOBoxes - <code>dbl right click</code> Nodebrowser - <code>dble left click</code> Pop-up menu - <code>right click</code> Create frame around nodes - <code>alt</code> + select nodes Show tree view of program - <code>ctrl j</code> Show Inspector - <code>ctrl + i</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#nodes","title":"Nodes","text":"<p>Insert node - <code>dbl click wire</code> Mode node - <code>shift+arrowkeys</code> Delete a wire - <code>middle click</code> or <code>left click</code> wire and <code>delete</code> To align multiple nodes vertically - mark multiple lines + <code>ctrl + L</code> Align node to horizontally - <code>alt + L</code>  Expose IOBox from input/output - <code>click in-/output + middle click</code> Show value of a wire as pad - <code>dbl right click</code> on wire Reset node - <code>alt + right click</code> node Creating In-/Outputs Pins in nodes - <code>ctrl + dbl left click</code> Make multiple connections from one output - <code>middle click</code> output and <code>middle click inputs</code> Alternative to <code>middle</code> click is <code>alt+l-click</code> Exchange already connected node with new - <code>dbl click</code>node - reset category on the bottom right. Insert node in between other nodes. - <code>dbl click line</code> Scroll Spread IO Box - <code>ctrl + wheel</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#create-own-node","title":"Create Own Node","text":"<p>To create own node we write the name of the node in the nodebrowser and then <code>node</code>.</p> <p>To go inside the node <code>middle click</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#assign-input","title":"Assign input","text":"<p>To assign a type for the input/output of the node we ether can <code>right click</code> and configure a type or we plug the desired data type into the input/output</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#values","title":"Values","text":"<p>Changing values - <code>right mouse drag</code> More precise changes - <code>shift + right mouse drag</code> Type in Values - <code>right click</code> Reset values pin - <code>alt + right + click</code> pin</p> <p>Write a comment - open node browser, start with space and then just write in search field</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#nodes_1","title":"Nodes","text":"<p>Nodes with a light gray top and bottom border have a state - memory.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#run-patch","title":"Run Patch","text":"<p><code>F8</code> - Stop patch <code>F5</code> - Run patch</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#basic-fundamentals","title":"Basic fundamentals","text":"<p>Every input can only hold one connection</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#data-types","title":"Data types","text":"<p>In the nodebrowser  under <code>IOBox</code> you can find all the basic data types you can use in vvvv. Another way to reach the window is <code>double right click</code></p> <p>You can drag the nodes with the left mouse button and you can change and set the values with the <code>right mouse click</code> and/or <code>drag</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#booleans","title":"Booleans","text":"<p>Booleans are <code>true</code>(1) and <code>false</code>(0) values. There are three IOBoxes - <code>Bang</code> - Triggers only one frame - like a one on impulse - <code>Toggle</code> - Toggles the boolean value like a light switch - <code>Press</code> - Outputs true as long as it is hold down</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#invert-boolean-value","title":"Invert Boolean value","text":"<p>With <code>NOT</code> node we can invert the value of a Boolean</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#integer","title":"Integer","text":"<p>For a single <code>Integer</code> value you can use the <code>Integer32</code> IOBox.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#vector-23","title":"Vector 2/3","text":"<p>Datatype that consists of two/three <code>float</code> values like x,y,z</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#color","title":"Color","text":"","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#rgba","title":"RGBA","text":"<p>Color datatype that consits Hue,Saturation,Value,Alpha Changing value - <code>right click drag up/down</code> Changing hue - <code>right click drag left/right</code> Changing saturation - <code>ctrl right click drag up/down</code>  Changing alpha - <code>shift drag up/down</code></p> <p>We also can set color by typing in color name or hex code   <code>ffff00</code> </p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#get-compliment-color","title":"Get Compliment Color","text":"<p><code>Compliment</code> Node</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#hsl","title":"HSL","text":"<p>Convert from number to color with <code>FromHSL</code> node.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#string","title":"String","text":"<p><code>String</code> datatype to hold text</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#path","title":"Path","text":"<p><code>Path</code> points to a data folder on your computer.</p> <p>Look also here</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#circle-rectangle","title":"Circle &amp; Rectangle","text":"<p>VVVV has <code>Circle</code> and <code>Rectangle</code> as a special data type build in natively. We can use them to create abstract shapes which allow us for example to detect if shapes intersect with each other. </p> <p></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#matrix","title":"Matrix","text":"<p>For the transformation of objects in 3D and 2D vvvv has the data type <code>Matrix</code></p> <p></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#nodes-and-pins","title":"Nodes and Pins","text":"<p>To see how you can connect nodes in vvvv you can hover the mouse over the in-/outputs of the node. They show you the datatype necessary.</p> <p>If a value has been changed and is different from the default value it's pin extends to a square. </p> <p>With the <code>middle mouse click</code> we can expose IOBoxes of the parameters of the nodes.</p> <p></p> <p>VVVV has notes that can be used for multiple data types. They are called Adaptive Nodes. These nodes expect the data type <code>T</code>. Adaptive nodes need to be connected to <code>IOBoxes</code> get get activated.</p> <p> </p> <p>Some nodes that are <code>pin groups</code> so there inputs can be extended with <code>ctrl +/-</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#reset-values-of-iobox","title":"Reset values of IOBox","text":"<p>To reset the value of an <code>IOBox</code> we can hold down <code>alt + right click</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#switch-between-values","title":"Switch between values","text":"<p>With the <code>switch</code> node we can use a control <code>integer</code> value to switch between different values.</p> <p></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#math","title":"Math","text":"<p>For math operations VVVV has multiple node for the classic math operations. </p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#rounding","title":"Rounding","text":"<p>With <code>Floor</code>,<code>Ceil</code> and <code>Round</code> node's we can route values to our liking.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#comparison","title":"Comparison","text":"<p>VVVV has nodes for the comparison of values <code>=</code> <code>!=</code> <code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> </p> <p>We also can use <code>IsOdd</code> and <code>IsEven</code> nodes to check if value is odd or even.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#random","title":"Random","text":"<p>The random node allows to output a random value from inside a range.</p> <p></p> <p>There is also the advanced <code>Random(FromTo)</code> node.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#conversion-nodes","title":"Conversion Nodes","text":"<p>In vvvv the conversion of types happens automatically when no information get's lost through the conversion.</p> <p></p> <p>The other way around - from data types with more information to data type with less information can't be connected that easily </p> <p></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#convert-vectors","title":"Convert vectors","text":"<p>For creating and manipulating vectors there are two important nodes which are <code>Vector(Split)</code> and <code>Vector(Join)</code></p> <p><code>Vector(Join)</code> - bring values together into a vector <code>Vector(Split)</code> - split vector into single values</p> <p>To convert a vector2  into vector3 we first can split up the <code>vector2</code> in its elements and then plug them into <code>vector3</code> inputs.</p> <p><code>XYz</code>,<code>XyZ</code>,<code>xYZ</code> allow to combine a vector2 and float  into a <code>Vector3</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#convert-colors","title":"Convert colors","text":"<p>We can use a <code>FromHSV</code> node to convert from float to color values or <code>RGBA</code> if you want to set the single color channels.</p> <p>The <code>ToHSV</code> allows the inverse conversion.</p> <p></p> <p>To convert from string to color we can use a <code>fromHex</code> node and use a color hex code string as input. Same inversion of conversion is possible with <code>toHex</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#convert-string","title":"Convert string","text":"<p>To convert a data type into a string we need the <code>toString</code> node. It deletes leading and following 0s. If you want to keep use <code>toString(Format)</code> node.</p> <p></p> <p>To go from string to number we can use the <code>TryParse</code> node and set the output format.</p> <p>To convert from a Path to a string we also can use the <code>toString</code> node.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#manipulate-strings","title":"Manipulate Strings","text":"<p>With the <code>+</code> we can concatenate multiple strings together into one string </p> <p>To replace a string inside another string we can use the <code>Replace(String)</code> node </p> <p>The <code>Insert(String)</code> node lets us insert string information at a specific index.</p> <p>To remove a specific amount of characters at a position we can use the <code>Remove(String)</code></p> <p><code>ToLower</code> and <code>ToUpper</code> allow us to set the text in upper or lowercase</p> <p>To check if a string contains another string we can use the <code>Contains(String)</code></p> <p>With <code>IndexOf(String)</code> we can evaluate the position of a string inside another string.</p> <p>To get the Length or the amount of characters inside a string <code>Length(String)</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#manipulate-colors","title":"Manipulate Colors","text":"<p>To change color values with the mouse: - value - <code>right btn + up/down movement</code> - hue - <code>right btn + left/right movement</code> - saturation - <code>ctrl + right mouse</code> - alpha - <code>shift + right mouse</code></p> <p>To create a color from floats we can use <code>FromHSV</code>,<code>FromHSL</code> or <code>RGBA(Join)</code> nodes.</p> <p>To split colors up we can use <code>ToHSV</code>,<code>ToHSL</code> or <code>RGBA(Split)</code></p> <p>To just change the alpha of a color values we can use <code>SetAlpha</code> node.</p> <p>With the <code>Random</code> node we also can set a random color. To get all the colors we set white and black as the color range.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#transform-objects","title":"Transform objects","text":"<p>VVVV has two <code>TransformSRT</code> nodes. The basic one and a <code>TransformSRT(Center)</code> node. This applies the transformations relative to an anchor</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#output","title":"Output","text":"<p>To show your patch content on a screen we use <code>Renderer</code> nodes. Some libraries have different output nodes like <code>TextureWindow</code>.  The value range in the <code>Renderer</code> is top to bottom -1 to 1 and always stays the same. The left and right values depend on the width of the <code>Renderer</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#errors","title":"Errors","text":"<p>VVVV shows errors with a read outline.</p> <p>If you find an error check also if the file contains custom definitions that need to get copied to the document.</p> <p>Sometimes it can help to use <code>Changed</code> node to see if the changes you want are applied or not.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#c","title":"C","text":"<p>VVVV ulitzies C# libraries under the hood. This allows also the implementation of other c# libraries into vvvv.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#process-nodes","title":"Process Nodes","text":"<p>To avoid duplicate code we can use and create Process Nodes, which are sub patches in vvvv. The idea is to bundle nodes together to avoid redundant nodes.</p> <p>We can create Process Nodes by typing a Name in the Node browser and click on <code>Process</code>. This creates a definition of a process and allows us to pick the Process Node in the node browser.</p> <p></p> <p>To pass information in and out of the node we can add <code>Inputs</code> and <code>Outputs</code> by starting a link from a node inside the Process and <code>click while holding CTRL</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/Basics/#applications-vs-definitions","title":"Applications vs. Definitions","text":"<p>VVVV patches have a front and a backside of the patch.  The application is the patch itself and the backside contains  - custom data types - processes - operations</p> <p>We can go to the definitions page by click on Definitions in the document menu. This is where we should keep our Process nodes</p>","tags":["VVVV"]},{"location":"topics/vvvv/ChangePrecisionValues/","title":"Change precision of float values","text":"<p>We can change the precision of float value by <code>right click</code> pad -&gt; configure -&gt; precision</p>","tags":["VVVV"]},{"location":"topics/vvvv/ChannelData/","title":"Channel Data","text":"<p>Here is a collection of information about channel data</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#create-value-always-ascending-value","title":"Create value always ascending value","text":"<p><code>Stopwatch</code> creates a global runtime value of the passed time.</p> <p>We also can use <code>Playhead</code> which also allows to loop to value at a certain range.</p> <p>The <code>Integrator</code> node let's us create something similar but we can decide how much we want to add every frame.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#create-ascending-values-from-1-to-one","title":"Create ascending values from 1 to one","text":"<p><code>LFO</code> node lets us create ascending values from zero to one. Period defines how much time it takes to go from zero to one.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#create-sin-wave-values","title":"Create Sin Wave values","text":"<p>To create a value that moves along a sine wave we use the <code>SinWave</code> node and plug a <code>LFO</code> node into it.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#create-sawtooth-values","title":"Create SawTooth values","text":"<p><code>SawToothWave</code> node</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#mirror-negative-values-to-positive","title":"Mirror negative values to positive","text":"<p>The <code>abs</code> node allows us to map negative values to the absolute of the value.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#calculate-distance-between-points","title":"Calculate Distance between Points","text":"<p>If you want to calculate the distance of for example two Vector2 values you can use a <code>Distance</code> node. </p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#calculate-distance-between-points-with-connectall","title":"Calculate Distance Between Points with ConnectAll","text":"<p>The <code>ConnectAll</code> node allows us to connect all points in 2D or 3D space that have a distance to each other lower than a threshold.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#smooth-interpolation-between-random-values","title":"Smooth interpolation between random values","text":"","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#filter-data","title":"Filter Data","text":"","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#smother-values-with-filter","title":"Smother Values with Filter","text":"<p>The <code>Filter</code> node allows us to create smoother values. It comes with different transition modes and easing functions to define the change to the new value. </p> <p>The <code>Filter</code> node is an adaptive node so we can use it for colors,vectors and more.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#oneeurofilter","title":"OneEuroFilter","text":"<p>A good filter is <code>OneEuroFilter</code></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#filter-values","title":"Filter Values","text":"<p>We can use a <code>Pow</code> To filter the values.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#tween-float-value","title":"Tween float value","text":"<p>The <code>Tween</code> node interpolates a float to the selected transition behavior.  When we combine a <code>Lerp</code> with a <code>Tween</code> we can introduce easing into lerping between two values.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#adsr","title":"ADSR","text":"<p>With the <code>ADSR</code> node we can create an envelope generator to control the transition of a 0 to 1 float value.  Envelope generators have four phases Attack,Decay,Sustain and Release to define the progression of the value.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#count","title":"Count","text":"<p>VVVV has multiple counter to count a value up and down. They are different in the way how they behave if the Minimum and Maximum values got reached.</p> <p><code>Counter</code> - Counts endless up and down</p> <p><code>CounterWrap</code> - Jumps back to Minimum value when Maximimum reched and other way around. <code>CounterMirror</code> - When Edges reached the count direction get's inversed - Endless counting between edges. <code>CounterClamp</code> - Stops counting at edge values.  <code>CounterFlop</code> - Returns true if specified number of bangs is detected in time interval.</p> <p><code>Counter</code> often can create something similar to a <code>Pad</code> where on every event the value gets added or subtracted. Here the counter holds the position of the rectangle similar to a <code>Pad</code></p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#limit-ascending-value-with-modulo","title":"Limit ascending value with modulo","text":"<p>We can use a <code>MOD</code> to create modulo behavior and limiting an increasing value into a range. </p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#delaying-data-stream-by-frame","title":"Delaying data stream by frame","text":"<p>The <code>FrameDelay</code> allows to give the input a delay of one frame.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#map-data","title":"Map Data","text":"","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#convert-one-range-into-another","title":"Convert one range into another","text":"<p> The <code>Map(Range)</code> nodes allows us to convert from one range into another.</p> <p><code>Map(Change)</code> doesn't limit or adapt values when the input reaches a certain minimum or maximum.  For that we can use <code>MapClamp</code>,<code>MapMirror</code> and <code>MapWrap</code> nodes.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#define-range-by-center-and-width","title":"Define range by center and width","text":"<p>The <code>Range(Join Center Width)</code> allows us to create a range by a center and width values.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#evaluate-value-difference-between-frames","title":"Evaluate value difference between frames","text":"<p>The <code>FrameDifference</code> node allows us to see how much the data has changed between this and the last frame.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#range","title":"Range","text":"<p>VL has nodes to keep values in a specific range.</p> <p><code>Mirror</code> - If values are bigger or smaller than the minimum and maximum, the value continues in the inverse direction.</p> <p><code>Wrap</code> - If values are bigger or smaller than the minimum and maximum, the value continues at the opposite edge.</p> <p><code>Clamp</code> - If values are bigger or smaller than the minimum and maximum, the node holds their value.</p> <p>We can use these nodes to define how the values should behave when an input device is outside of minimum and maximum of a range.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#smooth-transition-between-two-inputs","title":"Smooth transition between two inputs","text":"<p>The <code>Lerp</code> node allows us to create a smooth transition between the two inputs of the node. The skalar input defines the position of the transition between the two inputs.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#quantize-convert-smooth-value-into-stepped-values","title":"Quantize - Convert smooth value into stepped values","text":"<p>The <code>Quantize</code> node allows us to convert an input value into a stepped output value. So for example the smooth <code>LFO</code> node that creates values from 0.0 to 1.0 get quantized into a 0.0 -&gt; 0.2 -&gt; 0.4 -&gt; 0.6 -&gt; 0.8 -&gt; 1.0 </p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#working-with-angles","title":"Working with Angles","text":"","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#2d-vector-from-angle-and-radius","title":"2D Vector from angle and radius","text":"<p>To move an element on a circumference we can transform radius and angle values into a two dimensional vector to position the object. For that we can use the <code>FromPolar</code> node.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#2d-vector-to-angle-and-radius","title":"2D Vector to angle and radius","text":"<p>The other way around we can convert a 2D vector into an angle and radius value with the <code>ToPolar</code> node. The angle lies between the 2D vector and the x-axis.</p> <p></p> <p>Similar to <code>ToPolar</code>, there is also the <code>Angle</code> node, which also takes a Vector2 as input but returns just the angle without the radius.</p> <p>To calculate the angle between two points that not lie on the x-axis we can use <code>AngleBetween</code>.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#calculate-angle-between-two-vector","title":"Calculate angle between two vector","text":"<p><code>Slope</code> node allows us to calculate which angle lies between two points in 2D or 3D space.</p> <p><code>Slope(3D)</code> returns also the length of the vector between the two points in 3D space.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#attractor","title":"Attractor","text":"<p>The <code>Attractor</code> node recalculates the position of a point in 2D/3D depending on the position of another point.  This allows us to simulate attraction between points similar to magnetic behavior.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#convert-vector2-to-int2","title":"Convert Vector2 to Int2","text":"<p>To convert Vector2 data type into Int2 we can use the <code>Int2(Create Vector2)</code></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/ChannelData/#send-and-receive-data","title":"Send and Receive Data","text":"<p>With <code>Send(Global)</code> and <code>Receive(Global)</code> you can send data inside a patch. So we send in the current frame and in the next frame we receive it </p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/Collections/","title":"Collections","text":"<ul> <li>VVVV comments: true</li> </ul>"},{"location":"topics/vvvv/Collections/#collections","title":"Collections","text":"<p>Watch this https://www.youtube.com/watch?v=sg4469iiao8</p>"},{"location":"topics/vvvv/Collections/#spreads","title":"Spreads","text":"<p>Look here for deeper information </p>"},{"location":"topics/vvvv/Collections/#make-own-spread-manually","title":"Make own spread manually","text":"<p>To create a spread from only one value we can use the <code>FromValue(Spread)</code> node. </p> <p>With the <code>Repeat(Spread)</code> node we can create a spread with multiple times the same value.</p> <p>With <code>Cons</code> node we can collect multiple values in a spread. With CTRL +/- we can add and delete inputs.</p> <p>We also can create a spread via the IOBox menu. You first select <code>Spread</code> and then the data type of the elements of the spread.</p>"},{"location":"topics/vvvv/Collections/#make-iteration-spread","title":"Make iteration spread","text":"<p>With <code>I</code> as Integer we can create a spread of integers in a given range. Start defines first value and Count how many elements in the spread you want to have.</p> <p>You need to activate the advanced nodes to see the <code>I</code> node.</p>"},{"location":"topics/vvvv/Collections/#queue-slices-into-a-spread","title":"Queue Slices into a Spread","text":"<p><code>Queue</code> allows us to add slices into spread when a trigger input is true.</p> <p></p> <p>Frame Count imput defines how many values the <code>Queue</code> can contain. If Frame Count input is -1 the <code>Queue</code> can contain endless values. </p>"},{"location":"topics/vvvv/Collections/#automatic-spread-generators","title":"Automatic Spread generators","text":"<p>VL contains nodes that automatically generate spreads with values that are in a specific relation to each other.</p>"},{"location":"topics/vvvv/Collections/#one-dimensional-spreads","title":"One dimensional spreads","text":"<p><code>LinearSpread</code> creates linear values within a range specified by the width and center input.</p> <p><code>RandomSpread</code> generates random values within a range, specified by width and center.</p>"},{"location":"topics/vvvv/Collections/#two-dimensional-spreads","title":"Two dimensional spreads","text":"<p><code>RectangleSpread</code> - Generate rectangle position values. </p> <p><code>CircleSpread</code> - Generate circle position values.  <code>GridSpread</code> - Generate 2D grid position values.  <code>SpiralSpread</code> - Generate spiral position values. </p> <p><code>RandomSpread(2D)</code> - Generate random position values.</p>"},{"location":"topics/vvvv/Collections/#random-morph-between-spread-values","title":"Random morph between spread values","text":"<p>With a <code>Randomizer</code> node after a switch and then dampining the values in the <code>ForEach</code> we can create a morphing behaviour between the spread values.</p> <p></p>"},{"location":"topics/vvvv/Collections/#three-dimensional-spreads","title":"Three dimensional spreads","text":"<p><code>RandomSpread(3D)</code> - Generate random position values in 3D space</p> <p><code>GridSpread(3D)</code> - Generate 3D grid position values.</p> <p>To use 2D spreads in 3D space we need to add <code>ForEach</code> slice in the spread another dimension in the vector. So from 2D we need to go into a 3D vector. We can use a 3D <code>Vector(Join)</code> node and plug the values from the 2D in there.</p>"},{"location":"topics/vvvv/Collections/#pick-element-of-spread","title":"Pick element of spread","text":"<p>To pick an element out of a spread we can use <code>GetSlice</code> and then set the index of the data point we want.</p>"},{"location":"topics/vvvv/Collections/#get-spread-out-of-spread","title":"Get spread out of spread","text":"<p>To grab multiple consecutive elements from a spread we can use <code>GetSpread</code>.</p>"},{"location":"topics/vvvv/Collections/#get-multiple-slices-of-spread","title":"Get multiple slices of spread","text":"<p>To extract multiple elements from a Spread we can use <code>Decons</code> node and expand the amount of values with +/-.</p>"},{"location":"topics/vvvv/Collections/#get-firstlast-slice-of-spread","title":"Get first/last slice of spread","text":"<p>With <code>SplitFirst</code> and <code>SplitLast</code> we can get the first or last slice in the spread.</p>"},{"location":"topics/vvvv/Collections/#change-values-in-spread","title":"Change values in Spread","text":"<p>To add a value at the end of the spread we can use <code>Add(Spread)</code> node.</p> <p>To add a value at a specific position we use <code>InsertSlice(Spread)</code>.</p> <p>To change a value at a specific position use the <code>SetSlice(Spread)</code>.</p> <p>We can remove a slice at a specific position with <code>RemoveSliceAt(Spread)</code>.</p> <p>With <code>Clear(Spread)</code> we can remove all slices.</p>"},{"location":"topics/vvvv/Collections/#split-spread-into-two-spreads","title":"Split Spread into two spreads","text":"<p>With the <code>SplitAt(Spread)</code>node we can create two spreads out of one. Index defines where they get split. </p>"},{"location":"topics/vvvv/Collections/#analyze-spreads","title":"Analyze spreads","text":"<p>To count the amount of slices in a spread we can use the <code>Count(Spread)</code> node.</p> <p>To check if spread contains specific value we can use <code>Contains(Spread)</code> node. This returns a boolean value.</p> <p>For the average value of a spread we can use <code>Average</code> node.</p>"},{"location":"topics/vvvv/Collections/#change-order-of-spreads","title":"Change order of spreads","text":"<p>To change the order of a spread into a random order we can use the <code>Randomizer</code> node.</p> <p>To reverse the order of the spread we use the <code>Reverse(Spread)</code></p>"},{"location":"topics/vvvv/Collections/#convert-any-sequence-into-spread","title":"Convert any sequence into spread","text":"<p>Because any collection in VL is a sequence we can convert any collection into a spread with <code>FromSequence(Spread)</code></p>"},{"location":"topics/vvvv/Collections/#combining-spreads-with-pads","title":"Combining Spreads with Pads","text":"<p>Storing our spreads in to <code>Pads</code> allow us to manipulate it's data over the runtime of our program.</p> <p></p>"},{"location":"topics/vvvv/Collections/#deconstruct-spread-into-its-values","title":"Deconstruct Spread into it's values","text":""},{"location":"topics/vvvv/Collections/#resample-spread-values","title":"Resample Spread Values","text":"<p>We can resample a spread and make the transition between the values of the initial collection smoother. We can apply this if we for example want to create smoother path between points.How to draw path from spread</p> <p>With <code>ResampleBSpline</code> we can define how many Resample steps we want.</p>"},{"location":"topics/vvvv/Collections/#dictionaries","title":"Dictionaries","text":"<p>In Dictionaries the values are saved by a key. The key is most of a time a string and can only exist one time in the dictionary.</p> <p>Similar to spreads we ether can define the adaptively by setting the data type in the <code>Add(Dictionary)</code> node or we strictly define the data type in the <code>Pad</code> that stores the <code>Dictionary</code> data.</p> <p></p> <p>With <code>Clear(Dictionary)</code> we can delete all entries from the Dictionary.</p> <p>To manipulate an already existing key-value pair we can use <code>SetItem(Dictionary)</code> node.</p> <p>With <code>Remove(Dictionary)</code> we can delete a specific element by the key.</p> <p>We also have <code>Keys(Dictionary)</code> and <code>Values(Dictionary)</code> nodes to only get the keys or values from a dictionary.</p> <p>To check if a <code>Dictionary</code> contains keys or values we can use <code>ContainsKey</code>, <code>ContainsValue</code> or <code>Contains(Dictionary)</code>.</p> <p>To get a value by it's get we can use the <code>TryGetValue(Dictionary)</code> node.</p> <p>With <code>Count(Dictionary)</code> we can calculate the amount of entries in the <code>Dictionary</code></p>"},{"location":"topics/vvvv/Collections/#sequence","title":"Sequence","text":""},{"location":"topics/vvvv/Collections/#iterations","title":"Iterations","text":"<p>VL Explanation here</p>"},{"location":"topics/vvvv/Collections/#for-each","title":"For each","text":"<p>To iterate through all items in the spread, we need to use the splicer input into a <code>ForEach</code> region. It's icon looks like a filter.  </p> <p>In the <code>ForEach</code> region we then can apply operations to each element individually.</p> <p>If you pass in two spreads with different length in to the <code>ForEach</code> region it will only execute the amount of entries of the smaller spread.</p> <p></p> <p>For also can create nested loops with multiple <code>ForEach</code> loops inside of each other.</p> <p>To convert these nested spreads into a normal spread we have to use <code>Flatten</code> node.</p> <p></p>"},{"location":"topics/vvvv/Collections/#repeat","title":"Repeat","text":"<p>The <code>Repeat</code> region repeats everything that is inside of the region for a specified amount of times.</p>"},{"location":"topics/vvvv/Collections/#using-repeat-with-process-node","title":"Using Repeat with Process Node","text":"<p>We can use a <code>Repeat</code> with our own Process Node inside. If we want to create random start data for the content nn that Process Node we can take advantage of <code>Create</code> and <code>Update</code> operations to setup each Instance with different data.</p>"},{"location":"topics/vvvv/Collections/#looping","title":"Looping","text":"<p><code>ForEach</code> and <code>Repeat</code> regions give us <code>Index</code> pin which allows us to use the Index of the current iteration to change values.</p> <p></p> <p>The <code>Keep</code> pin allows to only keep the elements that match a conditions with true value. So we can decide which elements should be included and which not. </p> <p></p>"},{"location":"topics/vvvv/Collections/#accumulator","title":"Accumulator","text":"<p>The accumulator allows you to to pass on the result from the first iteration to the next iteration and so on.  The link from the diamond shape is the value from the previous iteration and the link from splicer is the value in the current iteration.</p> <p>We also can use an initial value for the first iteration. For that we need to plug a value from the outside into the accumulator icon.</p>"},{"location":"topics/vvvv/Collections/#define-what-elements-are-kept-in-for-each","title":"Define what elements are kept in For-Each","text":"<p>We can use the <code>Keep</code> node inside the for-each to define which information we want to output from a spread. </p>"},{"location":"topics/vvvv/Collisions/","title":"Collisions","text":"<p>VVVV has multiple nodes that can detect if shapes intersect or contain each other. We use for that abstract 2D/3D data types. </p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#rectcontainspoint","title":"RectContainsPoint","text":"<p>To check if a 2D vector is inside a rectangle or intersects with it we can use the <code>RectContainsPoint</code> node. It expects a rectangle as an input and the point.  For the rectangle we can use <code>Rectangle(Join)</code> from the 2D class which creates a rectangle defined by anchor points and size. If we wan't to draw the rectangle we use a different one. We use <code>Rectangle(Bounds)</code>.</p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#circle-contains-point","title":"Circle Contains Point","text":"<p>To check if a 2d vector intersects with a Circle we can use <code>CircleContainsPoints</code>. Similar to rectangle we us <code>Circle(Join)</code>from the 2D class. To draw the circle in the renderer we use <code>Circle(Circle)</code>.</p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#rect-intersects-with-rect","title":"Rect intersects with rect","text":"<p>We also can check the intersection of two rectangles with <code>RectIntersectsRect</code>.</p> <p></p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#circle-intersects-with-circle","title":"Circle intersects with circle","text":"<p>Similar to rect vvvv has also a node for <code>CircleIntersectsCircle</code></p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#sphere-contains-pointbox","title":"Sphere contains point/box","text":"<p>For 3D and Stride VVVV has the <code>SphereContainsPoint</code> node which we can use with 3D <code>Sphere(Join)</code>. This node returns the type of containment that the two nodes have. It also provides the relates <code>BoxContainsPoints</code>.</p> <p></p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/Collisions/#sphere-contains-sphere","title":"Sphere contains sphere","text":"<p>Similar to <code>SphereContainsPoint</code> VVVV has <code>SphereContainsSphere</code>.</p>","tags":["VVVV","VVVV/Physics"]},{"location":"topics/vvvv/ControllingPatches/","title":"Controlling Patches","text":"","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#lfo","title":"LFO","text":"<p>A LFO generates a continuos value which is rising from 0 to 1.  It also outputs a Bang signal every time a new cycle starts and the amount of cycles it ran since it got reseted last time. We can use that signal to trigger events in our patch at cyclic intervals.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#toggle","title":"Toggle","text":"<p>We can use a <code>LFO</code> and a <code>Toggle</code> node to toggle a value every time the LFO starts a new circle. The Reset input also allows to hold the value false. So we can switch the toggle on and off over the <code>Reset</code> pin.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#sample-and-hold","title":"Sample and Hold","text":"<p><code>S+H</code> node keeps the value of the input node as long as Sample input is true. It ignores the input values as long as the Sample input is false.</p> <p>It is useful to hold the output of a <code>random</code> node at a specific moment.</p> <p></p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#switch","title":"Switch","text":"<p><code>Switch</code> node allows us to decide which of the inputs of the node we want to show. In the first pin we can set the index of the element that we want.</p> <p> If the index is bigger than the amount of inputs, it starts again at the beginning. Add more inputs with +/-</p> <p>The <code>Switch</code> node will evaluate all inputs - even when there aren't the currently selected. This can be important performance wise. Maybe consider an <code>if</code> region instead.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#switch-with-lfo","title":"Switch with LFO","text":"<p>A common technique to switch between two values with the same switching time is to use a <code>LFO</code> and plug it's Cycles output into the index input of the <code>Switch</code>. </p> <p></p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#switch-with-flipflop","title":"Switch with FlipFlop","text":"<p>We can switch between two values using a <code>FlipFlop</code> node as the deciding factor for which output to set. With the <code>FlipFlop</code> we can detect if ether state 1 or state 2 is true and depending on that switch between values.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#swap","title":"Swap","text":"<p>The <code>Swap</code> nodes exchanges its both inputs when the Condition input is set to true.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#flipflop","title":"FlipFlop","text":"<p>The <code>FlipFlop</code> sets out to true if it is triggered on the left input and resets it to false when it is triggered on the right. So we can control the state of true of false with two bang inputs.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#multiflipflop","title":"MultiFlipFlop","text":"<p>The <code>MultiFlop</code> allows multiple inputs and returns the index of the triggered input. </p> <p></p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#if","title":"If","text":"<p>The <code>if</code> region only get's executed when a condition is true. It also won't evaluate the nodes inside of the region while the condition is true. So if a condition is met, it takes what is coming in and does the operation on it. If the condition not true, the data gets passed to the output without doing operation inside.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#toggle-between-two-values","title":"Toggle between two values","text":"<p>To toggle between two values we simply set a <code>Toggle</code> node as the index input of a <code>switch</code> node and then plug two values into the <code>switch</code> </p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#logital-primitives","title":"Logital primitives","text":"<p><code>NOT</code> inverts a boolean value. true -&gt; false false -&gt; true</p> <p><code>AND</code> only returns true when all values are true. This get used to make sure that two states or events are met at the same time. For example checking if mouse is clicked AND mouse cursor is over a specific element.</p> <p><code>AND(Spectral)</code> returns true when all values in the sequence are true.</p> <p><code>OR</code> returns true when at least on of the inputs is a true value. This can be useful when we want to bundle triggers from different parts of the sketch to trigger a specific logic.</p> <p><code>OR(Spectral)</code> returns true when just one of the values in a sequence is true.</p> <p><code>XOR</code> returns false when both values ether true or false and returns true when just one of the values is true.</p> <p><code>NOR</code> only returns true when none of the values are true.</p> <p><code>NAND</code> for NOT AND returns only true when both values are NOT true.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#register-off-to-on-and-on-to-off-behavior","title":"Register off to on and on to off behavior","text":"<p>If we want to register if a boolean value went from off to on or from on to off we can use a <code>TogEdge</code>. If the input goes from off to on output 1 <code>UpEdge* gets triggered.  If input goes from *on to off* then</code>Down Edge` gets triggered.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#change-state-with-two-input-bang","title":"Change State With Two Input Bang","text":"<p>With a <code>FlipFlop</code> we can change a State by two input Bang signals one for Set and the other for Reset. So <code>FlipFlop</code> stays true when it got set by the Set input and stays true till Reset get set to true.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#detect-if-value-got-true-in-certain-time","title":"Detect If Value got True in certain time","text":"<p><code>CounterFlop</code> allows to check if a value got true certain times in specific time interval </p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#only-execute-when-input-changes","title":"Only execute when Input changes","text":"<p>A <code>Cache</code> region allows to execute logic only when the input into the <code>Cache</code> changes.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#trigger-events","title":"Trigger events","text":"","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#trigger","title":"Trigger","text":"<p>The <code>Trigger</code> node repeats randomly a bang signal in between the minimal and maximum interval.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#changed","title":"Changed","text":"<p>A <code>Changed</code> node let's use register if a value has changed. It shows if the value is different from the value before(from the last frame) and creates a boolean that  we then can use to trigger logic like only if something changes the logic gets triggered</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#monoflop","title":"MonoFlop","text":"<p>When the <code>MonoFlop</code> get triggered it sets the output to true for a defined time.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#togedge","title":"TogEdge","text":"<p>The <code>TodEdge</code> detects if there was a change from false to true or the other way around. When the input changed from false to true it bangs the Up Edge output. When the change was from true to false it bangs the Down Edge.</p> <p>Especially when we want to use input devices to trigger something <code>TogEdge</code> is super useful.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#onopen","title":"OnOpen","text":"<p>If you wan't to trigger some logic when you open your patch or the application you can use the <code>OnOpen</code> node.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ControllingPatches/#send-and-receive","title":"Send and Receive","text":"<p>We also can send data inside a patch with <code>Send</code>and <code>Receive</code> Nodes. They need custom channel name and a type. This works without a frame delay.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ConvertIOBoxToSlider/","title":"Convert IOBox to slider","text":"<p>You also can convert an <code>IOBox</code> into a <code>Slider IOBox</code>. <code>Right click</code> the gray circle and under configure -&gt; show slider you can activate the <code>SliderIOBox</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/ConvertingSingleValueIntoVec2/","title":"Converting Single Value into Vector2","text":"<p>If we for example want to convert the <code>SimplexNoise</code> float into a Vector2 position we can use the <code>FromPolar</code> node which outputs the x and y coordinates of an input angle and radius</p>","tags":["VVVV"]},{"location":"topics/vvvv/CountMouseClick/","title":"CountMouseClick","text":"","tags":["VVVV"]},{"location":"topics/vvvv/CountMouseClick/#count-on-mouseclick","title":"Count On MouseClick","text":"<p>To create a counter on mouse click we connect <code>Mouse</code> node with a <code>TogEdge</code> to make sure that it one mouse click per frame. Otherwise counter increases value per frame while the button is hold down.</p>","tags":["VVVV"]},{"location":"topics/vvvv/CreateMultipleValueWithRepeat/","title":"CreateMultipleValueWithRepeat","text":"","tags":["VVVV"]},{"location":"topics/vvvv/CreateMultipleValueWithRepeat/#create-multiple-values-with-repeat","title":"Create Multiple Values with Repeat","text":"<p>We can use a <code>Repeat</code> region to create multiple values with just one value source.</p>","tags":["VVVV"]},{"location":"topics/vvvv/CreateRandomValueWhenTrue/","title":"CreateRandomValueWhenTrue","text":"","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/CreateRandomValueWhenTrue/#create-random-value-when-true","title":"Create Random Value when true","text":"<p>We can use a <code>LFO</code> <code>On New Cycle</code> Out put and plug it in to the <code>enabled</code> of the <code>Random</code> node to get a random value every time the lfo cycle ends. It is important to first set/create the data type you want and then connect it to the generic random note.</p> <p>A <code>Filter</code> node allows to create a smooth transition between the random values.</p>","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/CreateRandomValueWhenValueBiggerThan/","title":"CreateRandomValueWhenValueBiggerThan","text":"","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/CreateRandomValueWhenValueBiggerThan/#create-random-value-when-value-bigger-than","title":"Create Random Value when value bigger than","text":"","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/CreatingRetrievingVariables/","title":"CreatingRetrievingVariables","text":"","tags":["VVVV"]},{"location":"topics/vvvv/CreatingRetrievingVariables/#creating-and-retrieving-variables","title":"Creating and Retrieving Variables","text":"<p>In VVVV we can use the <code>Pad</code> node to save variables. By naming the <code>Pad</code> we also can find it in the Node browser later to retrieve and use it.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Elementa/","title":"Elementa","text":"<p>Elementa is used for UI Elements and layouts. You need to import <code>VL.Elementa</code> from nuget.org </p> <p><code>nuget install VL.Elementa</code></p> <p>With right mouse btn you can activate hidden pins on the Elementa elements.</p> <p>sticky - spacebar the value jumps to the cursor position</p> <p>The <code>Elementa</code> node allows to convert from Elementa world to Skia layer</p>","tags":["VVVV","VVVV/Elementa","UI"]},{"location":"topics/vvvv/Elementa/#position-elements","title":"Position elements","text":"","tags":["VVVV","VVVV/Elementa","UI"]},{"location":"topics/vvvv/Elementa/#layout-components","title":"Layout components","text":"<p>The layout components allow you to combine multiple elements.</p> <p>They expect a <code>Spread</code> of elements so we first need to group the elements in a <code>Cons</code></p> <p>AllocateX/Y Grid Rows Columns Group - space individually DistributeX/Y StackX/Y</p>","tags":["VVVV","VVVV/Elementa","UI"]},{"location":"topics/vvvv/Elementa/#style-elements","title":"Style elements","text":"","tags":["VVVV","VVVV/Elementa","UI"]},{"location":"topics/vvvv/Elementa/#data-management","title":"Data management","text":"<p>We can use reference</p> <p>for that we create a reference</p> <p>We get the data, put that data into the widget, updating the datatype inside a record using data and set data.</p> <p>Create(MyType) -&gt; Create(Referece) -&gt; Pad With myType datatype</p> <p>Pad with myType dattype -&gt; data(reference) -&gt; MyOperationToGetData -&gt; into widget value input</p> <p>From widged we can link the output value into SetValue</p> <p>What is VL.Elementa and how do I install it in VVVV Gamma?</p> <p>This question will help you understand the basics of what VL.Elementa is (a UI widget library for VVVV using Skia rendering) and the installation process through the Gamma's Quad menu &gt; Manage Nugets.</p> <p>What are the core building blocks of an Elementa graph?</p> <p>This will introduce you to the fundamental components: Root nodes, Layout nodes, Widgets, and Components that form the architecture of any Elementa interface.</p> <p>How do Widgets work in VL.Elementa and what types are available?</p> <p>This explores the various UI widgets (Sliders, Labels, Toggles, etc.) and how they're implemented to handle different value types in VVVV Gamma.</p> <p>How do Layout nodes function and how can I arrange widgets responsively?</p> <p>This question focuses on understanding how to organize your UI elements using Stack, Columns, and other layout operators to create responsive interfaces.</p> <p>How does the Style system work in VL.Elementa?</p> <p>This will teach you about styling your UI components, understanding the StylePresets, and how to customize the appearance of your interface.</p> <p>How can I handle user interaction and events in VL.Elementa?</p> <p>This explores how to create interactive interfaces, responding to user input through clicks, hovers, drags, and other events.</p> <p>What is the ElementaContext and how does it provide resources to the graph?</p> <p>This dives into the more advanced concept of the ElementaContext class that allows widgets to access graph resources and how components can edit their parent widgets.</p> <p>How can I create custom widgets and components?</p> <p>This question moves toward more advanced usage, teaching you how to extend the library by creating your own custom UI elements.</p> <p>How do overlays work and how can I implement multiple overlay layers?</p> <p>This explores the overlay system in VL.Elementa, which allows you to stack interfaces on top of each other for more complex interactions.</p> <p>How can I optimize performance for complex Elementa interfaces?</p> <p>This advanced question addresses potential performance issues when working with complex UIs, teaching you techniques like wrapping widgets in classes and managing frame rates.</p>","tags":["VVVV","VVVV/Elementa","UI"]},{"location":"topics/vvvv/FeedbackEffect/","title":"FeedbackEffect","text":"","tags":["VVVV"]},{"location":"topics/vvvv/FeedbackEffect/#creating-feedback-effect","title":"Creating Feedback effect","text":"<p>The idea of a feedback in effect is VVVV is that you render the output but you also create a second <code>Renderer(Offscreen)</code> that you feedback with a <code>FrameDelay</code> into a group.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Fuse/","title":"Fuse","text":"<p>Most of the time we go from CPU world over into GPU world. So we have I/O Boxes in VVVV which lie in CPU world and when they get feet into a FUSE then it becomes a ShaderNode value.</p> <p>To only get the fuse nodes it can be handy to navigate to the fuse folder in the node browser and then look for the operator.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#buffer","title":"Buffer","text":"<p>A buffer is the fuse version of a spread.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#position","title":"Position","text":"<p>The <code>Position</code> node allows us to get the local position of the currently processed vertex/pixel. There are also <code>ObjectSpace</code>, which does the same as <code>Position</code> but is a vector3 instead of vector4, and <code>WorldSpace</code> which stores the world space positions </p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#noise","title":"Noise","text":"<p><code>Noise(3D Scalar)</code> acts in the 3D space. For example if you want to apply some noise to a particle field in 3D you would use that.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#delegates","title":"Delegates","text":"<p>Delegate regions are like functions in Fuse. They allow us to take an input like a SDF and use it in different ways. So it is using the same functionality that is inside the Delegate but how this function is used depends on where the delegate gets fed into. The output goes from the region not the output pin.</p> <p>Type f11 to get the <code>Delegate(Region)</code> with one input and output. f21 for two inputs and one outputs</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#if","title":"if","text":"<p>Fuse has it's own if region that runs on GPU instead of CPU(like the if region in normal VL)</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#for-region","title":"for region","text":"<p>The fuse for region is a little bit different to the foreach of VL. We can use both but when we use the fuse version it actually shows up in our shader code. Also there are used a little bit different. The <code>for</code> input defines how many times you want to run the loop.</p> <p>With the <code>index</code> node we can get the current iteration index.</p> <p> Here we are calculating for each value from the buffer the distance.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#see-the-generated-source-code","title":"See the generated source code","text":"<p>We can use the <code>SourceCode</code> node to see which shader code got generated.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#convert-into-gpu-value","title":"Convert into GPU value","text":"<p>With <code>GPUIn</code> we can convert a given input value into a GPU value.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#convert-float-to-vector4","title":"Convert Float to Vector4","text":"<p>With the <code>toVector4</code> we can convert one single float value to a vector4 with four times the same value.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#convert-stride-position-data-to-readable-data-in-fuse","title":"Convert Stride Position Data to readable data in fuse","text":"<p>To convert for example the position data from a model into data that we can process in our compute system we feed the position data from our mesh into <code>DynamicBuffer</code> connect that with a <code>BufferIn</code></p> <p>Helpfull patch to understand how it works is also How to use external buffer data</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#mix-two-colors","title":"Mix two colors","text":"<p>We can use the <code>Lerp</code> node from fuse to mix two colors depending on a black/white input.  We also can use a <code>Fresnel</code> node to define how the colors get mixed.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#convert-rgb-to-hsl","title":"Convert RGB to HSL","text":"<p>If want to change the HSL values in our shader instead of RGB we can convert from RGB to HSL with <code>RGBtoHSL</code> set the changes and then convert back with <code>HSLtoRGB</code></p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#performance","title":"Performance","text":"<p>Fuse doesn't know that you maybe put in the same value twice. It would create two variables for that. To just have one value in the source code we can use a <code>GPUIn</code>.</p> <p></p> <p>If you have values that you know never change during the lifetime of your sketch you can use a <code>Constant</code> node. </p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#displacing-stride-shape-with-pbrmaterial","title":"Displacing Stride Shape with PBRMaterial","text":"","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#extended-material-settings-from-fuse","title":"Extended Material Settings from Fuse","text":"<p>Fuse has a <code>MaterialExtension</code> node which allows us to extend the functionality of a <code>PBRMaterial</code></p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#convert-vertices-to-box","title":"Convert Vertices to Box","text":"<p>The <code>PointToBox</code> node allows us to convert the vertices of our source sphere into boxes.</p> <p></p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#signed-distance-field","title":"Signed Distance Field","text":"<p>For general information about signed distance fields see here.</p> <p>In Fuse we have nodes for the basic sdfs like <code>RectangleSDF</code>, <code>HexagonSDF</code>,<code>BezierSDF</code>,<code>SphereSDF</code>,<code>TorusSDF</code> or <code>MandelbulbSDF</code></p> <p>By combining different SDF's with the <code>CombineSDF</code> we can create a lot of shapes. There is also a <code>CombineSDF(Spectral)</code> that allows you to combine SDFs out of a for each loop.</p> <p>You don't want to make thousands of sdfs because it would be to heavy on the performance</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#debug-3d-sdfs","title":"Debug 3D SDFs","text":"<p>If you have a \"dirty\"/ distorted distance function you can try to fix it by multiplying with a value &lt; 1. This reduces the size of jumps the raymarcher does. But it makes it also more heavy on the performance.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#distort-sdf","title":"Distort SDF","text":"<p>To distort a basic sdf shape we use a <code>DomainDistortion</code> and connect it with the Domain input of the SDF. The source for the distortion should be wrapped into a <code>Delegate(Region,Fuse 1-&gt;1)</code>. </p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#compute-shader","title":"Compute Shader","text":"<p>Compute is using GPU and shaders but it is using aspects of the graphics api that is designed for general computation. We create a compute system and draw something with it. You also can create compute systems that are not really drawing something themselves but doing calculations.</p> <p>Compute Shader can run on buffers but also on textures.</p> <p>So the compute system is filling a big buffer for us with all the data of how forces got applied etc and then afterwards we can decide how to render and what materials etc.</p> <p>Save yourself some blueprint patches so you don't have to repatch the whole system from scratch every time.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#readback","title":"Readback","text":"<p>Readback node allows us to take information back of the gpu on the cpu. Useful for debugging but not got for scale.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/Fuse/#particle-system","title":"Particle System","text":"<p>Emmision Stage how are you creating you particles. How and where particles is born. Attributes you want to set at birth. Like settings the lifetime of particles.</p> <p>Simulation Stage what you want to do with the created particles. Integration(one step of the simulation) is where we place everything that affects the particles like forces, collisions</p> <p>PostIntregation more deterministic things that maybe aren't part of the integration stuff.</p>","tags":["VVVV","VVVV/Fuse"]},{"location":"topics/vvvv/GetDataFromLink/","title":"Get Data From Link","text":"<p>We can use a <code>HTTP Request</code> node to get data from a link from the internet</p>","tags":["VVVV"]},{"location":"topics/vvvv/GetScreenDimensions/","title":"GetScreenDimensions","text":"","tags":["VVVV","VVVV/Screen"]},{"location":"topics/vvvv/GetScreenDimensions/#get-screen-dimensions","title":"Get Screen Dimensions","text":"<p>With <code>ClientBounds</code> we can get the size and the width/height relation of the renderer.</p>","tags":["VVVV","VVVV/Screen"]},{"location":"topics/vvvv/HowToServer/","title":"How to Server","text":"<p>Whenever you send out some data to some other entity you have to transform that data into sendable data. This assures also that the receiver can properly read it. </p>","tags":["VVVV","VVVV/Server"]},{"location":"topics/vvvv/HowToServer/#protocols","title":"Protocols","text":"<ul> <li>OSC</li> <li>MQTT - VL.IO.MQTT Here</li> <li>UDP - PC to PC</li> </ul>","tags":["VVVV","VVVV/Server"]},{"location":"topics/vvvv/HowToServer/#mqtt","title":"MQTT","text":"<p><code>MQTT Client</code> is main node for sending and receiving data.</p>","tags":["VVVV","VVVV/Server"]},{"location":"topics/vvvv/Interactions/","title":"Interactions","text":"","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#mouse","title":"Mouse","text":"<p>If you want to use the mouse in your patch the context output of the <code>Mouse</code> node need to be provided to the <code>Renderer</code> by adding it in a <code>Group</code></p> <p></p> <p>The Wheel Data is the value of the mouse wheel.</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#store-value-in-spread-when-mouse-is-clicked","title":"Store value in Spread when mouse is clicked","text":"<p> With a <code>Queue</code> and binding its Insert input with a mouse click we can store the values of the mouse every time the mouse is clicked similar to a drawing app.</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#toggle-swap-values-on-every-mouse-click","title":"Toggle swap values on every mouse click","text":"","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#calculate-delta-mouse-movement","title":"Calculate delta mouse movement","text":"","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#calculate-distance-mouse-position-between-frames","title":"Calculate distance mouse position between frames","text":"","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#detect-if-mouse-is-in-circle-in-skia","title":"Detect if mouse is in circle in skia","text":"<p>==</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#detect-if-mouse-is-hit","title":"Detect if mouse is hit","text":"<p>spread of elements If mouse hit the object do not keep it togedge -&gt; if -&gt; for each -&gt; hittest -&gt; not keep ==</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#smooth-transition-of-value-when-something-is-clicked","title":"Smooth transition of value when something is clicked","text":"","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#stride","title":"Stride","text":"<p>The <code>Mouse</code> node in Stride is not 100% the same like in Skia</p> <p></p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#keyboard","title":"Keyboard","text":"<p>To check if a certain key got pushed we need to connect a <code>Keyboard</code> with <code>KeyMatch</code> and set the KeyName(String) input for the key we want to track. We also need to connect the <code>Keyboard</code> Node to a <code>Renderer</code>. Don't forget to set <code>Skia</code> or <code>Stride</code> dependency.</p> <p>Another way is to connect <code>KeyPressed</code> node with the <code>Keyboard</code> and select the key in the IOBox.</p> <p>With a <code>KeyBang</code> we get a boolean <code>Bang</code> signal when a specific key gut pushed. This can be useful for Counter</p> <p></p> <p><code>KeyToggle</code> toggles between true and false every time the assigned key gets pressed.</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#get-typed-text-from-keyboard","title":"Get Typed Text from keyboard","text":"<p>The <code>TypeWriter</code> node from Skia allows to get the typed text from the keyboard, when the renderer is focused.</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/Interactions/#index-value-from-keys","title":"Index Value From Keys","text":"<p> <code>MultiFlop</code> node allows us to convert a certain key into an index value.</p>","tags":["VVVV","VVVV/Interaction"]},{"location":"topics/vvvv/IntrestringNodes/","title":"Intresting Nodes","text":"<p>Executor - execute another programm Tween Oscillator</p>"},{"location":"topics/vvvv/LearningMaterial/","title":"Learning Material","text":"<p>https://github.com/chkworks/VL.TheBigBang https://github.com/TobyKLight/VL.ExtendedTutorials https://forum.vvvv.org/t/vl-generativegestaltung/19350 https://github.com/CeeYaa/Genuary2023 https://forum.vvvv.org/t/vl-examples-patches-playground01/21166/2</p> <p>https://www.youtube.com/playlist?list=PLmQg0g9uXi4_QcpVtGCG4EIXrbiVPf9Py https://www.youtube.com/playlist?list=PLmQg0g9uXi49oVjSEV0tPZuWHtz4GiCgJ</p>","tags":["VVVV"]},{"location":"topics/vvvv/MapValues/","title":"MapValues","text":"","tags":["VVVV"]},{"location":"topics/vvvv/MapValues/#map-values-to-a-new-range","title":"Map Values to a new Range","text":"<p>If we want to change the range of our values to a new range we can use the <code>Map</code> node. There are multiple <code>Map</code> nodes that handle differently how the values get mapped.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Model/","title":"Model","text":"<p>Model is a term in VL for the central place where you have all your information of your app. It serves to handle the state of your program. We then feed the handle to different parts of the program.</p> <p>Controller patch can change the state. View patch visualizes the state of the program.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Model/#immutable-model","title":"Immutable model","text":"<p>An Immutable model can't change.  A immutable structure when it can't change, then it is like a snapshot. You can jump between different snapshots or lerp between between them. You can detect changes.</p> <p>When you see in the tool tip a filled clock it means that we get new snapshots over time - the reference is changing all the  time. When it's not filled it is the same instance all the time - the reference stays the same.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Nugets/","title":"Nugets","text":"","tags":["VVVV","VVVV/Nuget"]},{"location":"topics/vvvv/Nugets/#import-nugets","title":"Import Nugets","text":"<p>To import Nugets into the VVVV sketch you first can go to <code>nuget.org</code> to find the correct name of the nuget you want to import. Then go to Menu -&gt; Manage nuget -&gt; commandline -&gt; nuget install VL.nugetName</p> <p>We also can import DOT.NET packages.</p>","tags":["VVVV","VVVV/Nuget"]},{"location":"topics/vvvv/Nugets/#delete-nuget","title":"Delete nuget","text":"<p>To delete a nuget from you patch go to quad menu -&gt; manage nugets -&gt; show installed and then delete the folder.</p>","tags":["VVVV","VVVV/Nuget"]},{"location":"topics/vvvv/OOP/","title":"Object oriented programming","text":"<p>A patch in VVVV has two parts: - Application side (front) - Definition side (back)</p> <p>Definitions allow us to store our own custom data types, nodes and operations to manipulate data in the patch. We can ether have all the definitions in our one patch or keep them in another file. See Set Dependency in other File</p> <p>In VL Process,Record and Class are similar to a blueprint or template. They define: - What properties(data) something can have - What operations(behaviors) can be performed.</p> <p>When you make an instance of them you create a real, usable object based on that blueprint. </p> <p>When you create your own data type you are using Reference Types. Value Types are like integer,boolean,string etc. that only contain the value.</p> <p>Every data type is not just a VL.object but also an <code>IVL.object</code>. We can check of the identity of that object with the advanced node <code>Identity(IVLObject)</code></p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#shortcuts","title":"Shortcuts","text":"<p><code>shift+ctrl+k</code> - Create all getter and setter operations in Data type</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#process-node","title":"Process Node","text":"<p>When we create our own <code>Node</code> in the Node browser we generate a so called <code>Process Node</code>. The <code>Process Node</code> is taking care of creating and updating the thing. It is incapsulating a living thing with a state.</p> <p>The <code>Process Node</code> has an Update function/Operation that get's called when the Node is in your patch. </p> <p>It also has a Create Operation that get's called one time when the Node is created.  In the repeat every time we change the iteration count a new instance of the object is created or an old one is deleted.</p> <p>So the <code>Process Node</code> first executes <code>Create</code> when it is created and then keeps on running <code>Update</code> of the lifetime of the node.</p> <p>The <code>Process</code> comes to life when it is placed in the patch or when the patch is loaded / re-started.</p> <p>The <code>Process Node</code> is stored on the Definition Side of the patch.</p> <p>Generally a <code>Process</code> is a wrapper when you want to group functionality in a subpatch together. We use it to structure the patch. In the background a <code>Process</code> is ether a Record or a Class.</p> <p>In some cases you also can execute the <code>Update</code> function of an object on the <code>Create</code> operation. For example you want to <code>Update</code> the state of object on the creation of the the patch.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#operations-in-process-node","title":"Operations in Process Node","text":"<p>Create your own operation</p> <p>we have to call the operation with the node of the name of</p> <p><code>Update</code> word is reserved - it gets executed every frame</p> <p>The <code>Pad</code> is there to hold the information of data between the operations.</p> <p>Use our custom operations in the patch</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#process-as-a-data-type","title":"Process as a data type","text":"<p>A <code>Process</code> represents on instance/object of a data type and works independently. </p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#create-process-node-on-definition-side","title":"Create Process node on definition side","text":"<p>Go to Defintion side by: click file name -&gt; Definitions or ALT-shift-a Node browser -&gt; Process -&gt; Pick name</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#patch-explorer","title":"Patch Explorer","text":"<p>Every Process Node has it's own Patch Explorer where Properties, Operations, etc of the Node get shown. You can show these by clicking the <code>P</code> button on the top left corner.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#assign-operations-to-logic","title":"Assign Operations to Logic","text":"<p>When we have logic or program flow that we only want to execute on Create or Update we can assign these operations to the flows by right click link -&gt; Assign -&gt; create/update.</p> <p>When you hover over the I/O Box you can see which operation is assigned. </p> <p>Now when you want a separation of the nodes that execute on <code>Create</code> and on <code>Update</code>, so that the update flow continues running we create a Boundary with a <code>Pad</code>.</p> <p> So every time the patch starts, <code>Create</code> is called -&gt; a random value for the <code>Circle</code> position.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#have-operations-available-but-not-exposing-them","title":"Have Operations available but not exposing them","text":"<p>By clicking the squared next to the process node operations we can say which operations are available on the node outside.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#record-data-type","title":"Record data type","text":"<p><code>Record</code> is a datatype that can get created and destroyed dynamically during runtime. This makes them ideal for example for using them for <code>Particles</code> that get created dynamically.</p> <p>They are like a Process Node. But Records are not offering a node, they give you the operations of the data type. </p> <p>Using the <code>Create</code> Operation of the Record in the Application side of the patch actually creates the object. If you use <code>Create</code> every frame a new object get's created every frame and nothing a actually get's stored, because the object gets overwritten every frame.</p> <p>Records have to be stored into a pad.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#parameters-in-a-record","title":"Parameters in a Record","text":"<p>To store information/properties in a <code>Record</code> we have to store it in a <code>Pad</code> Node. These properties need a type assigned. We can do it with <code>r click</code> configure</p> <p>With CTRL + L-Click we can expose an Input/Output for the <code>Pad</code>.  </p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#record-as-a-data-type","title":"Record as a data type","text":"<p><code>Record</code> is an unchangeable(immutable) data type. When you modify it, a new copy with the changes get's created. Like making photocopies with edits. Or like a vinyl that can't be changed after it is pressed.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#expose-inputs-and-outputs-of-pads-in-record","title":"Expose Inputs and outputs of Pads in Record","text":"<p>ctrl +k</p> <p>ctrl + left click to expose only input or output</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#class","title":"Class","text":"<p>A <code>Class</code> is a changeable data type. When you modify an instance of a class you changing the original object itself. Like editing the original document. So we use a class when we only want one instance that is not getting created multiple times in runtime.</p> <p>Classes are mutable so they can be changed, like a cassette tape that you can overwrite.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#create-a-class","title":"Create a class","text":"<p>There are multiple ways to create classes.  We can type in the class name in the node browser and then click on <code>Class</code>. Another way is to create a <code>Node</code> with the Classname then go inside of the node and on the left top assign <code>Class</code> instead of <code>Process</code></p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OOP/#objects","title":"Objects","text":"<p>We also can assign the data type <code>Object</code> then it is not specified but something is there. Because everything is an object.</p> <p>If we have our custom data types inside another custom data type it doesn't really mean that one data type only lives in there. It is just referenced in there.</p>","tags":["VVVV","VVVV/OOP","OOP"]},{"location":"topics/vvvv/OnlyExecuteNodesWhenTure/","title":"OnlyExecuteNodesWhenTure","text":"","tags":["VVVV","VVVV/DataFlow"]},{"location":"topics/vvvv/OnlyExecuteNodesWhenTure/#only-execute-nodes-when-value-true","title":"Only Execute Nodes When Value True","text":"<p>We can use a <code>Cache</code> node and place some nodes inside. The <code>Cache</code> only executes when an input on the top left corner is true.</p> <p>In this example the <code>Stopwatch</code> only counts up when the <code>Toggle</code> is true.</p>","tags":["VVVV","VVVV/DataFlow"]},{"location":"topics/vvvv/OnlyKeepValueWhereTryParseSuccess/","title":"OnlyKeepValueWhereTryParseSuccess","text":"","tags":["VVVV"]},{"location":"topics/vvvv/OnlyKeepValueWhereTryParseSuccess/#only-keep-values-where-try-parse-successful","title":"Only Keep Values Where Try Parse Successful","text":"<p>In a for each loop we can use <code>Keep</code> node and connect it into <code>TryParse</code> *Success output to only keep elements that returned a successful result from <code>TryParse</code></p>","tags":["VVVV"]},{"location":"topics/vvvv/OpenCV/","title":"OpenCV","text":"<p>OpenCV only works on the CPU In OpenCV the channel order is not RGB it is BGR.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>We can find all the possible inputs for OpenCV in the Sources folder <code>CvImage</code> <code>ImageReader</code> <code>VideoIn</code> <code>VideoPlayer</code> <code>VideoSourceToCVImage</code></p> <p>And all the outputs in the Sink folder</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#filters","title":"Filters","text":"<p>Filters allow us to manipulate image sources. - <code>Blur</code> - Blur filter - <code>Erode</code> - Washes out an image - <code>ApplyColorMap</code> - Apply different color filters/aps. - <code>Invert</code> - <code>Transform</code> - Apply transformations scale, rotation, translate to image - <code>GrayScale</code> - Three channel data into one channel data - <code>LUT</code>- Create own color map from spread of colors.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#get-specific-channel","title":"Get specific Channel","text":"<p>To get a specific channel we can use <code>GetChannel</code> node.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#splitjoin-image-into-channels","title":"Split/Join Image into Channels","text":"<p>The <code>Split</code> node allows us to retrieve the single channels of an image. <code>Join</code> nodes brings together a spread of image into one image.</p> <p>Another way to get a channel is with the <code>GetChannel</code> node.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#convert-into-one-channel-image","title":"Convert into one channel image","text":"<p>The <code>Grayscale</code> node converts an image with multiple channels into a gray one channel image.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#get-information-from-image","title":"Get information from image","text":"<p>To get informations like width, height,channels and format we can use <code>Info</code> node.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#converting-cvimage","title":"Converting CVImage","text":"<p>To convert a opencv image into skia or stride we first need the opencv <code>ToImage</code> and then <code>FromImage</code> for Skia. And for Stride <code>ImageToTexture</code>.</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#calculate-mean-color-of-image","title":"Calculate Mean Color of Image","text":"<p><code>Mean</code> node allows us to calculate the mean color of the whole image</p>","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/OpenCV/#get-color-of-pixelposition","title":"Get Color of Pixelposition","text":"","tags":["VVVV","OpenCV","2D"]},{"location":"topics/vvvv/Operations/","title":"Operations","text":"<p>If you have the same logic that happens in multiple places in you patch you can create operations. They just process data. They can't store any data.</p> <p>Operations need input and output</p>","tags":["VVVV","VVVV/Operations"]},{"location":"topics/vvvv/ProjectionMapping/","title":"Projection Mapping","text":"","tags":["VVVV","VVVV/ProjectionMapping","ProjectionMapping"]},{"location":"topics/vvvv/ProjectionMapping/#vlmapper","title":"VL.Mapper","text":"<p>https://www.youtube.com/watch?v=nU4qOoorldA</p>","tags":["VVVV","VVVV/ProjectionMapping","ProjectionMapping"]},{"location":"topics/vvvv/RandomOrderSpread/","title":"RandomOrderSpread","text":"","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/RandomOrderSpread/#create-random-order-of-spread","title":"Create Random Order Of Spread","text":"<p>With the <code>Randomizer</code> node we can randomly change the order of a spread.  Combined with a <code>Stopwatch</code> we can create also a increasing <code>seed</code> value.</p>","tags":["VVVV","VVVV/Spread"]},{"location":"topics/vvvv/Reactive/","title":"For each","text":"<p>you need to define the output datatype otherwise the for each is not properly executing.</p>"},{"location":"topics/vvvv/ReadFileIntoPatch/","title":"Read File into VVVV","text":"<p>The <code>FileReader</code> node allows us to read a file into the patch. It needs to get activated once.</p>","tags":["VVVV","VVVV/File"]},{"location":"topics/vvvv/RemoveRandomSlicesSpreadAndGenerate/","title":"RemoveRandomSlicesSpreadAndGenerate","text":"<ul> <li>VVVV</li> <li>VVVV/Collections comments: true</li> </ul>"},{"location":"topics/vvvv/RemoveRandomSlicesSpreadAndGenerate/#remove-random-slices-from-spread-and-regenerate","title":"Remove Random Slices from Spread and Regenerate","text":"<p>If we wan't to set an amount of random positions on the start we can assign <code>RandomSpread</code> to the <code>Create</code> operation. We than store that into a <code>Pad</code>. With <code>RemoveSliceAt</code> we remove a slide from the spread every time the <code>LFO</code> triggers On New Cycle. We also check if the length of the spread is 0. Then we add a new <code>RandomSpread</code> of values to the <code>Pad</code>.</p>"},{"location":"topics/vvvv/Runtime/","title":"Runtime","text":"<p>VVVV allows us to run different operations in the runtime of the program. It has the build in operations <code>Create</code> and <code>Update</code>.</p> <p>The <code>Update</code> operation is the runtime of the patch - it is continuously evaluating and executing the nodes assigned to the <code>Update</code> operation. The nodes are by default assigned to the <code>Update</code> operation.</p> <p></p> <p>The <code>Create</code> operation only runs once, when the patch get's initialized. It is useful to setup the values for the start of the patch or to provide default values for pads. We can also have complete calculations assigned and executed in <code>Create</code>. The <code>Create</code> operation has white links. </p> <p>With right click on a link we can assign the operations to nodes and links.</p> <p>We also can take advantage of <code>Create</code> and <code>Update</code> in Process Nodes</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Runtime/#controlling-the-runtime","title":"Controlling the Runtime","text":"<p>VVVV has the Quad Menu at the top left corner where you can control the runtime of the patch <code>Run</code> - F5 <code>Step</code> - F6 <code>Pause</code> - F7 <code>Stop</code> - F8 <code>Restart</code> - F9</p> <p>So every time the runtime is started, all patches that are open will call <code>Create</code>.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/SetDependencyInOtherFile/","title":"Set Dependency In Other file","text":"<p>We can import other patches and there information with  File Menu - Dependencies - Files - Add Existing/Add new</p>","tags":["VVVV","VVVV/Files"]},{"location":"topics/vvvv/SetOutputTrueForXTimeOnTrueInput/","title":"SetOutputTrueForXTimeOnTrueInput","text":"","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/SetOutputTrueForXTimeOnTrueInput/#set-output-true-for-x-time-on-true-input","title":"Set Output True For X Time On True Input","text":"<p>When you want to hold a true input for a specific amount of time and then let it go back to false you can use a <code>MonoFlop</code> Node.</p>","tags":["VVVV","VVVV/ControllingPatches"]},{"location":"topics/vvvv/ShowHelpPathNode/","title":"Show help patch of node","text":"<p>With <code>F1</code> key we can show a help patch of a specific node, if one exists.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Skia/","title":"Skia","text":"<p>In VVVV Skia is the build-in 2D rendering library. Skia pack needs to be activated in the node browser on start.</p> <p>We output our final composition with the <code>Renderer</code> node. It takes a layer input of all 2D content.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#2d-primitives","title":"2D Primitives","text":"<p>Skia provides some basic 2D primitives to draw - <code>Rectangle</code> - <code>RoundRectangle</code> - <code>Circle</code> - <code>Polygon</code> - allows to draw shapes from a multi point input - good to draw a data line with polygon - <code>Spiral</code> - <code>DrawImage</code> - <code>Segment</code></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#segment","title":"Segment","text":"<p><code>Segment</code> node is versatile node that for example allow to draw half circles and more.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#connectall-points-by-line","title":"ConnectAll Points by Line","text":"<p>We can use <code>ConnectAll</code> node to get the from and to values from the line that connect two points. These we then can plug into a <code>Line</code> node to actually draw the line. </p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#draw-shape-from-spread-of-points","title":"Draw shape from spread of points","text":"<p>We can use <code>Polygon</code> Node to draw a shape of points from the spread.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#draw-a-path-from-spread","title":"Draw a path from spread","text":"<p>If we want to draw a path from a spread we can path the spread values into a <code>AddPoly(Path)</code> node and then connect it with a <code>DrawPath</code> node. Check the Close input to set if the path should be closed or not.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#move-object-along-a-path","title":"Move object along a path","text":"<p>The <code>SamplePath</code> node samples the path and allows us to move an object along a path. It also gives aus the tangent at the current position on the path which we can use to rotate the object along the path.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#data-types","title":"Data types","text":"<ul> <li>Layer - Layer to be rendered</li> <li>SkiaPaint - change the look</li> <li>SKImage/SKPicture - Image formats</li> </ul>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#paintstyle","title":"Paint/Style","text":"<p>The SkiaPaint property defines how a 2D primitive gets drawn</p> <p>With <code>Stroke</code> we draw an outline and with <code>Fill</code> we can fill the primitive.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#transform","title":"Transform","text":"<p>With the <code>TransformSRT(Skia)</code> node we can apply Rotation,Scale,Translation transformation. It applies the transformations relative to the center of the object. If we want to transform relative to an anchor point different from the center we can use <code>TransformSRT(Center)</code>.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#rotate-shapes-on-circle","title":"Rotate Shapes on circle","text":"<p>If we want to position shapes on a circular shape and then rotate each element towards the center we can use <code>CircleSpread</code> and then use the position and convert it into a rotation with an <code>Angle</code> node.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#chaining-transformations","title":"Chaining transformations","text":"<p>We also have each individual transformation as a node available  <code>Translate</code> <code>Rotate</code> <code>Scale</code> We can chain them and then input them into a <code>Transform</code> node.</p> <p> A different order results in different transformations.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#group","title":"Group","text":"<p>To join multiple layers we use the <code>Group</code> node to bring them together. First input is the layer most in the back.</p> <p>With <code>CTRL +/-</code> we can create more or less inputs in to the node.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#group-spread-of-elements","title":"Group spread of elements","text":"<p>After a Loop we get a spread of layers. With a <code>Group(Spectral)</code> node we can convert the spread into a single layer.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#blend-modes","title":"Blend modes","text":"<p>We can set <code>SetBlendMode</code> node between the primitive and Paint nodes to define how layers get blended.</p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#images","title":"Images","text":"<p>To draw images and svgs in Skia it uses the data types <code>SKImage</code> and <code>SkPicture</code>.</p> <p>To get the image from a path we use a <code>ImageReader</code> and plug it into <code>DrawImage</code> node.</p> <p></p> <p>To load SVGS we need the <code>SVGReader</code> and to draw the <code>DrawPicture</code></p> <p>Adding a <code>ColorFilter</code> with <code>Lighting</code> allows us to fill the svg with another color. </p> <p><code>Lighting</code> multiplies RGB Channels by one color and then adds second color.</p> <p></p> <p>Skia allows us to also Render compositions off screen and allow us then to use the render as a data type <code>SKImage</code>. The render is then not shown in a window.</p> <p></p> <p>We then can also save the render into a file with <code>ImageWriter</code> node. It allows us to set the path, file format quality and has a boolean to set to <code>write</code></p> <p>More infos here</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#mixing-skia-stride","title":"Mixing Skia &amp; Stride","text":"<p>To convert Stride into Skia we need to connect <code>RootScene</code> into a <code>SceneTexture</code> node and then connect the <code>SceneTexture</code> with <code>TextureToImage</code> and <code>FromImage(Imaging)</code></p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#videos","title":"Videos","text":"<p>To draw videos in vvvv we need to reference the <code>VL.Video</code> package in the help browser.</p> <p>We then can use the <code>VideoIn</code> or the <code>VideoPlayer</code>.Both return <code>IVideoSource</code> data type that needs to be converted with <code>VideoSourceToSKImage</code></p> <p> To draw your camera input we need to connect <code>VideoIn</code> node into a <code>VideoSourceToSKImage</code> and then connect it with the <code>DrawImage</code> node.</p> <p>With <code>CameraControls</code> we can set values like Pan,Exposure,Zoom etc.</p> <p>To show a video we can use <code>VideoPlayer</code> node, ether to show video from a <code>url</code> or to show a video from our computer.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#draw-a-drop-shadow","title":"Draw a drop shadow","text":"<p>To draw a drop shadow we can add <code>Image Filter</code> with <code>DropShadow</code> node to the primitive.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#create-shiny-effect","title":"Create Shiny effect","text":"<p>For shiny effects we add a <code>SetShader</code> and a <code>Radial Gradient</code>node. To make the it only apply the bright colors we can set a <code>SetBlendMode</code></p> <p></p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#camera","title":"Camera","text":"<p>In Skia we also have a <code>Camera</code> node which allows us to navigate through the Skia Window but it also allows us to set a fixed view position with its parameters.</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/Skia/#show-performance-meter","title":"Show Performance meter","text":"<p>With <code>F2</code> we can show the performance of our sketch</p>","tags":["VVVV","Skia","2D"]},{"location":"topics/vvvv/SmoothJitteryInputData/","title":"Smooth jittery input data","text":"<p>The <code>Damper</code> node allows us to smoothen out signals that are to jumpy and jittery.</p> <p><code>Damper</code> also outputs a boolean to check if value changed.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/SplitStringBySeperator/","title":"SplitStringBySeperator","text":"","tags":["VVVV"]},{"location":"topics/vvvv/SplitStringBySeperator/#split-string-by-separator","title":"Split String By Separator","text":"<p>A <code>Split</code> node allows us to split a string into a spread of single elements.</p>","tags":["VVVV"]},{"location":"topics/vvvv/StoringData/","title":"Storing Data","text":"","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/StoringData/#pads","title":"Pads","text":"<p>We can use <code>Pad</code> to store data and then to use or manipulate this data in the next frame.  When you create a <code>Pad</code> consider a distinctive name - you then can find the <code>Pad</code> in the node-browser.</p> <p>A <code>Pad</code> is like a variable in other programming environments - we can store any data type in them. We you create it the <code>Pad</code> is undefined. To define it we ether need to connect the desired data type with the pad or right click -&gt; configure</p> <p>For real-time applications it is important to consider that the data from the <code>Pad</code> will be available in the next frame.</p> <p></p> <p>When you modify data from a <code>Pad</code> you always need to store the new data back into the <code>Pad</code>.</p> <p><code>If Regions</code> are a good way to change the data when a condition is met. </p> <p>Another cleaner way to get the same effect but without the region we can make use of the Apply Pin that most of the nodes have. This input is hidden so we need to set it in the nodes Configure menu. </p> <p>So we for example can create a <code>Pad</code> for the position of an object and then manipulate the position if a condition is true.</p> <p></p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/StoringData/#adaptive-vs-predefined","title":"Adaptive vs Predefined","text":"<p>We can use pads in two ways. We ether define a <code>Pad</code> in the Configure Menu. This means everything in the links is predefined. </p> <p>Another way is to define the data type of the <code>Pad</code> adaptively so by the nodes in between the pads. This is a more flexible approach.  </p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/StoringData/#record","title":"Record","text":"<p>When you want that the <code>Record</code> is not recreated every frame but lives inside the patch for a longer time we store the <code>Record</code> in a Pad.  Pad is where things live in for a longer time.</p>","tags":["VVVV","VVVV/Data"]},{"location":"topics/vvvv/Stride/","title":"Stride","text":"<p><code>Stride</code> is the build-in 3D render engine of vvvv.  Stride contains primitives, shaders, lights and more. We output our stride composition into a <code>SceneWindow</code>.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#shortcuts","title":"Shortcuts","text":"<p>Reset camera in <code>RenderWindow</code> - <code>R</code> Show helper in Scene - <code>F4</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#transformations","title":"Transformations","text":"<p>For basic information about transformations see here.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#transform-between","title":"Transform between","text":"<p>The <code>TransformBetween</code> node allows to transform a shape so it is positioned between the two input positions.</p> <p></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#child-transformations","title":"Child Transformations","text":"<p>To have shape being transformed relative to a parent shape we can set them as a Child entity to the parent.</p> <p></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#scale-shape-uniformly","title":"Scale shape uniformly","text":"<p>The <code>UniformScale</code> allows us to scale a shape on all three axis with one scalar value.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#materials","title":"Materials","text":"<p>With the <code>ColorMaterial</code> node we can set a material for the meshes of the primitives. Stride also has <code>TextureMaterial</code>, <code>PBRMaterials</code>.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#color-material","title":"Color Material","text":"<p>When using <code>Color Material</code> shading is disabled and lights won'T have any effect on the volume.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#pbr-material","title":"PBR Material","text":"<p><code>PBRMaterials</code> enable shadows and the define how lights will be reflected on the volume.</p> <p>To set the transparency on a <code>PBRMaterial</code> we can use a <code>Blend</code> node and set alpha value.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#texture-as-diffuse-color-of-pbr","title":"Texture as Diffuse Color of PBR","text":"<p>With a <code>ColorMap</code> node we can translate a texture into a diffuse color input for pbr materials</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#texturematerial","title":"TextureMaterial","text":"<p>If we want to apply textures to our model we can load the texture with <code>FileTexture</code>plug that into a <code>TextureMaterial</code>.</p> <p></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#primitives","title":"Primitives","text":"<p>Stride brings build-in primitives: - Box - BoxSphere  - Capsule - Cone - Cylinder - Disc - Plane  - Sphere - Teapot  - Torus</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#data-types","title":"Data types","text":"<p>Entity - models, lights, cameras Material - change look of entities when rendered Texture - image format</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#group","title":"Group","text":"<p>We can combine multiple primitives in a <code>Group</code> node.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#group-spread-of-elements","title":"Group spread of elements","text":"<p>After a Loop we get a spread of entities. With a <code>Group(Spectral)</code> node we can convert the spread into a single entity.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#light","title":"Light","text":"<p>To see something in our scene we should add a light source.  Stride has multiple lights: - AmbientLight - DirectionalLight - SkyboxLight - PointLight</p> <p>We also can add multiple light source with a <code>Group</code> node. </p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#skyboxlight","title":"SkyboxLight","text":"<p>Allows you to add your own cubemap as the light source.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#shadows","title":"Shadows","text":"<p>In the primitive node we can define if it is a <code>ShadowCaster</code> or not.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#camera","title":"Camera","text":"<p>When there is no Camera connected to the scene VVVV assumes the default orbit camera, which allows you to navigate through the scene.</p> <p>When you put your own camera they need to be connected to the <code>root scene</code> and the <code>SceneWindow</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#render","title":"Render","text":"<p>To render our scene we need to join the <code>primitives</code>, <code>groups</code>,<code>lights</code> in a <code>RootScene</code>. This then get's plugged into  the <code>SceneWindow</code></p> <p>In the `SceneWindow we can set also the background color of our render.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#render-out-image","title":"Render out image","text":"<p>When we want to just render our scene as an image we can plug <code>RootScene</code>and <code>Camera</code> into a <code>SceneTexture</code> and then connect this to a <code>TextureWindow</code> node.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#fullscreenquadrenderer","title":"FullScreenQuadRenderer","text":"<p>We can use <code>FullScreenQuadRenderer</code> to show a texture or image full screen in the <code>RenderWindow</code>.</p> <p></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#render-mesh-in-wireframe","title":"Render Mesh in Wireframe","text":"<p>Stride has a <code>Wireframe</code> node that allows to render a <code>MeshRenderer</code> with a wireframe material. It is a advanced node.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#postfx","title":"PostFX","text":"<p>We can apply <code>PostFX</code> by plugging the node into the <code>SceneWindow</code> PostFX input.</p> <p>Or we render into <code>RenderTexture</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#fog","title":"Fog","text":"<p>The <code>Fog</code> node enables fog in the scene.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#outline","title":"Outline","text":"<p><code>Outline</code> creates a cartoon style effect.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#grain","title":"Grain","text":"<p>We can apply grain by plugging <code>FilmGrain</code> in to a <code>Cons(Collection.Spread)</code> and then into Color Transforms input. </p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#lightstreak","title":"LightStreak","text":"<p>Shining effect along bright areas direction.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#localreflection","title":"LocalReflection","text":"<p>If you have for example a metal material for your shape and you want that the other objects in the scene get properly reflected on the material we can use <code>LocalReflection</code> PostFX node. It can affect your performance.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#shortcuts_1","title":"Shortcuts","text":"<p>Reset view - <code>long press r</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#convert-3d-into-2d-texture","title":"Convert 3D into 2D texture","text":"<p>Instead of outputting <code>RootScene</code> into <code>SceneWindow</code> we connect it to <code>SceneTexture</code>. Also plugin a <code>FlatCamera</code> mode into the <code>SceneTexture</code>. We then can use Stride.TextureFX to further manipulate the texture.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#texture","title":"Texture","text":"<p>Stride offers static and dynamic texture sources -<code>BubbleNoise</code> -<code>Checkerboard</code> -<code>Color</code> -<code>ColorPalette</code> -<code>Gradient</code> -<code>Halo</code> -<code>Halo(Gradient)</code> -<code>Liquish</code> -<code>Mandelbrot</code> -<code>Neurons</code> -<code>Noise</code> -<code>Circle</code> -<code>Electricity</code> -<code>Polygon</code> - allows to draw shapes from a multi point input - good to draw a data line with polygon -<code>Rectangle</code> -<code>SkiaTexture</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#specific-drawing-techniques","title":"Specific drawing techniques","text":"","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#draw-a-line-with-polygon-node","title":"Draw a line with Polygon Node","text":"","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#filters","title":"Filters","text":"<p>Stride also offers a lot of Filter Shaders to manipulate the textures.</p> <ul> <li><code>ShiftRGB</code></li> <li><code>Threshold</code></li> <li><code>Quantize</code> - reduce colors of input to stepped color output</li> <li><code>HSCB</code>- hue,saturation,contrast,brightness color correction</li> </ul>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#mixers","title":"Mixers","text":"<p>We can combine multiple texture with mixer nodes. - <code>Blend</code> - Blend between two textures using different blending options. - <code>Pixelate</code> - Blend between two textures using pixelate effect - <code>Dissolve</code> - Blend between texture using rough pixely effect</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#video","title":"Video","text":"<p>In Stride we have to convert a <code>VideoIn</code> or <code>VideoPlayer</code> with a <code>VideoSourceToTexture</code> node and then we can use it as an input for <code>TextureMaterial</code> or when Stride.TextureFX enabled into a <code>TextureWindow</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#mixing-skia-and-stride","title":"Mixing Skia and Stride","text":"<p><code>SkiaTexture</code> transforms skia drawing into a texture. This allows us to use it for 3D objects material or apply texture effects to it.</p> <p> A performant way to show Skia in stride is to use <code>SkiaRenderer</code> and input it into a <code>RenderEntity</code>. This we then can add to the <code>RootScene</code> of Stride.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#convert-vector3-to-vector2","title":"Convert Vector3 to Vector2","text":"<p><code>XY</code> Node lets you quickly pick first to values of <code>Vector3</code> and outputs <code>Vector2</code> data type.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#load-model-into-stride","title":"Load Model into stride","text":"<p>With the <code>FileModel</code>we can load fbx obj files into stride. If you don't see the model you probably need to adapt the import scale size in the node</p> <p>To preview the model in the scene we can use <code>ModelEntity</code></p> <p></p> <p>To assign the textures to our model we need a combination of <code>FileTexture</code>, <code>FileTextureGrayScale</code> and <code>FileTextureNormalMap</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#get-data-from-mesh","title":"Get data from Mesh","text":"<p>To get the data like positions of vertex, uvs, normals etc we can first pick the mesh we want from our model with <code>GetMeshes</code> and then split the data with <code>MeshSplit</code>. </p> <p></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#gpu-instancing","title":"GPU Instancing","text":"<p>To do GPU Instancing in Stride we need a spread of position data and feed it into a <code>InstancingSpreadComponent</code>. This we can transform into Component value with <code>FromValue(Spread)</code> and feed it for example into a <code>Box</code> as component.</p> <p></p> <p>We also can convert the position data into color values with <code>Vector3(Split)</code>, feed it into a <code>RGBA</code> node and then collect the color data in <code>ColorPerInstance</code></p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#background","title":"Background","text":"<p>If you want to create for example a gradient background for your Stride scene you can add a <code>Background(Stride.Models)</code> node to your <code>RootScene</code>. You then can add <code>Gradient</code> node from Stride.TextureFX as a Texture input into the <code>Background</code>.</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#shaders","title":"Shaders","text":"","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/Stride/#further-infos","title":"Further infos","text":"<p>A whole tutorial is here</p>","tags":["VVVV","Stride","3D"]},{"location":"topics/vvvv/StrideFX/","title":"StrideFX","text":"","tags":["VVVV","Stride","Texture"]},{"location":"topics/vvvv/StrideFX/#change-mapping-of-transformed-texture","title":"Change mapping of transformed texture","text":"<p>If we want to change how a transformed texture gets scalled we can add <code>SamplerState</code> node to the custom sampler input of the <code>Transform(Filter)</code>.</p> <p></p>","tags":["VVVV","Stride","Texture"]},{"location":"topics/vvvv/StrideFX/#set-texturesize-from-texture-window","title":"Set Texturesize from Texture Window","text":"","tags":["VVVV","Stride","Texture"]},{"location":"topics/vvvv/StrideFX/#group-textures","title":"Group Textures","text":"<p>To group textures out of a for each loop in StrideFX in a similar way like a <code>Group(Spectral)</code> we need to use an accumulator and blend inside the for-each.</p> <p></p>","tags":["VVVV","Stride","Texture"]},{"location":"topics/vvvv/StructureProjects/","title":"Structure Projects","text":"<p>Especially when you have bigger projects you should structure up your patch in different layers.</p> <p>Store subparts like <code>AudioAnalysis</code>, <code>MidiInputs</code>, ... in there own patch and then implement them as modules. Store as class and process node.</p>"},{"location":"topics/vvvv/StructureProjects/#context-class","title":"Context Class","text":"<p>In the Context we create a class where we collect the properties of our system inside. We create a unique data type to collect all the inputs.</p> <p>We add some operations to retrieve the properties - GetAudioAnalysis, GetMidiInputs, GetKinectData, get LeapData.</p> <p>We then have the Context instance that we can use everywhere in our patch to retrieve and handle the information.</p> <p>The Context wraps all the resources of the system and </p>"},{"location":"topics/vvvv/StructureProjects/#content-process","title":"Content Process","text":"<p>In the Content  we put something like our visual elements.</p> <p>We can connect the context to the content and then in the contect get the parts from the context that we need.</p>"},{"location":"topics/vvvv/TextureFX/","title":"TextureFX","text":""},{"location":"topics/vvvv/TextureFX/#blend-between-two-textures","title":"Blend Between two textures","text":"<p>Use a <code>Blend(Mixer)</code> node to blend between two textures with a float value. </p>"},{"location":"topics/vvvv/TriggerBoolSeconds/","title":"TriggerBoolSeconds","text":"","tags":["VVVV"]},{"location":"topics/vvvv/TriggerBoolSeconds/#trigger-bool-event-very-x-seconds","title":"Trigger Bool event very x seconds","text":"<p>To create a trigger that goes true every x seconds we can use <code>RealTimeClock</code> Node connect it into the <code>Trigger</code> Node.</p>","tags":["VVVV"]},{"location":"topics/vvvv/Typography/","title":"Typography","text":"","tags":["VVVV","VVVV/Typography","Typo"]},{"location":"topics/vvvv/Typography/#skia-text","title":"Skia Text","text":"<p>With the <code>Text</code> node we can set Typography in our sketches. To manipulate style of the text use <code>FontAndParagraph</code> Node into the Paint input of the <code>Text</code>. The <code>FontAndParagraph</code> node allows us to define font, style, size, color and horizontal and vertical alignment.</p>","tags":["VVVV","VVVV/Typography","Typo"]},{"location":"topics/vvvv/Typography/#multiline-text","title":"Multiline Text","text":"<p>If you have longer text that you want to keep in an area we can use a <code>BreakAtRect</code> node to define where the text should break it's lines. We use a <code>Rectangle(Join)</code> to define the area.</p> <p></p>","tags":["VVVV","VVVV/Typography","Typo"]},{"location":"topics/vvvv/UsefulLibraries/","title":"UsefulLibraries","text":"<ul> <li>VVVV comments: true</li> </ul>"},{"location":"topics/vvvv/UsefulLibraries/#useful-libraries","title":"Useful Libraries","text":"<p><code>VL.IO.NDI</code> - video streaming</p> <p><code>VL.ExtendedTutorials</code> - Very intresting <code>VL.PolyTools</code> - Tools for working with polygons and polypaths in vvvv gamma. <code>VL.MiDi.Music.Utils</code> - MIDI</p> <p><code>VL.BadMapper</code> - Mapping <code>VL.IO.Firmata</code> <code>VL.Geo</code> working with geo data <code>VL.IO.ArtNet</code> <code>VL.ScreenRecorder</code> <code>VL.IO.Xbox360Controller</code> <code>VL.GenerativeGestaltung</code> <code>VL.Flex.Skia</code> <code>VL.JSON</code> <code>VL.FastNoise</code> <code>VL.SharpNoise</code> <code>VL.2D.Voronoi</code> <code>VL.SuperMonitor</code> <code>VL.ILDA</code> laser control <code>VL.IO.Net.Email</code> <code>VL.ScalableDisplay</code> <code>VL.Mapper</code> <code>VL.SocketIO</code> <code>VL.Markov</code> markov chain generatrer <code>VL.Devices.ENTTEC</code> <code>VL.PDFReader</code> <code>VL.Nvidia.CUDA</code> <code>VL.Ollama</code> <code>VL.IO.PLY</code> - Load PLY files into vvvv <code>nuget install VL.IO.PLY -pre</code></p> <p><code>VL.2D.CurveFitting</code> - Create 2D paths</p>"},{"location":"topics/vvvv/WindowSettings/","title":"WindowSettings","text":"<ul> <li>VVVV comments: true</li> </ul>"},{"location":"topics/vvvv/WindowSettings/#window-settings","title":"Window Settings","text":"<p>Look at Explanation Overview Window and FullScreen patch.</p> <p><code>WindowState</code></p> <p><code>SetFullScreen</code></p> <p><code>SetWindowState</code></p>"},{"location":"topics/vvvv/cSharpScripts/","title":"C# Scripts","text":"<p>We can write our own nodes with c# in vvvv. We can write methods in a .csx file and then get a node in vvvv.</p> <p>Add a file to dependencies. </p> <p><code>Create</code> method is the constructor We also can reference C# scripts. </p>","tags":["VVVV","VVVV/C#","C#"]},{"location":"topics/vvvv/bits/HoldChangedValueForTimeInterval/","title":"HoldChangedValueForTimeInterval","text":"","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/bits/HoldChangedValueForTimeInterval/#hold-changedvalue-for-time-interval","title":"Hold ChangedValue For Time Interval","text":"<p>We can use a <code>Monoflop</code> node to hold a value for a time interval.</p>","tags":["VVVV","VVVV/Animation"]},{"location":"topics/vvvv/bits/Move3DElementOnCircularPath/","title":"Move3DElementOnCircularPath","text":"","tags":["VVVV","VVVV/Stride"]},{"location":"topics/vvvv/bits/Move3DElementOnCircularPath/#move-3d-element-on-circularpath","title":"Move 3D Element on CircularPath","text":"<p>We can take a <code>CircleSpread</code>, animate the Phase with for example an <code>LFO</code> and then take afterwards the first slice of the spread with <code>GetSlice</code>. This gives us then a current position on the path.</p>","tags":["VVVV","VVVV/Stride"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/til/","title":"TIL","text":""},{"location":"blog/category/general/","title":"General","text":""}]}